
#Область Загрузка 

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл выгрузки ""Ариадна""";	
	ДиалогВыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогВыбораФайла.МножественныйВыбор			=	Ложь;
	ДиалогВыбораФайла.ИндексФильтра					=	1;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	ДиалогВыбораФайла.Фильтр						=	"Файл Excel(*.xls)|*.xls|Файл Excel(*.xlsx)|*.xlsx";

	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения,, ДиалогВыбораФайла,, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Состояние(Нстр("ru = 'Выполняется загрузка данных. Пожалуйста, подождите...'"));
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		Если Не Файл.Существует() Тогда
			
			ТекстСообщения = Нстр("ru = 'Указанный файл не существует'");
			Возврат;
			
		КонецЕсли;
		
		ПолноеИмяФайла = Файл.ПолноеИмя;
		
		Если ЗамерятьВремяЗагрузки Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Начало загрузки: " + Строка(ТекущаяДата()));
		КонецЕсли;
		
		ЗагрузитьДанныеНаСервере(Адрес, Файл.Расширение);
		
		Если ЗамерятьВремяЗагрузки Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Окончание загрузки: " + Строка(ТекущаяДата()));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(Адрес, Расширение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранИЛИща(Адрес);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	//загружаем таблицу из файла как есть
	ТаблицаИзФайла = ПолучитьТаблицуИзФайла(ИмяВременногоФайла);
	//выполняем предварительную обработку, с проставлением типов и обработкой данных
	ПредварительнаяТаблица = ПолучитьПредварительнуюТаблицу(ТаблицаИзФайла);
	
	ЗаполнитьДеревоДанные(ПредварительнаяТаблица);
	
	УдалитьВременныйФайл(ИмяВременногоФайла);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуИзФайла(ИмяВременногоФайла) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение, ТипФайлаТабличногоДокумента.XLSX);
	
	ТаблицаДанных = СоздатьТаблицуДанных();
	
	//переделано на фиксированную таблицу, т.к. имена колонок и типы значений не явные 
	//ТаблицаДанных = Новый ТаблицаЗначений;
	//Получим имена колонок
	//НомерСтроки = 8;
	//НомерСтолбца = 1;
	//Пока Истина Цикл
	//	ПрочитанноеЗначение = ИсключитьНеЧитаемыеСимволыИзСтроки(ТабличныйДокумент.Область(НомерСтроки, НомерСтолбца).Текст);
	//	ИмяКолонки = НаименованиеКолонки(ПрочитанноеЗначение);
	//	Если ЗначениеЗаполнено(ИмяКолонки) Тогда
	//		НоваяКолонка = ТаблицаДанных.Колонки.Добавить(ИмяКолонки);
	//		НоваяКолонка.Заголовок = ПрочитанноеЗначение;
	//	Иначе
	//		Прервать;
	//	КонецЕсли;
	//	НомерСтолбца = НомерСтолбца + 1;
	//КонецЦикла;
	//КоличествоСтолбцов = НомерСтолбца;
	
	//Добавим строки в таблицу
	КоличествоСтолбцов = ТаблицаДанных.Колонки.Количество();
	НомерСтроки = 9;
	
	Пока Истина Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		КоличествоПустыхСтолбцов = 0;
		
		Для НомерСтолбца = 1 По КоличествоСтолбцов Цикл
			
			ПрочитанноеЗначение = СокрЛП(ИсключитьНеЧитаемыеСимволыИзСтроки(ТабличныйДокумент.Область(НомерСтроки, НомерСтолбца).Текст));
			Если ЗначениеЗаполнено(ПрочитанноеЗначение) Тогда
				//НоваяСтрока[НомерСтолбца - 1] = ПрочитанноеЗначение;
				ТипЗначения = ТаблицаДанных.Колонки[НомерСтолбца - 1].ТипЗначения;
				Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
					ПрочитанноеЗначение = СтрЗаменить(ПрочитанноеЗначение, " ", "");
				КонецЕсли;
				НоваяСтрока[НомерСтолбца - 1] = ТипЗначения.ПривестиЗначение(ПрочитанноеЗначение);
			Иначе
				КоличествоПустыхСтолбцов = КоличествоПустыхСтолбцов + 1;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоПустыхСтолбцов = КоличествоСтолбцов Тогда
			ТаблицаДанных.Удалить(НоваяСтрока);
			Прервать;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаСервере
Функция ПолучитьПредварительнуюТаблицу(ТаблицаИзФайла) Экспорт
	
	ПредварительнаяТаблица = Новый ТаблицаЗначений;
	
	ПредварительнаяТаблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПредварительнаяТаблица.Колонки.Добавить("КонтрагентПредставление");
	ПредварительнаяТаблица.Колонки.Добавить("ИНН");
	ПредварительнаяТаблица.Колонки.Добавить("КПП");

	ПредварительнаяТаблица.Колонки.Добавить("НомерДоговора");
	ПредварительнаяТаблица.Колонки.Добавить("ДоговорКонтрагента");
	
	ПредварительнаяТаблица.Колонки.Добавить("ФИО");
	ПредварительнаяТаблица.Колонки.Добавить("НомерПутевки");
	ПредварительнаяТаблица.Колонки.Добавить("ДатаЗаезда");
	ПредварительнаяТаблица.Колонки.Добавить("ДатаВыезда");
	
	ПредварительнаяТаблица.Колонки.Добавить("КатегорияПутевки");
	ПредварительнаяТаблица.Колонки.Добавить("КатегорияПалаты");
	                                                 	
	ПредварительнаяТаблица.Колонки.Добавить("Сумма");
	ПредварительнаяТаблица.Колонки.Добавить("СтавкаНДСЧислом");
	ПредварительнаяТаблица.Колонки.Добавить("СтавкаНДС");
	ПредварительнаяТаблица.Колонки.Добавить("СуммаНДС");
	
	ПредварительнаяТаблица.Колонки.Добавить("СчетНаОплатуПокупателю");
	ПредварительнаяТаблица.Колонки.Добавить("РеализацияТоваровУслуг");
	ПредварительнаяТаблица.Колонки.Добавить("СчетФактураВыданный");
	
	ВыборкаДоговоровфизическихЛиц = ПолучитьВыборкуДоговоровДляФизическихЛиц();
	
	Для Каждого СтрокаТаблицаИзФайла Из ТаблицаИзФайла Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицаИзФайла.НомерДоговора) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаПредварительнаяТаблица = ПредварительнаяТаблица.Добавить();
		
		НоваяСтрокаПредварительнаяТаблица.КонтрагентПредставление = СтрокаТаблицаИзФайла.Организация;
		НоваяСтрокаПредварительнаяТаблица.ИНН = Формат(СтрокаТаблицаИзФайла.ИНН, "ЧГ=0");
		НоваяСтрокаПредварительнаяТаблица.КПП = Формат(СтрокаТаблицаИзФайла.КПП, "ЧГ=0");
		НоваяСтрокаПредварительнаяТаблица.Контрагент = ПолучитьКонтрагента(НоваяСтрокаПредварительнаяТаблица);

		НоваяСтрокаПредварительнаяТаблица.НомерДоговора = Формат(СтрокаТаблицаИзФайла.НомерДоговора, "ЧГ=0");
		НоваяСтрокаПредварительнаяТаблица.ДоговорКонтрагента = ПолучитьДоговорКонтрагента(НоваяСтрокаПредварительнаяТаблица, ВыборкаДоговоровфизическихЛиц);
		
		НоваяСтрокаПредварительнаяТаблица.ФИО = СтрокаТаблицаИзФайла.ФИО;
		НоваяСтрокаПредварительнаяТаблица.НомерПутевки = СтрЗаменить(СтрокаТаблицаИзФайла.НомерПутевки, " ", "");
		НоваяСтрокаПредварительнаяТаблица.КатегорияПутевки = СтрокаТаблицаИзФайла.КатегорияПутевки;
		НоваяСтрокаПредварительнаяТаблица.КатегорияПалаты = СтрокаТаблицаИзФайла.КатегорияПалаты;
		
		НоваяСтрокаПредварительнаяТаблица.ДатаЗаезда = ПолучитьДатуЗаезда(СтрокаТаблицаИзФайла.ДатаЗаезда);
		НоваяСтрокаПредварительнаяТаблица.ДатаВыезда = ПолучитьДатуВыезда(СтрокаТаблицаИзФайла.ПериодПребыванияПоПутевке);
		
		НоваяСтрокаПредварительнаяТаблица.Сумма = СтрокаТаблицаИзФайла.Сумма;
		НоваяСтрокаПредварительнаяТаблица.СтавкаНДСЧислом = СтрокаТаблицаИзФайла.СтавкаНДС;
		НоваяСтрокаПредварительнаяТаблица.СтавкаНДС = ПолучитьСтавкуНДС(НоваяСтрокаПредварительнаяТаблица);
		НоваяСтрокаПредварительнаяТаблица.СуммаНДС = СтрокаТаблицаИзФайла.СуммаНДС;
		
		ВыполнитьПоискДокументов(НоваяСтрокаПредварительнаяТаблица);
		
	КонецЦикла;
	
	Возврат ПредварительнаяТаблица;
	
КонецФункции

&НаСервере
Процедура ВыполнитьПоискДокументов(НоваяСтрокаПредварительнаяТаблица)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваровУслугСсылка,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателюСсылка,
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактураВыданныйСсылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО (СчетФактураВыданныйДокументыОснования.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	РеализацияТоваровУслуг.Контрагент = &Контрагент
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(НоваяСтрокаПредварительнаяТаблица.ДатаЗаезда));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(НоваяСтрокаПредварительнаяТаблица.ДатаВыезда));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", НоваяСтрокаПредварительнаяТаблица.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", НоваяСтрокаПредварительнаяТаблица.Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		НоваяСтрокаПредварительнаяТаблица.РеализацияТоваровУслуг = ВыборкаДетальныеЗаписи.РеализацияТоваровУслугСсылка;
		НоваяСтрокаПредварительнаяТаблица.СчетНаОплатуПокупателю = ВыборкаДетальныеЗаписи.СчетНаОплатуПокупателюСсылка;
		НоваяСтрокаПредварительнаяТаблица.СчетФактураВыданный = ВыборкаДетальныеЗаписи.СчетФактураВыданныйСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуЗаезда(ДатаЗаездаСтрока)
	
	Если СтрДлина(ДатаЗаездаСтрока) <> 10 Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Год = Число(Сред(ДатаЗаездаСтрока, 7, 4));
	Месяц = Число(Сред(ДатаЗаездаСтрока, 4, 2));
	День = Число(Сред(ДатаЗаездаСтрока, 1, 2));
	
	Возврат Дата(Год, Месяц, День);
	
КонецФункции

&НаСервере
Функция ПолучитьДатуВыезда(Знач ДатаВыездаСтрока)
	
	Если СтрДлина(ДатаВыездаСтрока) <> 23 Тогда
		Возврат '00010101';
	КонецЕсли;
	
	ДатаВыездаСтрока = Сред(ДатаВыездаСтрока, 14, 23);
	
	Год = Число(Сред(ДатаВыездаСтрока, 7, 4));
	Месяц = Число(Сред(ДатаВыездаСтрока, 4, 2));
	День = Число(Сред(ДатаВыездаСтрока, 1, 2));
	
	Возврат Дата(Год, Месяц, День);
	
КонецФункции

&НаСервере
Функция ПолучитьКонтрагента(СтрокаТаблицы)
	
	Контрагент = Неопределено;
	
	// для юридических лиц и ИП
	Если ЗначениеЗаполнено(СтрокаТаблицы.ИНН) Тогда
		Контрагент = НайтиКонтрагента(СтрокаТаблицы.ИНН, СтрокаТаблицы.КПП);
	Иначе
		Контрагент = КонтрагентДляФизическихЛиц;
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

&НаСервере
Функция ПолучитьВыборкуДоговоровДляФизическихЛиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.Номер КАК НомерДоговора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", КонтрагентДляФизическихЛиц);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
Функция НайтиКонтрагента(ИНН, КПП)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьДоговорКонтрагента(СтрокаТаблицы, ВыборкаДоговоровфизическихЛиц)
	
	Договор = Неопределено;
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		Возврат Договор;
	КонецЕсли;
	
	Если ЭтоФизическоеЛицо(СтрокаТаблицы) Тогда
		Договор = НайтиДоговорФизическогоЛица(СтрокаТаблицы, ВыборкаДоговоровфизическихЛиц);
	Иначе
		Договор = НайтиДоговорЮридическогоЛица(СтрокаТаблицы);
	КонецЕсли;	
	
	Возврат Договор;
	
КонецФункции

&НаСервере
Функция НайтиДоговорЮридическогоЛица(СтрокаТаблицы)
	
	ДоговорКонтрагента = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.ВидВзаиморасчетов КАК ВидВзаиморасчетов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", СтрокаТаблицы.Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТаблицаДоговоров = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаДоговоров.Количество() = 1 Тогда
		ДоговорКонтрагента = ТаблицаДоговоров[0].ДоговорКонтрагента;
	Иначе
		Для Каждого СтрокаДоговор Из ТаблицаДоговоров Цикл
			Если СтрокаДоговор.ВидВзаиморасчетов = ВидВзаиморасчетов Тогда
				ДоговорКонтрагента = СтрокаДоговор.ДоговорКонтрагента;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДоговорКонтрагента;
	
КонецФункции

&НаСервере
Функция НайтиДоговорФизическогоЛица(СтрокаТаблицы, ВыборкаДоговоровфизическихЛиц)
	
	ДоговорКонтрагента = Неопределено;
	
	ВыборкаДоговоровфизическихЛиц.Сбросить();
	Если ВыборкаДоговоровфизическихЛиц.НайтиСледующий(СтрокаТаблицы.НомерДоговора, "НомерДоговора") Тогда
		ДоговорКонтрагента = ВыборкаДоговоровфизическихЛиц.ДоговорКонтрагента;
	КонецЕсли;
	
	Возврат ДоговорКонтрагента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДС(СтрокаТаблицы)
	
	СтавкаНДСЧислом = СтрокаТаблицы.СтавкаНДСЧислом;
	
	Если СтавкаНДСЧислом = 0 Тогда
		ВидСтавки = Перечисления.ВидыСтавокНДС.БезНДС;
	ИначеЕсли СтавкаНДСЧислом < 15 Тогда
		ВидСтавки = Перечисления.ВидыСтавокНДС.Пониженная;
	Иначе
		ВидСтавки = Перечисления.ВидыСтавокНДС.Общая;
	КонецЕсли;
	
	Возврат Перечисления.СтавкиНДС.СтавкаНДС(ВидСтавки, СтрокаТаблицы.ДатаВыезда);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоДанные(ПредварительнаяТаблица)
	
	//ПредварительнаяТаблица = Новый ТаблицаЗначений;
	
	ДеревоДанныеУровень0Элементы = ДеревоДанные.ПолучитьЭлементы();
	ДеревоДанныеУровень0Элементы.Очистить();	
	
	//сначала заполняем юридические лица
	ТаблицаКонтрагенты = ПредварительнаяТаблица.Скопировать(, "Контрагент, ИНН, КПП, ДоговорКонтрагента, СчетНаОплатуПокупателю, РеализацияТоваровУслуг, СчетФактураВыданный");
	ТаблицаКонтрагенты.Свернуть("Контрагент, ИНН, КПП, ДоговорКонтрагента, СчетНаОплатуПокупателю, РеализацияТоваровУслуг, СчетФактураВыданный");
	
	Для Каждого СтрокаТаблицаКонтрагенты Из ТаблицаКонтрагенты Цикл
		
		Если ЭтоФизическоеЛицо(СтрокаТаблицаКонтрагенты) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУровень0 = ДеревоДанныеУровень0Элементы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУровень0, СтрокаТаблицаКонтрагенты);
		
		ВыполнитьПроверкуСтроки(СтрокаУровень0);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Контрагент", СтрокаТаблицаКонтрагенты.Контрагент);
		ПараметрыОтбора.Вставить("ИНН", СтрокаТаблицаКонтрагенты.ИНН);
		ПараметрыОтбора.Вставить("КПП", СтрокаТаблицаКонтрагенты.КПП);
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", СтрокаТаблицаКонтрагенты.ДоговорКонтрагента);
		
		ТаблицаПоКонтрагенту = ПредварительнаяТаблица.Скопировать(ПараметрыОтбора);
		
		ДеревоДанныеУровень1Элементы = СтрокаУровень0.ПолучитьЭлементы();
		Для Каждого СтрокаПоКонтрагенту Из ТаблицаПоКонтрагенту Цикл
			
			СтрокаУровень1 = ДеревоДанныеУровень1Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУровень1, СтрокаПоКонтрагенту);
			
			ВыполнитьПроверкуСтроки(СтрокаУровень1);
			
		КонецЦикла;
		
	КонецЦикла;
	
	//далее заполняем физические лица с дополнительной группировкой по номеру договора
	
	ТаблицаКонтрагенты = ПредварительнаяТаблица.Скопировать(, "Контрагент, ИНН, КПП");
	ТаблицаКонтрагенты.Свернуть("Контрагент, ИНН, КПП");
	
	Для Каждого СтрокаТаблицаКонтрагенты Из ТаблицаКонтрагенты Цикл
		
		Если НЕ ЭтоФизическоеЛицо(СтрокаТаблицаКонтрагенты) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУровень0 = ДеревоДанныеУровень0Элементы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУровень0, СтрокаТаблицаКонтрагенты);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Контрагент", СтрокаТаблицаКонтрагенты.Контрагент);
		ПараметрыОтбора.Вставить("ИНН", СтрокаТаблицаКонтрагенты.ИНН);
		ПараметрыОтбора.Вставить("КПП", СтрокаТаблицаКонтрагенты.КПП);
		
		ТаблицаПоКонтрагенту = ПредварительнаяТаблица.Скопировать(ПараметрыОтбора);
		ТаблицаДоговоры = ТаблицаПоКонтрагенту.Скопировать(, "Контрагент, ИНН, КПП, НомерДоговора, ДоговорКонтрагента, СчетНаОплатуПокупателю, РеализацияТоваровУслуг, СчетФактураВыданный");
		ТаблицаДоговоры.Свернуть("Контрагент, ИНН, КПП, НомерДоговора, ДоговорКонтрагента, СчетНаОплатуПокупателю, РеализацияТоваровУслуг, СчетФактураВыданный");
		
		ДеревоДанныеУровень1Элементы = СтрокаУровень0.ПолучитьЭлементы();
		
		Для Каждого СтрокаПоДоговору Из ТаблицаДоговоры Цикл
			
			СтрокаУровень1 = ДеревоДанныеУровень1Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУровень1, СтрокаПоДоговору);
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Контрагент", СтрокаПоДоговору.Контрагент);
			ПараметрыОтбора.Вставить("ИНН", СтрокаПоДоговору.ИНН);
			ПараметрыОтбора.Вставить("КПП", СтрокаПоДоговору.КПП);
			ПараметрыОтбора.Вставить("НомерДоговора", СтрокаПоДоговору.НомерДоговора);
			
			ТаблицаПоДоговору = ТаблицаПоКонтрагенту.Скопировать(ПараметрыОтбора);
			
			ДеревоДанныеУровень2Элементы = СтрокаУровень1.ПолучитьЭлементы();
			Для Каждого СтрокаПоДоговору Из ТаблицаПоДоговору Цикл
				
				СтрокаУровень2 = ДеревоДанныеУровень2Элементы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУровень2, СтрокаПоДоговору);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуСтроки(СтрокаДанных)
	
	//Для физических лиц проверки нет, т.к. контрагент - заполняется, а договор создается автоматически
	Если ЭтоФизическоеЛицо(СтрокаДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.Контрагент)
		ИЛИ Не ЗначениеЗаполнено(СтрокаДанных.ДоговорКонтрагента) Тогда
		СтрокаДанных.ЕстьОшибки = Истина;
		СтрокаДанных.Загружать = 0;
	Иначе
		СтрокаДанных.ЕстьОшибки = Ложь;
	КонецЕсли;		
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВременныйФайл(ПолноеИмяФайла) Экспорт
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		УдалитьФайлы(ПолноеИмяФайла)
	Исключение
		ЗаписьЖурналаРегистрации("Загрузка ", УровеньЖурналаРегистрации.Предупреждение,
			,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
			|%1 по причине: %2'"), ПолноеИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ИсключитьНеЧитаемыеСимволыИзСтроки(Знач АнализируемыйТекст, ЗаменятьСимволы = Истина, СимволЗамены = " ")
	
	// Читаемые символы. 
	Латиница = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"; 
	Кирилица = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя"; 
	Греческие = "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψω"; 
	Цифры = "0123456789"; 
	СпециальныеСимволы = "~`!@#$%^&*(){}[]_-=+\|/*:;.<>?,№«» "; 
	ДвойнаяКавычка = """"; 
	ОдинарнаяКавычка = "'"; 
	АпострофОбратный = "L9;";           // КодСимвола 769. Обратный для символа на букве "Ё". 
	АвторскоеПраво = "©";             // КодСимвола 169. "Copyright" - латинская буква C в окружности - авторское право. 
	Зарезервировано = "®";           // КодСимвола 174. "Registered" - латинская буква R в окружности - товарный знак. 
	ТоварныйЗнак = "™";               // Верхний  индекс ТМ. 
	ШирокоеТире = "—";                // КодСимвола 8212. 
	ДенежныеСимволы = "¤¢€£¥";  // Денежная единица, Цент, Евро, Фунт стерлингов, Иена или юань. 
	ДробныеСимволы = "½¼¾";    // Дроби: 1/2, 1/4, 3/4. 
	СимволыСтепени = "¹²³";         // Степени: 1, 2, 3 
	ПрочиеСимволы = "°±×÷Øƒµ"+Символ(167);    // Градус, Плюс/Минус, Знак умножения, Знак деления, Диаметр, Знак функции, Микро, Параграф. 
	
	ЧитаемыеСимволы = Латиница + Кирилица + Греческие + Цифры + СпециальныеСимволы + ШирокоеТире 
	+ ДвойнаяКавычка + ОдинарнаяКавычка + АпострофОбратный + АвторскоеПраво + Зарезервировано + ТоварныйЗнак 
	+ ДенежныеСимволы + ДробныеСимволы + СимволыСтепени + ПрочиеСимволы; 
	
	// Формирование результирующей строки. 
	ИтоговаяСтрока = ""; 
	Для НомерСимвола = 1 ПО СтрДлина(АнализируемыйТекст) Цикл 
		ТекущийСимвол = Сред(АнализируемыйТекст, НомерСимвола, 1); 
		// Заменяемые символы. Системный набор значений: "Символы": 
		Если ТекущийСимвол = Символы.ВК ИЛИ ТекущийСимвол = Символы.ВТаб ИЛИ ТекущийСимвол = Символы.НПП 
			ИЛИ ТекущийСимвол = Символы.ПС ИЛИ ТекущийСимвол = Символы.ПФ ИЛИ ТекущийСимвол = Символы.Таб Тогда 
			ТекущийСимвол = СимволЗамены; 
		КонецЕсли; 
		Если КодСимвола(ТекущийСимвол) = 21 Тогда    // Параграф. 
			ТекущийСимвол = Символ(167); 
		КонецЕсли; 
		Если Найти(ЧитаемыеСимволы, ТекущийСимвол) > 0 Тогда 
			ИтоговаяСтрока = ИтоговаяСтрока + ТекущийСимвол; 
		Иначе 
			Если ЗаменятьСимволы Тогда 
				ИтоговаяСтрока = ИтоговаяСтрока + СимволЗамены; 
			Иначе 
				// Сокращение строки на символ. 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ИтоговаяСтрока; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеКолонки(Знач НаименованиеИсходное, Символ = "_") Экспорт 
	
	Результат = НаименованиеИсходное;
	
	Результат = СтрЗаменить(Результат, " ", Символ); 
	Результат = СтрЗаменить(Результат, "/", Символ); 
	Результат = СтрЗаменить(Результат, "\", Символ); 
	Результат = СтрЗаменить(Результат, ".", Символ); 
	Результат = СтрЗаменить(Результат, ", ", Символ); 
	Результат = СтрЗаменить(Результат, "+", Символ); 
	Результат = СтрЗаменить(Результат, "-", Символ); 
	Результат = СтрЗаменить(Результат, "!", Символ); 
	Результат = СтрЗаменить(Результат, "@", Символ); 
	Результат = СтрЗаменить(Результат, "#", Символ); 
	Результат = СтрЗаменить(Результат, "$", Символ); 
	Результат = СтрЗаменить(Результат, "%", Символ); 
	Результат = СтрЗаменить(Результат, "^", Символ); 
	Результат = СтрЗаменить(Результат, "&", Символ); 
	Результат = СтрЗаменить(Результат, "*", Символ); 
	Результат = СтрЗаменить(Результат, "(", Символ); 
	Результат = СтрЗаменить(Результат, ")", Символ); 
	Результат = СтрЗаменить(Результат, "№", Символ); 
	Результат = СтрЗаменить(Результат, ";", Символ); 
	Результат = СтрЗаменить(Результат, ":", Символ); 
	Результат = СтрЗаменить(Результат, "?", Символ); 
	
	Возврат Результат; 
	
КонецФункции 

&НаСервереБезКонтекста
Функция СоздатьТаблицуДанных()

	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("НомерПП", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ФИО", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Шифр", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("НомерПутевки", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ПребываниеДни", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КатегорияПалаты", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("КатегорияПутевки", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ПериодПребыванияПоПутевке", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("НомерИБ", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КомпНомер", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Оплата", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("НомерДоговора", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СуммаДоговора", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ДатаЗаезда", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КПП", Новый ОписаниеТипов("Число"));
	
	//ТаблицаДанных.Колонки[0].ТипЗначения.ПривестиЗначение(
	
	Возврат ТаблицаДанных;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоФизическоеЛицо(ПроверяемыеДанные)
	
	Если ПроверяемыеДанные.ИНН = "" И ПроверяемыеДанные.КПП = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


#КонецОбласти

#Область Образец 

&НаКлиенте
Процедура ПоказатьОбразец(Команда)
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеНаСервере();
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьОбразецЗавершение", ЭтотОбъект, ИмяФайла);
	ДвоичныеДанные.НачатьЗапись(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДвоичныеДанныеНаСервере()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектЗначение.ПолучитьМакет("ОбразецФайла");
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОбразецЗавершение(ДополнительныеПараметры) Экспорт
	
	ЗапуститьПриложение(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область Интерфейс

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено
		Или Родитель.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из Подчиненные Цикл
		
		Если Строка.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныеЗагружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоДанные.ТекущиеДанные;
	
	Если ТекущиеДанные.Загружать = 2 Тогда
		ТекущиеДанные.Загружать = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Загружать");
	УстановитьПометкиРодителей(ТекущиеДанные, "Загружать");
	
КонецПроцедуры


&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	ЭлементыДерева = ДеревоДанные.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		Элемент.Загружать = 1;
		УстановитьПометкиПодчиненных(Элемент, "Загружать");	
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсе(Команда)
	
	ЭлементыДерева = ДеревоДанные.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Элемент.Загружать = 0;
		УстановитьПометкиПодчиненных(Элемент, "Загружать");	
	КонецЦикла
	
КонецПроцедуры


#КонецОбласти

#Область Служебные

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗадатьУСловноеОформление()
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьУСловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//Красный для строк с ошибками
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Персиковый);
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина,,,,));
	
	ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДанные.ЕстьОшибки");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоДанные");
	ОформляемоеПоле.Использование = Истина;

	
	//Только просмотр для галочки загрузки
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДанные.ЕстьОшибки");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоДанныеЗагружать");
	ОформляемоеПоле.Использование = Истина;
	
	//Зеленый для строк с документами
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	     
	//НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(188,255,199));
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина,,,,));
	
	ОтборГруппа = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДанные.РеализацияТоваровУслуг");
	
	ЭлементОтбора = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДанные.ЕстьОшибки");
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоДанные");
	ОформляемоеПоле.Использование = Истина;
	
			
КонецПроцедуры // ЗаполнитьНаборПравПользователя()

&НаКлиенте
Процедура ДеревоДанныеПриИзменении(Элемент)
	
	ДеревоДанныеПриИзмененииНаСервере(Элементы.ДеревоДанные.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоДанныеПриИзмененииНаСервере(НомерСтроки)
	
	ВыполнитьПроверкуСтроки(ДеревоДанные.НайтиПоИдентификатору(НомерСтроки));
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДанных

&НаСервере
Процедура СформироватьДокументыНаСервере()
	
	Для Каждого ЭлементДерева Из ДеревоДанные.ПолучитьЭлементы() Цикл
		
		Если ЭлементДерева.Загружать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоФизическоеЛицо(ЭлементДерева) Тогда
			
			ЭлементыДереваФизическиеЛица = ЭлементДерева.ПолучитьЭлементы();
			Для Каждого ЭлементДереваФизическиеЛица Из ЭлементыДереваФизическиеЛица Цикл
				Если ЭлементДереваФизическиеЛица.Загружать = 0 Тогда
					Продолжить;
				КонецЕсли;
				СформироватьНаборДокументов(ЭлементДереваФизическиеЛица);
			КонецЦикла;
			
		Иначе
			
			СформироватьНаборДокументов(ЭлементДерева);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаборДокументов(ЭлементДерева)
	
	Если ЭтоФизическоеЛицо(ЭлементДерева) И Не ЗначениеЗаполнено(ЭлементДерева.ДоговорКонтрагента) Тогда
		НовыйДоговорКонтрагента = СоздатьДоговорКонтрагента(ЭлементДерева);
		Если НовыйДоговорКонтрагента = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЭлементДерева.ДоговорКонтрагента = НовыйДоговорКонтрагента;
		Для Каждого ЭлементДереваДоговор Из ЭлементДерева.ПолучитьЭлементы() Цикл
			ЭлементДереваДоговор.ДоговорКонтрагента = НовыйДоговорКонтрагента;
		КонецЦикла;
	КонецЕсли;
	
	ЭлементДерева.СчетНаОплатуПокупателю = СформироватьСчетНаОплатуПокупателю(ЭлементДерева);
	ЭлементДерева.РеализацияТоваровУслуг = СформироватьРеализациюТоваровУслуг(ЭлементДерева);
	ЭлементДерева.СчетФактураВыданный = СформироватьСчетФактураВыданный(ЭлементДерева);
	
	Для Каждого ПодчиненныйЭлементДерева Из ЭлементДерева.ПолучитьЭлементы() Цикл
		ПодчиненныйЭлементДерева.СчетНаОплатуПокупателю = ЭлементДерева.СчетНаОплатуПокупателю;
		ПодчиненныйЭлементДерева.РеализацияТоваровУслуг = ЭлементДерева.РеализацияТоваровУслуг;
		ПодчиненныйЭлементДерева.СчетФактураВыданный = ЭлементДерева.СчетФактураВыданный;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСчетНаОплатуПокупателю(ЭлементДерева)
	
	Если ЗначениеЗаполнено(ЭлементДерева.СчетНаОплатуПокупателю) Тогда 
		СчетНаОплатуПокупателюОбъект = ЭлементДерева.СчетНаОплатуПокупателю.ПолучитьОбъект();
	Иначе
		СчетНаОплатуПокупателюОбъект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
	КонецЕсли;
	
	СтрокиДерева = ЭлементДерева.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() = 0 Тогда
		Сообщить("Не достаточно данных");
		Возврат Неопределено;	
	Иначе
		СтрокаДанные = СтрокиДерева[0];
	КонецЕсли;
	
	ДатаДокумента = НачалоДня(СтрокаДанные.ДатаВыезда);
	Если КонецМесяца(СтрокаДанные.ДатаЗаезда) <= СтрокаДанные.ДатаВыезда Тогда
		ДатаДокумента = НачалоДня(КонецМесяца(СтрокаДанные.ДатаЗаезда));
	КонецЕслИ;
	
	СчетНаОплатуПокупателюОбъект.Дата = ДатаДокумента;
	СчетНаОплатуПокупателюОбъект.Организация = Подразделение.ГоловнаяОрганизация;
	СчетНаОплатуПокупателюОбъект.ПодразделениеОрганизации = Подразделение;
	СчетНаОплатуПокупателюОбъект.УстановитьНовыйНомер();
	
	СчетНаОплатуПокупателюОбъект.Контрагент = ЭлементДерева.Контрагент;
	СчетНаОплатуПокупателюОбъект.ДоговорКонтрагента = ЭлементДерева.ДоговорКонтрагента;
	
	СчетНаОплатуПокупателюОбъект.СтруктурнаяЕдиница = БанковскийСчет;
	
	СчетНаОплатуПокупателюОбъект.СуммаВключаетНДС = Истина;
	СчетНаОплатуПокупателюОбъект.ДокументБезНДС = ЛОжь;
	СчетНаОплатуПокупателюОбъект.КратностьВзаиморасчетов = 1;
	
	СчетНаОплатуПокупателюОбъект.Товары.Очистить();
	
	Для Каждого СтрокаДанные Из СтрокиДерева Цикл
		
		Если СтрокаДанные.Загружать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = СчетНаОплатуПокупателюОбъект.Товары.Добавить();
		НоваяСтрокаТовары.Номенклатура = Номенклатура;
		
		МассивСодержание = Новый Массив;
		МассивСодержание.Добавить(СтрокаДанные.КатегорияПутевки);
		МассивСодержание.Добавить(СтрокаДанные.КатегорияПалаты);
		МассивСодержание.Добавить(СтрокаДанные.НомерПутевки);
		МассивСодержание.Добавить(Формат(СтрокаДанные.ДатаЗаезда, "ДФ=dd.MM.yyyy") + " - " + Формат(СтрокаДанные.ДатаВыезда, "ДФ=dd.MM.yyyy"));
		МассивСодержание.Добавить(СтрокаДанные.ФИО);
		
		НоваяСтрокаТовары.Содержание = СтрСоединить(МассивСодержание, ", ");
		
		НоваяСтрокаТовары.Количество = 1;
		
		НоваяСтрокаТовары.Цена = СтрокаДанные.Сумма;
		НоваяСтрокаТовары.Сумма = СтрокаДанные.Сумма;
		НоваяСтрокаТовары.СтавкаНДС = СтрокаДанные.СтавкаНДС;
		НоваяСтрокаТовары.СуммаНДС = СтрокаДанные.СуммаНДС;
		
	КонецЦикла;
	
	СчетНаОплатуПокупателюОбъект.Комментарий = "БН путёвки";
	Если ЭтоФизическоеЛицо(ЭлементДерева) Тогда
		СчетНаОплатуПокупателюОбъект.Комментарий = СчетНаОплатуПокупателюОбъект.Комментарий + " договор № " + ЭлементДерева.НомерДоговора;
	КонецЕсли;
	СчетНаОплатуПокупателюОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ПроводитьДокументы Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли СчетНаОплатуПокупателюОбъект.Проведен Тогда 
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	СчетНаОплатуПокупателюОбъект.Записать(РежимЗаписи);
	
	Возврат СчетНаОплатуПокупателюОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СформироватьРеализациюТоваровУслуг(ЭлементДерева)
	
	ДокументОснование = ЭлементДерева.СчетНаОплатуПокупателю;
	
	Если ЗначениеЗаполнено(ЭлементДерева.РеализацияТоваровУслуг) Тогда 
		РеализацияТоваровУслугОбъект = ЭлементДерева.РеализацияТоваровУслуг.ПолучитьОбъект();
	Иначе
		РеализацияТоваровУслугОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	КонецЕсли;
		
	РеализацияТоваровУслугОбъект.Заполнить(ДокументОснование);
	ЗаполнениеДокументов.Заполнить(РеализацияТоваровУслугОбъект, ДокументОснование, Истина);
	
	РеализацияТоваровУслугОбъект.Дата = КонецДня(ДокументОснование.Дата);
	
	Если ПроводитьДокументы Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли РеализацияТоваровУслугОбъект.Проведен Тогда 
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	РеализацияТоваровУслугОбъект.Записать(РежимЗаписи);
	
	Возврат РеализацияТоваровУслугОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СформироватьСчетФактураВыданный(ЭлементДерева)
	
	ДокументОснование = ЭлементДерева.РеализацияТоваровУслуг;
	
	Если ЗначениеЗаполнено(ЭлементДерева.СчетФактураВыданный) Тогда 
		СчетФактураВыданныйОбъект = ЭлементДерева.СчетФактураВыданный.ПолучитьОбъект();
	Иначе
		СчетФактураВыданныйОбъект = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактураВыданныйОбъект.Заполнить(ДокументОснование);
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(СчетФактураВыданныйОбъект, ДокументОснование, Ложь);
	
	СчетФактураВыданныйОбъект.Дата = КонецДня(ДокументОснование.Дата);
	
	Если ПроводитьДокументы Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли СчетФактураВыданныйОбъект.Проведен Тогда 
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	СчетФактураВыданныйОбъект.Записать(РежимЗаписи);
	
	Возврат СчетФактураВыданныйОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьДоговорКонтрагента(ЭлементДерева)
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Сообщить("Не указано подразделение для заполнения");
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиДерева = ЭлементДерева.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() = 0 Тогда
		Сообщить("Не достаточно данных");
		Возврат Неопределено;	
	Иначе
		СтрокаДанные = СтрокиДерева[0];
	КонецЕсли;
	
	НовыйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		
	НовыйДоговорОбъект.Организация = Подразделение.ГоловнаяОрганизация;
	НовыйДоговорОбъект.Наименование = СтрокаДанные.ФИО;
	НовыйДоговорОбъект.Владелец = СтрокаДанные.Контрагент;
	НовыйДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	НовыйДоговорОбъект.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс(НовыйДоговорОбъект.Организация, СтрокаДанные.ДатаЗаезда);
	НовыйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	НовыйДоговорОбъект.Номер = СтрокаДанные.НомерДоговора;
	НовыйДоговорОбъект.Дата = СтрокаДанные.ДатаЗаезда;
	НовыйДоговорОбъект.СрокДействия = СтрокаДанные.ДатаВыезда;
	МассивФио = Новый Массив;
	Для Каждого СтрокаДерево Из СтрокиДерева Цикл
		МассивФио.Добавить(СтрокаДерево.ФИО);
	КонецЦикла;
	НаборФИО = СтрСоединить(МассивФио, ", ");
	НовыйДоговорОбъект.Наименование = НовыйДоговорОбъект.Номер + " от " + Формат(НовыйДоговорОбъект.Дата, "ДФ=dd.MM.yyyy") + " / " + НаборФИО;
	НовыйДоговорОбъект.Комментарий = НаборФИО;
	НовыйДоговорОбъект.Записать();
	
	Возврат НовыйДоговорОбъект.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	СформироватьДокументыНаСервере();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

#КонецОбласти

