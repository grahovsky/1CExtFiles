&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОбъектыНазначения") Тогда
		СсылкаНаОбъект = Параметры.ОбъектыНазначения[0];
		Элементы.СсылкаНаОбъект.Видимость = Ложь;
		Отладка = Ложь;
		Элементы.Отладка.Видимость = Ложь;
		АвтоматическоеСохранениеДанныхВНастройках = АвтоматическоеСохранениеДанныхФормыВНастройках.НеИспользовать;
	Иначе
		Отладка = Истина;
		АвтоматическоеСохранениеДанныхВНастройках = АвтоматическоеСохранениеДанныхФормыВНастройках.Использовать;
	КонецЕсли;
	
	ВнешняяФорма = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Проверка данных сотрудника"); 
	АдресВХранилище = ПоместитьВоВременноеХранилище(ВнешняяФорма.ХранилищеОбработки.Получить()); 
	
	ИмяФормаОбработки = ВнешниеОбработки.Подключить(АдресВХранилище); 
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФормаОбработки);
	ИспользуемоеИмяФайла = ВнешняяОбработка.ИспользуемоеИмяФайла;
	
	//ФормаОбработки.ОбъектыНазначения.Добавить(Параметры.ОбъектыНазначения[0]);
	//ФормаОбработки.ВыполнитьПроверкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкиВSD(Команда)
	
	ГруппыУчастниковАдрес = "";
	ПодготовитьЗаявкиИПисьма();
	
	Если ГруппыУчастниковАдрес = "" Тогда
		Сообщить("Что-то пошло не так..");
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма);
	ТекстВовроса = "Будут автоматически сформированы заявки в отдел ИТ и ИТО. Со следующим текстом:" + Символы.ПС + Символы.ПС +
	ПолучитьТекстЗаявки() + Символы.ПС + Символы.ПС +
	"Продолжить?";	
	ПоказатьВопрос(Оповещение, ТекстВовроса, Режим, 0);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗаявки()
	
	ГруппыУчастников = ПолучитьИзВременногоХранилища(ГруппыУчастниковАдрес);
	Возврат ГруппыУчастников[0].Значение.ИнтернетПочтовоеСообщение.Тексты[0].Текст;
	
КонецФункции


#Область Работа_c_SD
//через API

&НаСервере
Процедура ВыполнитьHTTPЗапросНаСервере(СтруктураЗаявки)
	
	СтрокаJSON = ПолучитьСтрокуJSON(СтруктураЗаявки);
	
	НомерЗаявки = "";
	Операция = "ADD_REQUEST";
	
	//для отладки
	Если Отладка Тогда
		Операция = "EDIT_REQUEST";
		НомерЗаявки = "/96620";
	КонецЕсли;
	
	ТехническийКлюч = "&TECHNICIAN_KEY=47E804F8-C853-4E79-8554-EAB9A62A2CBD";
	
	ТекстHTTPЗапроса = "sdpapi/request" + НомерЗаявки + "?OPERATION_NAME=" + Операция + ТехническийКлюч + "&INPUT_DATA={}&format=json";
	ТекстHTTPЗапроса = СтрЗаменить(ТекстHTTPЗапроса, "INPUT_DATA={}", "INPUT_DATA=" + СтрокаJSON);
	
	HTTPЗапрос = Новый HTTPЗапрос(ТекстHTTPЗапроса);	
	HTTPСоединение = Новый HTTPСоединение("sd.sogaz-clinic.ru:8080");
	
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	
	РазобратьJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуJSON(СтруктураЗаявки)
	
	ДанныеJSON = Новый ЗаписьJSON;
	ДанныеJSON.УстановитьСтроку();
	ЗаписатьJSON(ДанныеJSON, СтруктураЗаявки);
	СтрокаJSON = ДанныеJSON.Закрыть();
	
	Возврат СтрокаJSON;

КонецФункции

&НаСервере
Функция ПолучитьСтруктуруЗаявки()
	
	СтруктураЗаявки = Новый Структура;
	СтруктураЗаявки.Вставить("operation", Новый Структура);
	
	СтруктураОпераця = СтруктураЗаявки.operation;
	СтруктураОпераця.Вставить("details", Новый Структура);
	
	СтруктураДетали = СтруктураОпераця.details;
	СтруктураДетали.Вставить("requester", ""); //АвторЗаявки
	СтруктураДетали.Вставить("createdby", ""); //КемСоздан
	СтруктураДетали.Вставить("subject", ""); //Тема
	СтруктураДетали.Вставить("description", ""); //Текст
	СтруктураДетали.Вставить("callbackURL", ""); 
	СтруктураДетали.Вставить("requesttemplate", ""); //Подкатегория?
	СтруктураДетали.Вставить("priority", ""); //Приоритет
	СтруктураДетали.Вставить("site", ""); //
	СтруктураДетали.Вставить("group", ""); //Группа
	СтруктураДетали.Вставить("category", ""); //Категория
	СтруктураДетали.Вставить("subcategory", ""); //Подкатегория
	СтруктураДетали.Вставить("item", ""); //Позиция
	СтруктураДетали.Вставить("technician", ""); //Специалист
	СтруктураДетали.Вставить("level", ""); //уровень
	СтруктураДетали.Вставить("status", ""); //АвторЗаявки
	СтруктураДетали.Вставить("service", ""); //Статус
	
	Возврат СтруктураЗаявки;

КонецФункции

&НаСервере
Процедура РазобратьJSON(СтрокаJSON)
	
	ДанныеJSONДерево.ПолучитьЭлементы().Очистить();
	ЧтениеJSON = Новый ЧтениеJSON;
	// Либо открыть файл, из которого будет выполняться чтение, // либо установить строку, из которой будет выполняться чтение.
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	ТекущаяСтрока = Неопределено;
	Пока ЧтениеJSON.Прочитать()   Цикл
		
		TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если TипJSON = ТипЗначенияJSON.НачалоОбъекта Тогда
			Если ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока = ТекущаяСтрока.ПолучитьЭлементы().Добавить();
			Иначе
				ТекущаяСтрока = ДанныеJSONДерево.ПолучитьЭлементы().Добавить();
			КонецЕсли;
		КонецЕсли;
		
		Если TипJSON = ТипЗначенияJSON.Число ИЛИ TипJSON = ТипЗначенияJSON.Строка ИЛИ TипJSON = ТипЗначенияJSON.Булево  ИЛИ TипJSON = ТипЗначенияJSON.Null  Тогда
			// Обработать значение
			Значение = ЧтениеJSON.ТекущееЗначение;
			ТекущаяСтрока.Строка = ТекущаяСтрока.Строка + ?(ТекущаяСтрока.Строка <> "",", ","") + Значение;
		ИначеЕсли TипJSON = ТипЗначенияJSON.Комментарий Тогда
			// Обработать комментарий
			Комментарий =  ЧтениеJSON.ТекущееЗначение;
		ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			// Обработать имя свойства
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			ТекущаяСтрока.Строка = ТекущаяСтрока.Строка + ?(ТекущаяСтрока.Строка <> "",", ","") + ИмяСвойства;
		ИначеЕсли TипJSON = ТипЗначенияJSON.НачалоМассива ИЛИ TипJSON = ТипЗначенияJSON.КонецМассива ИЛИ TипJSON = ТипЗначенияJSON.НачалоОбъекта ИЛИ TипJSON = ТипЗначенияJSON.КонецОбъекта ИЛИ TипJSON = ТипЗначенияJSON.Ничего Тогда
			// Обработать начало/коней массива/объекта или отсутствие данных, // ТекущееЗначение читать не нужно.
		КонецЕсли;
		
		Если TипJSON = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеJSON.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область Работа_c_УУ
//через http

&НаСервере
Функция ПолучитьГУИД_УУ()
	
	ИдентификаторЗапроса = "ПолучитьГУИДФизическогоЛица";
	
	СтруктураПараметры = ПолучитьПараметрыЗапросаКУУ();
	
	ДанныеJSON = Новый ЗаписьJSON;
	ДанныеJSON.УстановитьСтроку();
	ЗаписатьJSON(ДанныеJSON, СтруктураПараметры);
	СтрокаJSON = ДанныеJSON.Закрыть();
	
	//Для отладки
	Если СтрНайти(СтруктураПараметры.ИмяБазы, "dev") = 0 Тогда
		База = "upr_acc";
		Сервер = "s07-0600-1c01";
	Иначе
		База = "upr_acc_dev";
		Сервер = "s07-0600-1c-dev";	
	КонецЕсли;
	
	
	ТекстHTTPЗапроса = "/" + База + "/hs/request/" + ИдентификаторЗапроса + "?params=" + СтрокаJSON;
	HTTPЗапрос = Новый HTTPЗапрос(ТекстHTTPЗапроса);	
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,,Истина);
	
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	ГУИД1С = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат ГУИД1С;
		
КонецФункции

Функция ПолучитьПараметрыЗапросаКУУ()
	
	ФизическоеЛицоСсылка = СсылкаНаОбъект.ФизическоеЛицо;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Код", ФизическоеЛицоСсылка.Код);
	СтруктураПараметров.Вставить("Наименование", ФизическоеЛицоСсылка.Наименование);
	СтруктураПараметров.Вставить("ДатаРождения", ФизическоеЛицоСсылка.ДатаРождения);
	ПолИндекс = Перечисления.ПолФизическогоЛица.Индекс(ФизическоеЛицоСсылка.Пол);
	СтруктураПараметров.Вставить("ПолИндекс", ПолИндекс);
	
	ЗначениеВСтрокуВнутр = ЗначениеВСтрокуВнутр(ФизическоеЛицоСсылка);
	// преобразование для корректной передачи json, на стороне сервера меняем обратно
	ЗначениеВСтрокуВнутр = СтрЗаменить(ЗначениеВСтрокуВнутр, "#", "@@@");
	
	СтруктураПараметров.Вставить("ИД", ЗначениеВСтрокуВнутр);
	СтруктураПараметров.Вставить("ВерсияДанных", ФизическоеЛицоСсылка.ВерсияДанных);
	СтруктураПараметров.Вставить("ИмяБазы", НРег(НСтр(СтрокаСоединенияИнформационнойБазы(),"Ref")));
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти


&НаСервере
Процедура ПодготовитьЗаявкиИПисьма()
	
	//Получаем необходимую информацию для формирования заявок и писем
	СписокКонтактнойИнформации = ПолучитьКонтактнуюИнформацию();
	
	СписокНеобходимыхДанных = "ГоловнаяОрганизация,Организация,ТабельныйНомер,Должность,ВидЗанятости,ОформленПоТрудовомуДоговору,ДатаПриема,ДатаЗавершенияРаботы,Подразделение,ФИО";
	КадоровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, СсылкаНаОбъект, СписокНеобходимыхДанных);
	Если КадоровыеДанныеСотрудников.Количество() = 0 Тогда
		КадровыеДанные = Неопределено;
	Иначе 
		КадровыеДанные = КадоровыеДанныеСотрудников[0];
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(СсылкаНаОбъект);
	Попытка
		РезультатКомпоновкиТ5 = РезультатКомпоновкиТ5(МассивСотрудников);
		Если РезультатКомпоновкиТ5.ДанныеОтчета.Строки.Количество() > 0
			И РезультатКомпоновкиТ5.ДанныеОтчета.Строки[0].Строки.Количество() > 0 Тогда
			ДанныеТ5 = РезультатКомпоновкиТ5.ДанныеОтчета.Строки[0].Строки[0];
		КонецЕсли;
	Исключение
	КонецПопытки;
	Если ДанныеТ5 = Неопределено Тогда
		ДанныеОПереводе = Неопределено;
	Иначе
		ДанныеОПереводе = ДанныеТ5;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("СписокКонтактнойИнформации, КадровыеДанные, ДанныеОПереводе", СписокКонтактнойИнформации, КадровыеДанные, ДанныеОПереводе);
	
	//Сюда все проверки в т.ч. и для отправки
	Если Не ВыполнитьПроверку(СтруктураДанных) Тогда
		Возврат;
	КонецЕсли;
	
	//Определим группы участников заявки/рассылки
	ГруппыУчастников = ПолучитьГруппыУчастников(СтруктураДанных);
	ПроверитьСоставГрупп(ГруппыУчастников, СтруктураДанных);
	
	ГруппыУчастниковАдрес = ПоместитьВоВременноеХранилище(ГруппыУчастников, УникальныйИдентификатор);
	
КонецПроцедуры // ПечатьДокумента()

&НаСервере
Функция РезультатКомпоновкиТ5(МассивСотрудников)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КадровыйПеревод.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КадровыйПеревод КАК КадровыйПеревод
	|ГДЕ
	|	КадровыйПеревод.Сотрудник В(&МассивСотрудников)
	|	И КадровыйПеревод.Проведен = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	КадровыйПеревод.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивОбъектов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// + Граховский К.Н. 2018.12.20
	// используем стандартный вывод кадровой ПФ для ЗУП, соответственно стандартный макет
	// процедура первоисточник ЗарплатаКадрыОтчетыРасширенный.ВывестиВКоллекциюПечатнуюФорму.(ИмяОтчета, МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, ВнешниеНаборыДанных = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	// переопределяем в модуле обработки, т.к будет инъекция кода доработок
	// - Граховский К.Н. 2018.12.20
	
	// + Граховский К.Н. 2018.11.21
	//подбираем параметры для вывода
	ИмяОтчета = "Отчет.ПечатнаяФормаТ5";
	ВнешниеНаборыДанных = Неопределено;
	ДополнительныеПараметры = Неопределено;
	КлючВарианта = "Т5";
	// - Граховский К.Н. 2018.11.21
	
	ОбъектОтчета = ОбщегоНазначения.ОбъектПоПолномуИмени(ИмяОтчета);
	
	НастройкиОтчетаКД = Неопределено;
	ПользовательскиеНастройкиКД = Неопределено;
	
	ЗарплатаКадрыОтчеты.ИнициализироватьНастройкиОтчета(ОбъектОтчета, "", КлючВарианта, НастройкиОтчетаКД, ПользовательскиеНастройкиКД);
	
	Если НастройкиОтчетаКД = Неопределено Тогда
		НастройкиОтчетаКД = ОбъектОтчета.СхемаКомпоновкиДанных.ВариантыНастроек[КлючВарианта].Настройки;
	КонецЕсли;
	
	ОбъектОтчета.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчетаКД);
	Если ТипЗнч(ПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ОбъектОтчета.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиКД);
	КонецЕсли;
	
	ЗарплатаКадрыОтчеты.УстановитьПараметрОтбора(ОбъектОтчета, МассивОбъектов);
	
	РезультатКомпоновки = ЗарплатаКадрыОтчеты.РезультатКомпоновкиМакетаПечатнойФормы(ОбъектОтчета, , , ВнешниеНаборыДанных, ДополнительныеПараметры);
	
	Возврат РезультатКомпоновки; 

КонецФункции

&НаСервере
Процедура ПроверитьСоставГрупп(ГруппыУчастников, СтруктураДанных)
	
	
	ДоступВ1С = Нрег(СтруктураДанных.СписокКонтактнойИнформации.Получить("Доступ к 1С Документооборот")) = "да"
		ИЛИ Нрег(СтруктураДанных.СписокКонтактнойИнформации.Получить("Доступ к 1С УУ")) = "да"
		ИЛИ Нрег(СтруктураДанных.СписокКонтактнойИнформации.Получить("Доступ к 1С Бухгалтерия")) = "да"
		ИЛИ Нрег(СтруктураДанных.СписокКонтактнойИнформации.Получить("Доступ к 1С ЗУП")) = "да";

	ДоступВМедиалог = Нрег(СтруктураДанных.СписокКонтактнойИнформации.Получить("Доступ к Медиалогу")) = "да";
	
	//Удалить ненужные группы 1С и Медиалог в случае, если прав нет
	МассивУдаляемых = Новый Массив;
	Для Каждого ГруппаУчастников Из ГруппыУчастников Цикл
		
		Если ГруппаУчастников.Значение.ИмяГруппы = "Основная" И Не ДоступВ1С Тогда
			МассивУдаляемых.Добавить(ГруппаУчастников);
		КонецЕсли;
		
		Если ГруппаУчастников.Значение.ИмяГруппы = "Медиалог" И Не ДоступВМедиалог Тогда
			МассивУдаляемых.Добавить(ГруппаУчастников);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяГруппа Из МассивУдаляемых Цикл
		ГруппыУчастников.Удалить(УдаляемаяГруппа);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
    СоздатьЗаявки();
	ОтправитьПисьма();
	
	Закрыть();

КонецПроцедуры

&НаСервере
Функция ВыполнитьПроверку(СтруктураДанных)
	
	Если СтруктураДанных.КадровыеДанные = Неопределено Тогда
		Сообщить("Нет данных о сотруднике");
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидЗаявки = "Увольнение" И СтруктураДанных.КадровыеДанные.ДатаЗавершенияРаботы = '00010101' Тогда
		Сообщить("Приказ на увольнение для сотрудника не оформлен!");
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидЗаявки = "Перевод" И СтруктураДанных.ДанныеОПереводе = Неопределено Тогда
		Сообщить("Не найдены данные о переводе!");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьТекстТемы(СтруктураДанных, ИмяГруппы = "")
	
	Если ВидЗаявки = "Прием" Тогда
		ДатаСобытия = СтруктураДанных.КадровыеДанные.ДатаПриема;			
	ИначеЕсли ВидЗаявки = "Перевод" Тогда
		ДатаСобытия = СтруктураДанных.ДанныеОПереводе.РаботаДатаНачалаПеревода;	
	ИначеЕсли ВидЗаявки = "Увольнение" Тогда
		ДатаСобытия = СтруктураДанных.КадровыеДанные.ДатаЗавершенияРаботы;
	КонецЕсли;

	Тема = Формат(ДатаСобытия, "ДЛФ=Д") +", "+ Строка(СтруктураДанных.КадровыеДанные.Сотрудник) + ". " + ВидЗаявки + " сотрудника";
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		Тема = ИмяГруппы + ". " + Тема;
	КонецЕсли;
	
	Если Отладка Тогда
		Тема = "Тест. " + Тема;
	КонецЕсли;
	
	Возврат Тема;
	
КонецФункции

&НаСервере
Функция СформироватьТекстСообщения(ИмяГруппы, СтруктураДанных)
	
	КадровыеДанные = СтруктураДанных.КадровыеДанные;
	СписокКонтактнойИнформации = СтруктураДанных.СписокКонтактнойИнформации;
	ДанныеОПереводе = СтруктураДанных.ДанныеОПереводе;
	
	ТекстСообщения = "";
	
	Если ВидЗаявки = "Прием" Тогда
		
		Если ИмяГруппы = "Основная" Или ИмяГруппы = "Техподдержка" Тогда
			
			ТекстСообщения = "Требуется добавить нового сотрудника" + Символы.ПС +
			"Юридическое лицо: " + КадровыеДанные.Организация + Символы.ПС + 
			"ФИО сотрудника на русском: " + КадровыеДанные.ФИО + Символы.ПС + 
			"ФИ сотрудника на английском: " + СписокКонтактнойИнформации["ФИО на английском"] + Символы.ПС + 
			"Табельный номер: " + КадровыеДанные.ТабельныйНомер + Символы.ПС + 
			"Должность: " + КадровыеДанные.Должность + Символы.ПС + 
			"Подразделение: " + КадровыеДанные.Подразделение + Символы.ПС + 
			"Руководитель: " + СписокКонтактнойИнформации["Руководитель"] + Символы.ПС + 
			"Электронный адрес: " + СписокКонтактнойИнформации["e-mail (корпоративный)"] + Символы.ПС + 
			"Местный телефон: " + СписокКонтактнойИнформации["Рабочий телефон"] + Символы.ПС + 
			"Мобильный телефон: " + СписокКонтактнойИнформации["Мобильный телефон"] + Символы.ПС + 
			"Интернет: " + СписокКонтактнойИнформации["Интернет"] + Символы.ПС + 
			"Междугородняя связь: " + СписокКонтактнойИнформации["Междугородняя связь"] + Символы.ПС + 
			"Международная связь: " + СписокКонтактнойИнформации["Международная связь"] + Символы.ПС + 
			"Права доступа в 1с БП: " + СписокКонтактнойИнформации["Доступ к 1С Бухгалтерия"] + Символы.ПС + 
			"Права доступа в 1с ЗУП: " + СписокКонтактнойИнформации["Доступ к 1С ЗУП"] + Символы.ПС + 
			"Права доступа в 1с УУ: " + СписокКонтактнойИнформации["Доступ к 1С УУ"] + Символы.ПС + 
			"Права доступа в 1с Документооборот: " + СписокКонтактнойИнформации["Доступ к 1С Документооборот"] + Символы.ПС +
			"Права доступа на Консультант Плюс: " + СписокКонтактнойИнформации["Доступ к Консультант Плюс"] + Символы.ПС + 
			"Права доступа на Медиалог: " + СписокКонтактнойИнформации["Доступ к Медиалогу"] + Символы.ПС + 
			"Права доступа на ServiceDesk: " + СписокКонтактнойИнформации["Доступ к ServiceDesk"] + Символы.ПС + 
			"Дата выхода на работу: " + Формат(КадровыеДанные.ДатаПриема, "ДЛФ=ДД") + Символы.ПС +
			"ГУИД 1С УУ: " + СписокКонтактнойИнформации["ГУИД1С"] + Символы.ПС;
			
		ИначеЕсли ИмяГруппы = "Медиалог" Тогда
			
			ТекстСообщения = "Требуется добавить нового сотрудника" + Символы.ПС + Символы.ПС +
			"Права доступа на Медиалог: "+ СписокКонтактнойИнформации["Доступ к Медиалогу"] + Символы.ПС + Символы.ПС +
			"Дата выхода на работу: " + Формат(КадровыеДанные.ДатаПриема, "ДЛФ=ДД") + Символы.ПС+ 
			"Юридическое лицо: " + КадровыеДанные.Организация + Символы.ПС + 
			"ФИО сотрудника на русском: " + КадровыеДанные.ФИО + Символы.ПС + 
			"ФИ сотрудника на английском: " + СписокКонтактнойИнформации["ФИО на английском"] + Символы.ПС + 
			"Должность: " + КадровыеДанные.Должность + Символы.ПС + 
			"Подразделение: " + КадровыеДанные.Подразделение + Символы.ПС + 
			"Руководитель: " + СписокКонтактнойИнформации["Руководитель"] + Символы.ПС + 
			"Местный телефон: " + СписокКонтактнойИнформации["Рабочий телефон"] + Символы.ПС + 
			"Мобильный телефон: " + СписокКонтактнойИнформации["Мобильный телефон"] + Символы.ПС;
			
		ИначеЕсли ИмяГруппы = "ИТО" Тогда
			
			ТекстСообщения = "Требуется добавить нового сотрудника" + Символы.ПС +
			"Юридическое лицо: " + КадровыеДанные.Организация + Символы.ПС + 
			"ФИО сотрудника на русском: " + КадровыеДанные.ФИО + Символы.ПС + 
			"Табельный номер: " + КадровыеДанные.ТабельныйНомер + Символы.ПС + 
			"Должность: " + КадровыеДанные.Должность + Символы.ПС + 
			"Подразделение: " + КадровыеДанные.Подразделение + Символы.ПС + 
			"Руководитель: " + СписокКонтактнойИнформации["Руководитель"] + Символы.ПС + 
			"Мобильный телефон: " + СписокКонтактнойИнформации["Мобильный телефон"] + Символы.ПС + 
			"Дата выхода на работу: " + Формат(КадровыеДанные.ДатаПриема, "ДЛФ=ДД") + Символы.ПС;
			
		КонецЕсли;
		
	ИначеЕсли ВидЗаявки = "Перевод" Тогда
		
		Если ИмяГруппы = "Основная" Или ИмяГруппы = "Техподдержка" Тогда
			
			ТекстСообщения = "Заявка на перевод сотрудника:" + Символы.ПС +
			"ДатаПеревода: "+Формат(ДанныеОПереводе.РаботаДатаНачалаПеревода,  "ДЛФ=ДД") + Символы.ПС +
			"Из подразделения: " + ДанныеОПереводе.РаботаПодразделениеПрежнееНаПечать + Символы.ПС +
			"В Подразделение: " + ДанныеОПереводе.РаботаПодразделениеНаПечать + Символы.ПС +
			"Юридическое лицо: " + СокрЛП(ДанныеОПереводе.СсылкаНаОбъектОрганизацияНаименованиеСокращенное) + Символы.ПС + 
			"ФИО сотрудника на русском: " + ДанныеОПереводе.РаботаСотрудник + Символы.ПС + 
			"Табельный номер: " + ДанныеОПереводе.РаботаСотрудникТабельныйНомерНаПечать + Символы.ПС + 
			"С должности: " + ДанныеОПереводе.РаботаДолжностьПрежняя + Символы.ПС + 
			"На должность: " + ДанныеОПереводе.РаботаДолжность + Символы.ПС + 
			"Права доступа в 1с БП: " + СписокКонтактнойИнформации["Доступ к 1С Бухгалтерия"] + Символы.ПС + 
			"Права доступа в 1с ЗУП: " + СписокКонтактнойИнформации["Доступ к 1С ЗУП"] + Символы.ПС + 
			"Права доступа в 1с УУ: " + СписокКонтактнойИнформации["Доступ к 1С УУ"] + Символы.ПС + 
			"Права доступа в 1с Документооборот: " + СписокКонтактнойИнформации["Доступ к 1С Документооборот"] + Символы.ПС +
			"Права доступа на Консультант Плюс: " + СписокКонтактнойИнформации["Доступ к Консультант Плюс"] + Символы.ПС + 
			"Права доступа на Медиалог: " + СписокКонтактнойИнформации["Доступ к Медиалогу"] + Символы.ПС + 
			"Права доступа на ServiceDesk: " + СписокКонтактнойИнформации["Доступ к ServiceDesk"]; 
			
		ИначеЕсли ИмяГруппы = "Медиалог" Тогда
			
			ТекстСообщения = "Заявка на перевод сотрудника:" + Символы.ПС +
			"ДатаПеревода: "+Формат(ДанныеОПереводе.РаботаДатаНачалаПеревода,  "ДЛФ=ДД") + Символы.ПС +
			"Из подразделения: " + ДанныеОПереводе.РаботаПодразделениеПрежнееНаПечать + Символы.ПС +
			"В Подразделение: " + ДанныеОПереводе.РаботаПодразделениеНаПечать + Символы.ПС +
			"Юридическое лицо: " + СокрЛП(ДанныеОПереводе.СсылкаНаОбъектОрганизацияНаименованиеСокращенное) + Символы.ПС + 
			"ФИО сотрудника на русском: " + ДанныеОПереводе.РаботаСотрудник + Символы.ПС + 
			"Табельный номер: " + ДанныеОПереводе.РаботаСотрудникТабельныйНомерНаПечать + Символы.ПС + 
			"С должности: " + ДанныеОПереводе.РаботаДолжностьПрежняя + Символы.ПС + 
			"На должность: " + ДанныеОПереводе.РаботаДолжность + Символы.ПС + 
			"Права доступа на Медиалог: " + СписокКонтактнойИнформации["Доступ к Медиалогу"];
			
		ИначеЕсли ИмяГруппы = "ИТО" Тогда
			
			ТекстСообщения = "Заявка на перевод сотрудника:" + Символы.ПС +
			"ДатаПеревода: "+Формат(ДанныеОПереводе.РаботаДатаНачалаПеревода,  "ДЛФ=ДД") + Символы.ПС +
			"Из подразделения: " + ДанныеОПереводе.РаботаПодразделениеПрежнееНаПечать + Символы.ПС +
			"В Подразделение: " + ДанныеОПереводе.РаботаПодразделениеНаПечать + Символы.ПС +
			"Юридическое лицо: " + СокрЛП(ДанныеОПереводе.СсылкаНаОбъектОрганизацияНаименованиеСокращенное) + Символы.ПС + 
			"ФИО сотрудника на русском: " + ДанныеОПереводе.РаботаСотрудник + Символы.ПС + 
			"Табельный номер: " + ДанныеОПереводе.РаботаСотрудникТабельныйНомерНаПечать + Символы.ПС + 
			"С должности: " + ДанныеОПереводе.РаботаДолжностьПрежняя + Символы.ПС + 
			"На должность: " + ДанныеОПереводе.РаботаДолжность; 
			
		КонецЕсли;	
		
	ИначеЕсли ВидЗаявки = "Увольнение" Тогда
		
		ТекстСообщения = "Требуется заблокировать сотрудника по причине увольнения:" + Символы.ПС +
		"Юридическое лицо: " + КадровыеДанные.Организация + Символы.ПС + 
		"ФИО сотрудника на русском: " + КадровыеДанные.ФИО + Символы.ПС + 
		"Табельный номер: " + КадровыеДанные.ТабельныйНомер + Символы.ПС + 
		"Должность: " + КадровыеДанные.Должность + Символы.ПС + 
		"Подразделение: " + КадровыеДанные.Подразделение + Символы.ПС + 
		"Дата увольнения: " + Формат(КадровыеДанные.ДатаЗавершенияРаботы, "ДЛФ=ДД");
		
	КонецЕсли;
	 
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаСервере
Функция ПолучитьГруппыУчастников(СтруктураДанных)
	
	ГруппыУчастников = Новый СписокЗначений;
	
	Если ВидЗаявки = "Прием" Тогда
		
		Группа = Новый Структура();
		Группа.Вставить("ИмяГруппы", "Основная");
		ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных);
		ЗаполнитьПараметрыЗаявки(Группа,  СтруктураДанных);
		ГруппыУчастников.Добавить(Группа);
		
		Группа = Новый Структура();
		Группа.Вставить("ИмяГруппы", "Медиалог");
		ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных);
		ЗаполнитьПараметрыЗаявки(Группа, СтруктураДанных);
		ГруппыУчастников.Добавить(Группа);
		
		Группа = Новый Структура();
		Группа.Вставить("ИмяГруппы", "Техподдержка");
		ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных);
		ЗаполнитьПараметрыЗаявки(Группа, СтруктураДанных);
		ГруппыУчастников.Добавить(Группа);
		
		Группа = Новый Структура();
		Группа.Вставить("ИмяГруппы", "ИТО");
		ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных);
		ЗаполнитьПараметрыЗаявки(Группа, СтруктураДанных);
		ГруппыУчастников.Добавить(Группа);
		
	ИначеЕсли ВидЗаявки = "Перевод" Тогда
		
		Группа = Новый Структура();
		Группа.Вставить("ИмяГруппы", "Основная");
		ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных);
		ЗаполнитьПараметрыЗаявки(Группа, СтруктураДанных);
		ГруппыУчастников.Добавить(Группа);
		
		Группа = Новый Структура();
		Группа.Вставить("ИмяГруппы", "Медиалог");
		ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных);
		ЗаполнитьПараметрыЗаявки(Группа, СтруктураДанных);
		ГруппыУчастников.Добавить(Группа);
		
		Группа = Новый Структура();
		Группа.Вставить("ИмяГруппы", "Техподдержка");
		ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных);
		ЗаполнитьПараметрыЗаявки(Группа, СтруктураДанных);
		ГруппыУчастников.Добавить(Группа);
		
		Группа = Новый Структура();
		Группа.Вставить("ИмяГруппы", "ИТО");
		ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных);
		ЗаполнитьПараметрыЗаявки(Группа, СтруктураДанных);
		ГруппыУчастников.Добавить(Группа);
		
	ИначеЕсли ВидЗаявки = "Увольнение" Тогда
		
		Группа = Новый Структура();
		Группа.Вставить("ИмяГруппы", "Основная");
		ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных);
		ЗаполнитьПараметрыЗаявки(Группа, СтруктураДанных);
		ГруппыУчастников.Добавить(Группа);
		
		Группа = Новый Структура();
		Группа.Вставить("ИмяГруппы", "Медиалог");
		ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных);
		ЗаполнитьПараметрыЗаявки(Группа, СтруктураДанных);
		ГруппыУчастников.Добавить(Группа);
		
		Группа = Новый Структура();
		Группа.Вставить("ИмяГруппы", "Техподдержка");
		ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных);
		ЗаполнитьПараметрыЗаявки(Группа, СтруктураДанных);
		ГруппыУчастников.Добавить(Группа);
		
	КонецЕсли;
	
	Возврат ГруппыУчастников;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыРассылки(Группа, СтруктураДанных)
	
	ИнтернетПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
	ДобавитьПолучателейОтправителя(ИнтернетПочтовоеСообщение, Группа.ИмяГруппы);
	ИнтернетПочтовоеСообщение.Тема = СформироватьТекстТемы(СтруктураДанных, Группа.ИмяГруппы);
	
	Текст = СформироватьТекстСообщения(Группа.ИмяГруппы, СтруктураДанных);
	
	
	ТекстПисьма = ИнтернетПочтовоеСообщение.Тексты.Добавить();
	ТекстПисьма.Кодировка = "windows-1251";
	ТекстПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	ТекстПисьма.Текст = Текст;
	
	Группа.Вставить("ИнтернетПочтовоеСообщение", ИнтернетПочтовоеСообщение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыЗаявки(Группа, СтруктураДанных)
	
	СтруктураЗаявки = ПолучитьСтруктуруЗаявки();
	ЗаполнитьСтруктуруЗаявки(СтруктураЗаявки.operation.details, Группа);
	СтруктураЗаявки.operation.details.subject = СформироватьТекстТемы(СтруктураДанных);
	СтруктураЗаявки.operation.details.description = СформироватьТекстСообщения(Группа.ИмяГруппы, СтруктураДанных);
	
	Группа.Вставить("СтруктураЗаявки", СтруктураЗаявки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗаявки(СтруктураДетали, Группа)
	
	АвторЗаявки = ПользователиКлиентСервер.ТекущийПользователь().ФизическоеЛицо.ФИО;
	
	СтруктураДетали.requester = АвторЗаявки; //АвторЗаявки
	СтруктураДетали.createdby = АвторЗаявки; //КемСоздан

	СтруктураДетали.subject = ""; //Тема
	СтруктураДетали.description = ""; //Текст заявки
	СтруктураДетали.group = "[ОИТ] 1С-программисты"; //Группа
	СтруктураДетали.category = "Отдел ИТ"; //Категория
	СтруктураДетали.subcategory = "04 - Управление пользователями"; //Подкатегория
	СтруктураДетали.item = "01 - Заведение нового пользователя"; //Позиция
	СтруктураДетали.priority = "03. 8ч В течение рабочего дня"; //Приоритет
	//СтруктураДетали.technician = "Граховский Константин Николаевич"; //Специалист
	СтруктураДетали.requesttemplate = "04 - Управление пользователями"; //Подкатегория?
	СтруктураДетали.status = "Открыта"; //Статус
	
	Если Группа.ИмяГруппы = "Основная" Тогда
		//СтруктураДетали.group = "[ОИТ] 1С-программисты";
		СтруктураДетали.group = "[МКС] Москомсвязь";
		СтруктураДетали.category = "Отдел ИТ";
		СтруктураДетали.subcategory = "14 - 1С";
		СтруктураДетали.technician = "москомсвязь";
	ИначеЕсли Группа.ИмяГруппы = "Техподдержка" Тогда
		//СтруктураДетали.group = "[ОИТ] Тех.Поддержка";
		СтруктураДетали.group = "[МКС] Москомсвязь";
		СтруктураДетали.category = "Отдел ИТ";
		СтруктураДетали.subcategory = "04 - Управление пользователями";
		СтруктураДетали.technician = "москомсвязь";
	ИначеЕсли Группа.ИмяГруппы = "Медиалог" Тогда
		//СтруктураДетали.group = "[ОИТ] МЕДИАЛОГ";
		СтруктураДетали.group = "[МКС] Москомсвязь";
		СтруктураДетали.category = "Отдел ИТ";
		СтруктураДетали.subcategory = "01 - МЕДИАЛОГ";
		СтруктураДетали.technician = "москомсвязь";
	ИначеЕсли Группа.ИмяГруппы = "ИТО" Тогда
		СтруктураДетали.group = "[ИТО] Пропускной режим";
		СтруктураДетали.category = "ИТО";
		СтруктураДетали.subcategory = "04 - Управление пользователями";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактнуюИнформацию()
	
	МассивСсылок = Новый Массив();
	МассивСсылок.Добавить(СсылкаНаОбъект.ФизическоеЛицо);
	ТаблицаКонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивСсылок);
	
	СоответсвиеКонтактнаяИнформация = Новый Соответствие;
	Для Каждого СтрокаКонтактнаяИнформация Из ТаблицаКонтактнаяИнформация Цикл
		ИмяСвойства = Строка(СтрокаКонтактнаяИнформация.Вид);
		СоответсвиеКонтактнаяИнформация.Вставить(ИмяСвойства, СтрокаКонтактнаяИнформация.Представление);
	КонецЦикла;		
	
	ГУИД1С = ПолучитьГУИД_УУ();
	СоответсвиеКонтактнаяИнформация.Вставить("ГУИД1С", ГУИД1С);
	
	Возврат СоответсвиеКонтактнаяИнформация;
	
КонецФункции

&НаСервере
Процедура ОтправитьПисьма()
	
	ГруппыУчастников = ПолучитьИзВременногоХранилища(ГруппыУчастниковАдрес);
	
	ПользовательSMTP = "sender1c@sogaz-clinic.ru";
	ПарольSMTP = "hUsWuQuWrach6f";
	АдресСервераSMTP = "mail.sogaz-clinic.ru";
	ИнтернетПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
	ИнтернетПочтовыйПрофиль.АдресСервераSMTP = АдресСервераSMTP;
	ИнтернетПочтовыйПрофиль.ПортSMTP = 25;
	ИнтернетПочтовыйПрофиль.ПользовательSMTP = ПользовательSMTP;
	ИнтернетПочтовыйПрофиль.ПарольSMTP = ПарольSMTP;
	
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль);
	Для Каждого ГруппаУчастников Из ГруппыУчастников Цикл
		Если Отладка Тогда
			ГруппаУчастников.Значение.ИнтернетПочтовоеСообщение.Получатели.Очистить();
			ГруппаУчастников.Значение.ИнтернетПочтовоеСообщение.Получатели.Добавить("k.grakhovskiy@moscoms.ru");
		КонецЕсли;
		Если ГруппаУчастников.Значение.ИнтернетПочтовоеСообщение.Получатели.Количество() > 0 Тогда
			
			//Перед отправкой вставляем разметку html
			Текст = ГруппаУчастников.Значение.ИнтернетПочтовоеСообщение.Тексты[0].Текст;
			Текст = "<p>" + СтрЗаменить(Текст,Символы.ПС, "</p>
			|<p>");
			Текст = Лев(Текст,СтрДлина(Текст) - 3);
			//Перед отправкой вставляем разметку html
			
			ГруппаУчастников.Значение.ИнтернетПочтовоеСообщение.Тексты[0].Текст = Текст;
			ИнтернетПочта.Послать(ГруппаУчастников.Значение.ИнтернетПочтовоеСообщение);
			
		КонецЕсли;
	КонецЦикла;
	
	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаявки()
	
	ГруппыУчастников = ПолучитьИзВременногоХранилища(ГруппыУчастниковАдрес);
	
	Для Каждого ГруппаУчастников Из ГруппыУчастников Цикл
		ВыполнитьHTTPЗапросНаСервере(ГруппаУчастников.Значение.СтруктураЗаявки);
		СделатьПаузу(3, "SleepJs");
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СделатьПаузу(ЗадержкаСекунд = 3, Вариант = "Ping")
	
    Если ЗадержкаСекунд = 0 Тогда
        Возврат
    КонецЕсли;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	//Сообщить("начало: "+ТекущаяДата());
	
	Если Вариант = "Ping" Тогда
		
		СтрокаЗапроса = "ping -n 1 -w "+Формат(1000 * ЗадержкаСекунд, "ЧДЦ=0; ЧГ=") + " 127.255.255.255"; 
		WshShell = Новый COMОбъект("WScript.Shell"); 
		WshShell.Run(СтрокаЗапроса, 0, -1); 
		
	ИначеЕсли Вариант = "smaharbA" Тогда
		
		Для к = 1 По ЗадержкаСекунд Цикл
			ПолучитьCOMОбъект("winmgmts:").ExecNotificationQuery("Select * from __instancemodificationevent where TargetInstance isa 'Win32_UTCTime'").NextEvent();
		КонецЦикла;
		
	ИначеЕсли Вариант = "Пустой цикл" Тогда
		
		// грузит процессор
		ДатаВыхода = ТекущаяДата() + ЗадержкаСекунд;
		Пока ТекущаяДата() < ДатаВыхода Цикл
			//ОбработкаПрерыванияПользователя();
		КонецЦикла;
		
	ИначеЕсли Вариант = "Sleep" Тогда
		
		// не работает
		
		scr = Новый ComОбъект("WScript.Shell"); 
		scr.Run("sleep "+Формат(ЗадержкаСекунд, "ЧДЦ=0; ЧГ="), 0, 1);
		
	ИначеЕсли Вариант = "SleepJs" Тогда
		
		// работает
		
		Скрипт = Новый ТекстовыйДокумент(); 
		Скрипт.УстановитьТекст 
		( 
		"if (WScript.Arguments.Count()==0) 
		| WScript.Quit(); 
		|else 
		| if (isNaN(parseInt(WScript.Arguments(0)))) 
		| WScript.Quit(); 
		|WScript.Sleep(WScript.Arguments(0));" 
		); 
		Скрипт.Записать(КаталогВременныхФайлов()+"sleep.js", КодировкаТекста.ANSI); 
		WshShell = Новый COMОбъект("wscript.shell"); 
		WshShell.Run("wscript.exe """+КаталогВременныхФайлов()+"sleep.js"" "+Формат(ЗадержкаСекунд*1000,"ЧГ=0"), 0, -1); 
		УдалитьФайлы(КаталогВременныхФайлов()+"sleep.js"); 
		
	ИначеЕсли Вариант = "SleepVbs" Тогда
		
		// работает
		
		Сигнатура = Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss");
		ПутьСкрипта = КаталогВременныхФайлов()+"SleepScript"+Сигнатура+".vbs";
		СкриптФайл = Новый ТекстовыйДокумент;
		СкриптФайл.ДобавитьСтроку("WScript.Sleep("+Формат(ЗадержкаСекунд*1000, "ЧГ=0")+")");
		СкриптФайл.Записать(ПутьСкрипта, КодировкаТекста.OEM);
		WSHShell = Новый COMОбъект("WScript.Shell");
		WSHShell.Run("wscript.exe """+ПутьСкрипта+"""", 0, 1);
		УдалитьФайлы(ПутьСкрипта);
		
	ИначеЕсли Вариант = "TimeoutWS" Тогда
		
		// работает
		
		КомандаWindows = "Timeout /T " + Формат(ЗадержкаСекунд, "ЧГ=0") + " /NoBreak";
		
		WshShell = Новый COMОбъект("WScript.Shell"); 
		WshShell.Run(КомандаWindows, 0, -1);
		
	ИначеЕсли Вариант = "Timeout" Тогда
		
		// работает, показывает черное окно
		
		КомандаWindows = "Timeout /T " + Формат(ЗадержкаСекунд, "ЧГ=0") + " /NoBreak";
		ЗапуститьПриложение(КомандаWindows,,Истина);
		
	ИначеЕсли Вариант = "DynamicWrapper" Тогда
		
		// нужна библиотека
		
		Wrapper = Новый ComОбъект("DynamicWrapper"); 
		Wrapper.Register("KERNEL32.DLL", "Sleep", "i=l", "f=s"); 
		
		Wrapper.Sleep(ЗадержкаСекунд);
		
	КонецЕсли;
	
	//Сообщить("^^^^^^: "+ТекущаяДата());
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолучателейОтправителя(ИнтернетПочтовоеСообщение, ИмяГруппы)
	
	ИнтернетПочтовоеСообщение.Отправитель = "sender1c@sogaz-clinic.ru";
	
	Если ИмяГруппы = "Основная" Тогда
		
		//есть в группе техподдержки
		//ИнтернетПочтовоеСообщение.Получатели.Добавить("mvnikolaeva@sogaz-clinic.ru");
		
	ИначеЕсли ИмяГруппы = "Техподдержка" Тогда
		
		ИнтернетПочтовоеСообщение.Получатели.Добавить("dlezhoev@sogaz-clinic.ru");
		ИнтернетПочтовоеСообщение.Получатели.Добавить("e.kozlova@moscoms.ru");

		ИмяБазы = НРег(НСтр(СтрокаСоединенияИнформационнойБазы(),"Ref"));
		Если СтрНайти(ИмяБазы,"mmc") <> 0 Тогда
			ИнтернетПочтовоеСообщение.Получатели.Добавить("zknyazeva@sogaz-clinic.ru");
		ИначеЕсли СтрНайти(ИмяБазы,"pm") Тогда
			ИнтернетПочтовоеСообщение.Получатели.Добавить("ipuhova@sogaz-clinic.ru");
		КонецЕсли;
						
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбъектыНазначения = Новый Массив;
	ОбъектыНазначения.Добавить(СсылкаНаОбъект);

	ПараметрыОткрытия = Новый Структура();
	Параметрыоткрытия.Вставить("ОбъектыНазначения", ОбъектыНазначения);
	
	ФормаПроверки = ПолучитьФорму("ВнешняяОбработка.ПроверкаДанныхСотрудника.Форма.ОсновнаяФорма", Параметрыоткрытия);
	
	СписокОшибок = ФормаПроверки.ВыполнитьПроверкуНаСервере();
	Если СписокОшибок.Количество() > 0 Тогда
		Доступность = Ложь;
		Элементы.СоздатьЗаявкиВSD.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры


//#JSON
//#HTTPЗапрос
//#ИнтернетПочта