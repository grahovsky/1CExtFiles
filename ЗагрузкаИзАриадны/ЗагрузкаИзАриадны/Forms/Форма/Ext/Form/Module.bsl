&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл выгрузки ""Ариадна""";	
	ДиалогВыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогВыбораФайла.МножественныйВыбор			=	Ложь;
	ДиалогВыбораФайла.ИндексФильтра					=	1;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	ДиалогВыбораФайла.Фильтр						=	"Файл Excel(*.xls)|*.xls|Файл Excel(*.xlsx)|*.xlsx";

	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения,, ДиалогВыбораФайла,, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Состояние(Нстр("ru = 'Выполняется загрузка данных. Пожалуйста, подождите...'"));
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		Если Не Файл.Существует() Тогда
			
			ТекстСообщения = Нстр("ru = 'Указанный файл не существует'");
			Возврат;
			
		КонецЕсли;
		
		ПолноеИмяФайла = Файл.ПолноеИмя;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Начало загрузки: " + Строка(ТекущаяДата()));
		ЗагрузитьДанныеНаСервере(Адрес, Файл.Расширение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Окончание загрузки: " + Строка(ТекущаяДата()));
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьДанныеНаСервере(Адрес, Расширение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранИЛИща(Адрес);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЗагрузитьДанныеВТаблицу(ИмяВременногоФайла);

	УдалитьВременныйФайл(ИмяВременногоФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьДанныеВТаблицу(ИмяВременногоФайла) Экспорт
	
	НачатьТранзакцию();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение, ТипФайлаТабличногоДокумента.XLSX);
	
	ТаблицаДанных = СоздатьТаблицуДанных();
	
	//переделано на фиксированную таблицу, т.к. имена колонок и типы значений не явные 
	//ТаблицаДанных = Новый ТаблицаЗначений;
	//Получим имена колонок
	//НомерСтроки = 8;
	//НомерСтолбца = 1;
	//Пока Истина Цикл
	//	ПрочитанноеЗначение = ИсключитьНеЧитаемыеСимволыИзСтроки(ТабличныйДокумент.Область(НомерСтроки, НомерСтолбца).Текст);
	//	ИмяКолонки = НаименованиеКолонки(ПрочитанноеЗначение);
	//	Если ЗначениеЗаполнено(ИмяКолонки) Тогда
	//		НоваяКолонка = ТаблицаДанных.Колонки.Добавить(ИмяКолонки);
	//		НоваяКолонка.Заголовок = ПрочитанноеЗначение;
	//	Иначе
	//		Прервать;
	//	КонецЕсли;
	//	НомерСтолбца = НомерСтолбца + 1;
	//КонецЦикла;
	//КоличествоСтолбцов = НомерСтолбца;
	
	//Добавим строки в таблицу
	КоличествоСтолбцов = ТаблицаДанных.Колонки.Количество();
	НомерСтроки = 9;
	
	Пока Истина Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		КоличествоПустыхСтолбцов = 0;
		
		Для НомерСтолбца = 1 По КоличествоСтолбцов Цикл
			
			ПрочитанноеЗначение = ИсключитьНеЧитаемыеСимволыИзСтроки(ТабличныйДокумент.Область(НомерСтроки, НомерСтолбца).Текст);
			Если ЗначениеЗаполнено(ПрочитанноеЗначение) Тогда
				//НоваяСтрока[НомерСтолбца - 1] = ПрочитанноеЗначение;
				ТипЗначения = ТаблицаДанных.Колонки[НомерСтолбца - 1].ТипЗначения;
				Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
					ПрочитанноеЗначение = СтрЗаменить(ПрочитанноеЗначение, " ", "");
				КонецЕсли;
				НоваяСтрока[НомерСтолбца - 1] = ТипЗначения.ПривестиЗначение(ПрочитанноеЗначение);
			Иначе
				КоличествоПустыхСтолбцов = КоличествоПустыхСтолбцов + 1;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоПустыхСтолбцов = КоличествоСтолбцов Тогда
			ТаблицаДанных.Удалить(НоваяСтрока);
			Прервать;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВременныйФайл(ПолноеИмяФайла) Экспорт
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		УдалитьФайлы(ПолноеИмяФайла)
	Исключение
		ЗаписьЖурналаРегистрации("Загрузка ", УровеньЖурналаРегистрации.Предупреждение,
			,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
			|%1 по причине: %2'"), ПолноеИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ИсключитьНеЧитаемыеСимволыИзСтроки(Знач АнализируемыйТекст, ЗаменятьСимволы = Истина, СимволЗамены = " ")
	
	// Читаемые символы. 
	Латиница = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"; 
	Кирилица = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя"; 
	Греческие = "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψω"; 
	Цифры = "0123456789"; 
	СпециальныеСимволы = "~`!@#$%^&*(){}[]_-=+\|/*:;.<>?,№«» "; 
	ДвойнаяКавычка = """"; 
	ОдинарнаяКавычка = "'"; 
	АпострофОбратный = "L9;";           // КодСимвола 769. Обратный для символа на букве "Ё". 
	АвторскоеПраво = "©";             // КодСимвола 169. "Copyright" - латинская буква C в окружности - авторское право. 
	Зарезервировано = "®";           // КодСимвола 174. "Registered" - латинская буква R в окружности - товарный знак. 
	ТоварныйЗнак = "™";               // Верхний  индекс ТМ. 
	ШирокоеТире = "—";                // КодСимвола 8212. 
	ДенежныеСимволы = "¤¢€£¥";  // Денежная единица, Цент, Евро, Фунт стерлингов, Иена или юань. 
	ДробныеСимволы = "½¼¾";    // Дроби: 1/2, 1/4, 3/4. 
	СимволыСтепени = "¹²³";         // Степени: 1, 2, 3 
	ПрочиеСимволы = "°±×÷Øƒµ"+Символ(167);    // Градус, Плюс/Минус, Знак умножения, Знак деления, Диаметр, Знак функции, Микро, Параграф. 
	
	ЧитаемыеСимволы = Латиница + Кирилица + Греческие + Цифры + СпециальныеСимволы + ШирокоеТире 
	+ ДвойнаяКавычка + ОдинарнаяКавычка + АпострофОбратный + АвторскоеПраво + Зарезервировано + ТоварныйЗнак 
	+ ДенежныеСимволы + ДробныеСимволы + СимволыСтепени + ПрочиеСимволы; 
	
	// Формирование результирующей строки. 
	ИтоговаяСтрока = ""; 
	Для НомерСимвола = 1 ПО СтрДлина(АнализируемыйТекст) Цикл 
		ТекущийСимвол = Сред(АнализируемыйТекст, НомерСимвола, 1); 
		// Заменяемые символы. Системный набор значений: "Символы": 
		Если ТекущийСимвол = Символы.ВК ИЛИ ТекущийСимвол = Символы.ВТаб ИЛИ ТекущийСимвол = Символы.НПП 
			ИЛИ ТекущийСимвол = Символы.ПС ИЛИ ТекущийСимвол = Символы.ПФ ИЛИ ТекущийСимвол = Символы.Таб Тогда 
			ТекущийСимвол = СимволЗамены; 
		КонецЕсли; 
		Если КодСимвола(ТекущийСимвол) = 21 Тогда    // Параграф. 
			ТекущийСимвол = Символ(167); 
		КонецЕсли; 
		Если Найти(ЧитаемыеСимволы, ТекущийСимвол) > 0 Тогда 
			ИтоговаяСтрока = ИтоговаяСтрока + ТекущийСимвол; 
		Иначе 
			Если ЗаменятьСимволы Тогда 
				ИтоговаяСтрока = ИтоговаяСтрока + СимволЗамены; 
			Иначе 
				// Сокращение строки на символ. 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ИтоговаяСтрока; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеКолонки(Знач НаименованиеИсходное, Символ = "_") Экспорт 
	
	Результат = НаименованиеИсходное;
	
	Результат = СтрЗаменить(Результат, " ", Символ); 
	Результат = СтрЗаменить(Результат, "/", Символ); 
	Результат = СтрЗаменить(Результат, "\", Символ); 
	Результат = СтрЗаменить(Результат, ".", Символ); 
	Результат = СтрЗаменить(Результат, ", ", Символ); 
	Результат = СтрЗаменить(Результат, "+", Символ); 
	Результат = СтрЗаменить(Результат, "-", Символ); 
	Результат = СтрЗаменить(Результат, "!", Символ); 
	Результат = СтрЗаменить(Результат, "@", Символ); 
	Результат = СтрЗаменить(Результат, "#", Символ); 
	Результат = СтрЗаменить(Результат, "$", Символ); 
	Результат = СтрЗаменить(Результат, "%", Символ); 
	Результат = СтрЗаменить(Результат, "^", Символ); 
	Результат = СтрЗаменить(Результат, "&", Символ); 
	Результат = СтрЗаменить(Результат, "*", Символ); 
	Результат = СтрЗаменить(Результат, "(", Символ); 
	Результат = СтрЗаменить(Результат, ")", Символ); 
	Результат = СтрЗаменить(Результат, "№", Символ); 
	Результат = СтрЗаменить(Результат, ";", Символ); 
	Результат = СтрЗаменить(Результат, ":", Символ); 
	Результат = СтрЗаменить(Результат, "?", Символ); 
	
	Возврат Результат; 
	
КонецФункции 

&НаСервереБезКонтекста
Функция СоздатьТаблицуДанных()

	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("НомерПП", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ФИО", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Шифр", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("НомерПутевки", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ПребываниеДни", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КатегорияОплаты", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("КатегорияПутевки", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ПериодПребыванияПоПутевке", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("НомерИБ", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КомпНомер", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Оплата", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("НомерДоговора", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СуммаДоговора", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ДатаЗаезда", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КПП", Новый ОписаниеТипов("Число"));
	
	//ТаблицаДанных.Колонки[0].ТипЗначения.ПривестиЗначение(
	
	Возврат ТаблицаДанных;

КонецФункции


&НаКлиенте
Процедура ПоказатьОбразец(Команда)
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеНаСервере();
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьОбразецЗавершение", ЭтотОбъект, ИмяФайла);
	ДвоичныеДанные.НачатьЗапись(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДвоичныеДанныеНаСервере()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектЗначение.ПолучитьМакет("ОбразецФайла");
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОбразецЗавершение(ДополнительныеПараметры) Экспорт
	
	ЗапуститьПриложение(ДополнительныеПараметры);
	
КонецПроцедуры

