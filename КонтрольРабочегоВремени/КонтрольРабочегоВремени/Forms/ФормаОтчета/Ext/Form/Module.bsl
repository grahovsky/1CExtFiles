
&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	СтандартныеОтчетыКлиент.ВыбратьПроизвольныйПериодОтчета(ЭтаФорма, Отчет.НачалоПериода, Отчет.КонецПериода, 
		ДоступныеПериодыОтчета.День);
		
КонецПроцедуры // ВыбратьПериод()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Отчет.НачалоПериода) Тогда
		Отчет.НачалоПериода=НачалоМесяца(ТекущаяДата());	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		Отчет.КонецПериода=КонецМесяца(Отчет.НачалоПериода);	
	КонецЕсли;

	ЭтаФорма.ДоступныеПериодыОтчета = СтандартныеОтчеты.ПолучитьДоступныеПериодыОтчета();
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Отказ=Ложь;
	Если НЕ ЗначениеЗаполнено(Отчет.НачалоПериода) Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено 'Начало периода'", , "Отчет.НачалоПериода",, Отказ);      		
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Отчет.КонецПериода) Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен 'Конец периода'", , "Отчет.КонецПериода",, Отказ);      		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	 
	СформироватьОтчетНаСервере();
	
КонецПроцедуры  // СформироватьОтчет()

&НаСервере
Процедура СформироватьОтчетНаСервере()

	СписокПериодов=Новый СписокЗначений;
	ТекДата=Отчет.НачалоПериода;
	Пока ТекДата <= Отчет.КонецПериода Цикл
		СписокПериодов.Добавить(ТекДата);
		ТекДата=ТекДата+86400;
	КонецЦикла;	
	
	ТабДокумент=ЭтаФорма.Результат;
	ТабДокумент.Очистить();
	
	Макет = Отчеты.КонтрольРабочегоВремени.ПолучитьМакет("МакетОтчета");
	
	// Шапка
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ПараметрПериод= "Период с "+Формат(Отчет.НачалоПериода,"ДФ=dd.MM.yyyy")+
	" по "+Формат(Отчет.КонецПериода,"ДФ=dd.MM.yyyy");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ФиксацияСлева=2;
	
	// Шапка таблицы
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы|Сотрудник");	
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ФиксацияСверху= ТабДокумент.ВысотаТаблицы;
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы|День");
	Для каждого ЭлементСписка Из СписокПериодов Цикл
	    ОбластьМакета.Параметры.Дата= Формат(ЭлементСписка.Значение, "ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ДеньНедели=ПолучитьДеньНедели(ЭлементСписка.Значение);
		ТабДокумент.Присоединить(ОбластьМакета);
	КонецЦикла; 
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы|Недоработки");
	ТабДокумент.Присоединить(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы|Переработки");
	ТабДокумент.Присоединить(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы|ОВР");
	ТабДокумент.Присоединить(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы|Норма");
	ТабДокумент.Присоединить(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы|КонечнаяОтметка");
	ТабДокумент.Присоединить(ОбластьМакета);

	
	// Теперь - выполнить компоновку и выгрузить ее в коллекцию	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	СКД = ОбъектОтчет.СхемаКомпоновкиДанных;
	
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0].Значение = Отчет.НачалоПериода;
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0].Использование = Истина;
	
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[1].Значение = Отчет.КонецПериода;
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[1].Использование = Истина;
	
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[2].Значение = РольДоступна("ПолныеПрава");
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[2].Использование = Истина;
	
	РазрешенныеЦФО = Новый СписокЗначений;
	РазрешенныеЦФО.ЗагрузитьЗначения(УправлениеДоступом_доп.ПолучитьМассивЗначенийДоступаПоГруппамДоступа(Метаданные.Отчеты.КонтрольРабочегоВремени, Тип("СправочникСсылка.ЦФО")));
	
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[4].Значение = РазрешенныеЦФО;
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[4].Использование = Истина;
	
	// + Граховский К.Н. 2018.04.02
	//После задания всех ограничивающих параметров - включаем привелегированный режим для ускорения отчета, т.е. РЛС внутри отчета не работают
	УстановитьПривилегированныйРежим(Истина);
	// - Граховский К.Н. 2018.04.02
	
	КомпоновщикМакета1 = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	МакетКомпоновкиДанных1 = КомпоновщикМакета1.Выполнить(СКД, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
	ПроцессорКомпоновкиДанных1 = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных1.Инициализировать(МакетКомпоновкиДанных1,);
	ПроцессорВывода1 = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода1.ОтображатьПроцентВывода = Истина;
	ТаблицаВывода = Новый ТаблицаЗначений;	
	ПроцессорВывода1.УстановитьОбъект(ТаблицаВывода);
	ПроцессорВывода1.Вывести(ПроцессорКомпоновкиДанных1);
	

	// Компоновка выполнена, теперь - сортировки таблиц значений
	ТаблицаОтчета=Новый ТаблицаЗначений;
	ТаблицаОтчета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОтчета.Колонки.Добавить("ФактическийВход", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтчета.Колонки.Добавить("ПогрешностьНаВход", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	Для каждого ЭлементСписка Из СписокПериодов Цикл
	    ОбщееИмя = ПолучитьИмяКолонки(ЭлементСписка.Значение);
	    ТаблицаОтчета.Колонки.Добавить(ОбщееИмя+"Начало_График", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТаблицаОтчета.Колонки.Добавить(ОбщееИмя+"Окончание_График", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТаблицаОтчета.Колонки.Добавить(ОбщееИмя+"ВремяРаботы_График", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаОтчета.Колонки.Добавить(ОбщееИмя+"Начало_Проходная", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТаблицаОтчета.Колонки.Добавить(ОбщееИмя+"Окончание_Проходная", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТаблицаОтчета.Колонки.Добавить(ОбщееИмя+"ВремяРаботы_Проходная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаОтчета.Колонки.Добавить(ОбщееИмя+"Пропуск", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
		// Командировки
		ТаблицаОтчета.Колонки.Добавить(ОбщееИмя+"Начало_Командировка", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТаблицаОтчета.Колонки.Добавить(ОбщееИмя+"Окончание_Командировка", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Время)));
		
	КонецЦикла;
	ТаблицаОтчета.Колонки.Добавить("Переработки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	ТаблицаОтчета.Колонки.Добавить("ПереработкиУтро", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	ТаблицаОтчета.Колонки.Добавить("ПереработкиВечер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	ТаблицаОтчета.Колонки.Добавить("Недоработки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	ТаблицаОтчета.Колонки.Добавить("НедоработкиУтро", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	ТаблицаОтчета.Колонки.Добавить("НедоработкиВечер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	ТаблицаОтчета.Индексы.Добавить("Сотрудник");
	
	СписокСотрудников = Новый СписокЗначений;
	
	Для каждого СтрокаТаблицы Из ТаблицаВывода Цикл
		
		СтрокаТаблицыОтчета=ТаблицаОтчета.Найти(СтрокаТаблицы.Сотрудник, "Сотрудник");
		Если СтрокаТаблицыОтчета=Неопределено Тогда
			СтрокаТаблицыОтчета=ТаблицаОтчета.Добавить();
			СтрокаТаблицыОтчета.Сотрудник=СтрокаТаблицы.Сотрудник;
			СтрокаТаблицыОтчета.ФактическийВход=СтрокаТаблицы.Сотрудник.Должность.ГруппаПерсонала.ФактическийВход;
			СтрокаТаблицыОтчета.ПогрешностьНаВход=СтрокаТаблицы.Сотрудник.Должность.ГруппаПерсонала.ПогрешностьНаВход;
			СтрокаТаблицыОтчета.Переработки=0;
			СтрокаТаблицыОтчета.Недоработки=0;
			
			СписокСотрудников.Добавить(СтрокаТаблицы.Сотрудник);
		КонецЕсли; 
		
		ОбщееИмя = ПолучитьИмяКолонки(СтрокаТаблицы.Период);
		
		//Если СтрокаТаблицы.Показатель = "График" Тогда
		//	СтрокаТаблицыОтчета[ОбщееИмя+"Начало_График"]= СтрокаТаблицы.НачалоДня;
		//	СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_График"]= СтрокаТаблицы.КонецДня;
		//	СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_График"]= СтрокаТаблицы.ВремяРаботы;
		//ИначеЕсли СтрокаТаблицы.Показатель = "Проходная" Тогда  // "Проходная"
		//	СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"]= СтрокаТаблицы.НачалоДня;
		//	СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]= СтрокаТаблицы.КонецДня;
		//	СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"]= СтрокаТаблицы.ВремяРаботы;
		//ИначеЕсли СтрокаТаблицы.Показатель = "Командировка1" Тогда
		//	СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"]= '00010101'+(СтрокаТаблицы.НачалоДня-НачалоДня(СтрокаТаблицы.НачалоДня)); 
		//	СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]= '00010101'+(СтрокаТаблицы.КонецДня-НачалоДня(СтрокаТаблицы.КонецДня));
		//	СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"]= СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]-СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"];
		//	СтрокаТаблицыОтчета[ОбщееИмя+"Пропуск"]=1;	
		//ИначеЕсли СтрокаТаблицы.Показатель = "Командировка" Тогда
		//	СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Командировка"]= '00010101'+(СтрокаТаблицы.НачалоДня-НачалоДня(СтрокаТаблицы.НачалоДня)); 
		//	СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Командировка"]= '00010101'+(СтрокаТаблицы.КонецДня-НачалоДня(СтрокаТаблицы.КонецДня));	
		//КонецЕсли;
		
		Если СтрокаТаблицы.Показатель = "График" Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета[ОбщееИмя+"Начало_График"]) и СтрокаТаблицы.НачалоДня <> Дата('00010101000000')  Тогда
				СтрокаТаблицыОтчета[ОбщееИмя+"Начало_График"]= Мин(СтрокаТаблицыОтчета[ОбщееИмя+"Начало_График"],СтрокаТаблицы.НачалоДня);
			ИначеЕсли СтрокаТаблицы.НачалоДня <> Дата('00010101000000') Тогда	
				СтрокаТаблицыОтчета[ОбщееИмя+"Начало_График"]= СтрокаТаблицы.НачалоДня;
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_График"]) Тогда
				СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_График"]= Макс(СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_График"],СтрокаТаблицы.КонецДня);
			Иначе	
				СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_График"]= СтрокаТаблицы.КонецДня;
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_График"]) Тогда
				СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_График"]= СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_График"]+СтрокаТаблицы.ВремяРаботы;
			Иначе	
				СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_График"]= СтрокаТаблицы.ВремяРаботы;
			КонецЕсли; 		
		ИначеЕсли СтрокаТаблицы.Показатель = "Проходная" Тогда  // "Проходная"
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"]) Тогда
				СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"]= Мин(СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"],СтрокаТаблицы.НачалоДня);
			Иначе	
				СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"]= СтрокаТаблицы.НачалоДня;
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]) Тогда
				СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]= Макс(СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"],СтрокаТаблицы.КонецДня);
			Иначе	
				СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]= СтрокаТаблицы.КонецДня;
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"]) Тогда
				СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"]= СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"]+СтрокаТаблицы.ВремяРаботы;
			Иначе	
				СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"]= СтрокаТаблицы.ВремяРаботы;
			КонецЕсли; 	
			
			//СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"]= СтрокаТаблицы.НачалоДня;
			//СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]= СтрокаТаблицы.КонецДня;
			//СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"]= СтрокаТаблицы.ВремяРаботы;

		ИначеЕсли СтрокаТаблицы.Показатель = "Командировка1" Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"]) Тогда
				СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"]= Мин(СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"],'00010101'+(СтрокаТаблицы.НачалоДня-НачалоДня(СтрокаТаблицы.НачалоДня))); 
			Иначе	
				СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"]= '00010101'+(СтрокаТаблицы.НачалоДня-НачалоДня(СтрокаТаблицы.НачалоДня)); 
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]) Тогда
				СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]= Макс(СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"],'00010101'+(СтрокаТаблицы.КонецДня-НачалоДня(СтрокаТаблицы.КонецДня)));
			Иначе	
				СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]= '00010101'+(СтрокаТаблицы.КонецДня-НачалоДня(СтрокаТаблицы.КонецДня));
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"]) Тогда
				СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"]= СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"]+(СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]-СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"]);
			Иначе	
				СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"]= СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Проходная"]-СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Проходная"];
			КонецЕсли; 		
			// + Граховский К.Н. 02.06.2015 Для пропуска анализируются только те случаи, когда ВремяРаботы_Проходная = 0;
			СтрокаТаблицыОтчета[ОбщееИмя+"ВремяРаботы_Проходная"] = 0;
			// - Граховский К.Н. 02.06.2015
			СтрокаТаблицыОтчета[ОбщееИмя+"Пропуск"]=1;	
		ИначеЕсли СтрокаТаблицы.Показатель = "Командировка" Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Командировка"]) Тогда
				СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Командировка"]= Мин(СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Командировка"],'00010101'+(СтрокаТаблицы.НачалоДня-НачалоДня(СтрокаТаблицы.НачалоДня))); 
			Иначе	
				СтрокаТаблицыОтчета[ОбщееИмя+"Начало_Командировка"]= '00010101'+(СтрокаТаблицы.НачалоДня-НачалоДня(СтрокаТаблицы.НачалоДня)); 
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Командировка"]) Тогда
				СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Командировка"]= Макс(СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Командировка"],'00010101'+(СтрокаТаблицы.КонецДня-НачалоДня(СтрокаТаблицы.КонецДня)));	
			Иначе	
				СтрокаТаблицыОтчета[ОбщееИмя+"Окончание_Командировка"]= '00010101'+(СтрокаТаблицы.КонецДня-НачалоДня(СтрокаТаблицы.КонецДня));	
			КонецЕсли; 
			
		КонецЕсли;

		
	КонецЦикла;
	
	ТаблицаОтчета.Сортировать("Сотрудник");
		
	// Посчитать Норму для сотрудников
	//НормаСотрудников = Новый ТаблицаЗначений;
	//НормаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	//НормаСотрудников.Колонки.Добавить("Норма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Любой)));
	//НормаСотрудников.Индексы.Добавить("Сотрудник");
	
	ЗапросПоНорме=Новый Запрос;
	ЗапросПоНорме.УстановитьПараметр("НачалоПериода", Отчет.НачалоПериода);
	ЗапросПоНорме.УстановитьПараметр("КонецПериода", Отчет.КонецПериода);
	ЗапросПоНорме.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	ЗапросПоНорме.Текст="ВЫБРАТЬ
	|	Норма.Сотрудник.ОснСотрудник КАК Сотрудник,
	|	СУММА(Норма.Часов) КАК Норма
	|ИЗ
	|	РегистрСведений.НормаПоГрафикам1 КАК Норма
	|ГДЕ
	|	(Норма.Дата МЕЖДУ &НачалоПериода И &КонецПериода)И
	|   (Норма.Сотрудник В (&СписокСотрудников))
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	Норма.Сотрудник.ОснСотрудник
	|";

	НормаСотрудников = ЗапросПоНорме.Выполнить().Выгрузить();
	НормаСотрудников.Индексы.Добавить("Сотрудник");
		
	// Теперь - вывести подготовленную таблицу значений
	ТаблицаПерерывов = Справочники.Перерывы.ОпределитьПерерыв(СписокСотрудников.ВыгрузитьЗначения(), СписокПериодов.ВыгрузитьЗначения());
	
	Для каждого СтрокаТаблицы Из ТаблицаОтчета Цикл
	
		ОбластьМакета = Макет.ПолучитьОбласть("Строка0|Сотрудник");	
		ОбластьМакета.Параметры.Сотрудник = СтрокаТаблицы.Сотрудник;
	    ТабДокумент.Вывести(ОбластьМакета);
		ОбщееВремяРаботыФ = 0;
		ОбщееВремяРаботыГ = 0;
		Для каждого ЭлементСписка Из СписокПериодов Цикл
			
			Сотрудник = СтрокаТаблицы.Сотрудник;
			ПериодВыборки = ЭлементСписка.Значение;
			
			ПараметрыОтбора = Новый Структура("Сотрудник, Дата", Сотрудник, ПериодВыборки);
			НайденныеСтроки = ТаблицаПерерывов.НайтиСтроки(ПараметрыОтбора);
			ПерерывЗначение = 0;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Перерыв = НайденныеСтроки[0].Перерыв;
				Если Перерыв <> Неопределено И Перерыв.ВычитаетсяИзГрафика Тогда
					ПерерывЗначение = Перерыв.ОбщееВремяВСекундах;
				КонецЕсли;
			КонецЕсли;
			
			ОбщееИмя = ПолучитьИмяКолонки(ЭлементСписка.Значение);
			
			ОбщееВремяРаботыФ = ОбщееВремяРаботыФ+СтрокаТаблицы[ОбщееИмя+"ВремяРаботы_Проходная"]-?((СтрокаТаблицы[ОбщееИмя+"ВремяРаботы_Проходная"])>(ПерерывЗначение),(ПерерывЗначение),0);
			ОбщееВремяРаботыГ = ОбщееВремяРаботыГ+СтрокаТаблицы[ОбщееИмя+"ВремяРаботы_График"]-?((СтрокаТаблицы[ОбщееИмя+"ВремяРаботы_График"])>(ПерерывЗначение),(ПерерывЗначение),0);
			
			// Формирование строки для вывода и цвета ячейки
			//
			// Цвет=0 - белый
			//		1 - желтый
			//		2 - розовый
			//		3 - красный
			//		4 - синий - если нет графика
			//		5 - фиолетовый - работа удаленно
			
			Цвет="0";
			
			Если СтрокаТаблицы[ОбщееИмя+"ВремяРаботы_График"]=0 Тогда
				// Сотрудник работать не должен, чего приперся - непонятно
				ТекстДляВыводаКонец= Формат(СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"],"ДФ=HH:mm");	
				Если СтрокаТаблицы[ОбщееИмя+"Пропуск"]=1 Тогда
					ТекстДляВыводаКонец=ТекстДляВыводаКонец+"(Пропуск)";			
				ИначеЕсли (НЕ ПустаяСтрока(ТекстДляВыводаКонец)) Тогда
					ТекстДляВыводаКонец=ТекстДляВыводаКонец+"(?)";				
				КонецЕсли; 
				ТекстДляВыводаНачало= Формат(СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"],"ДФ=HH:mm"+?(ПустаяСтрока(ТекстДляВыводаКонец),"","; ДП=00:00"));
				Если (НЕ ПустаяСтрока(ТекстДляВыводаНачало))И(СтрокаТаблицы[ОбщееИмя+"Пропуск"]=0) Тогда
					ТекстДляВыводаНачало=ТекстДляВыводаНачало+"(?)";				
				КонецЕсли;
				ТекстДляВывода=ТекстДляВыводаНачало+?(ПустаяСтрока(ТекстДляВыводаНачало)И ПустаяСтрока(ТекстДляВыводаКонец),""," - ")+ТекстДляВыводаКонец;
				
				СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + ((СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]-СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]));
				Если СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]='000101012359' Тогда
					СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + 60;
				КонецЕсли; 
				
				Если СтрокаТаблицы[ОбщееИмя+"ВремяРаботы_Проходная"]<>0 Тогда
					Цвет = "4";
				КонецЕсли;
				
				
			ИначеЕсли (СтрокаТаблицы[ОбщееИмя+"ВремяРаботы_График"]>0)И
				(СтрокаТаблицы[ОбщееИмя+"ВремяРаботы_Проходная"]=0) Тогда
				
				Если СтрокаТаблицы.Сотрудник.РаботаУдаленно Тогда //Работа Удаленно
					Цвет="5";
					ТекстДляВыводаКонец= Формат(СтрокаТаблицы[ОбщееИмя+"Окончание_График"],"ДФ=HH:mm");			
					ТекстДляВыводаНачало= Формат(СтрокаТаблицы[ОбщееИмя+"Начало_График"],"ДФ=HH:mm"+?(ПустаяСтрока(ТекстДляВыводаКонец),"","; ДП=00:00"));				
					ТекстДляВывода=ТекстДляВыводаНачало+?(ПустаяСтрока(ТекстДляВыводаНачало)И ПустаяСтрока(ТекстДляВыводаКонец),""," - ")+ТекстДляВыводаКонец;	
				ИначеЕсли
					// Проверка на командировки
					//Если 
					СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]>СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"] Тогда
					Если (СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"]<=СтрокаТаблицы[ОбщееИмя+"Начало_График"])И
						(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]>=СтрокаТаблицы[ОбщееИмя+"Окончание_График"])	Тогда
						// Все Ок - это не невыход
						Цвет="0";
						ТекстДляВыводаКонец= Формат(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"],"ДФ=HH:mm");			
						ТекстДляВыводаНачало= Формат(СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"],"ДФ=HH:mm"+?(ПустаяСтрока(ТекстДляВыводаКонец),"","; ДП=00:00"));				
						ТекстДляВывода=ТекстДляВыводаНачало+?(ПустаяСтрока(ТекстДляВыводаНачало)И ПустаяСтрока(ТекстДляВыводаКонец),""," - ")+ТекстДляВыводаКонец+
						"(командировка)";							 
						
					ИначеЕсли (СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"]>СтрокаТаблицы[ОбщееИмя+"Начало_График"])И
						(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]>=СтрокаТаблицы[ОбщееИмя+"Окончание_График"])	Тогда
						// Это опоздание с утра
						Цвет="1";
						Суффикс1="("+ Окр((СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"]-СтрокаТаблицы[ОбщееИмя+"Начало_График"])/60,0,1)+" мин.)" ;
						ТекстДляВыводаКонец= Формат(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"],"ДФ=HH:mm");			
						ТекстДляВыводаНачало= Формат(СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"],"ДФ=HH:mm"+?(ПустаяСтрока(ТекстДляВыводаКонец),"","; ДП=00:00"))+Суффикс1;				
						ТекстДляВывода=ТекстДляВыводаНачало+?(ПустаяСтрока(ТекстДляВыводаНачало)И ПустаяСтрока(ТекстДляВыводаКонец),""," - ")+ТекстДляВыводаКонец+
						"(командировка)";
						
					ИначеЕсли (СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"]<=СтрокаТаблицы[ОбщееИмя+"Начало_График"])И
						(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]<СтрокаТаблицы[ОбщееИмя+"Окончание_График"])	Тогда
						// Это уход раньше
						Цвет="3";
						Суффикс2="("+ Окр((СтрокаТаблицы[ОбщееИмя+"Окончание_График"]-СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"])/60,0,1)+" мин.)" ;
						ТекстДляВыводаКонец= Формат(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"],"ДФ=HH:mm")+Суффикс2;			
						ТекстДляВыводаНачало= Формат(СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"],"ДФ=HH:mm"+?(ПустаяСтрока(ТекстДляВыводаКонец),"","; ДП=00:00"));				
						ТекстДляВывода=ТекстДляВыводаНачало+?(ПустаяСтрока(ТекстДляВыводаНачало)И ПустаяСтрока(ТекстДляВыводаКонец),""," - ")+ТекстДляВыводаКонец+
						"(командировка)";
						
					Иначе
						// Это и опоздание и уход раньше
						Цвет="3";
						Суффикс1="("+ Окр((СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"]-СтрокаТаблицы[ОбщееИмя+"Начало_График"])/60,0,1)+" мин.)" ;
						Суффикс2="("+ Окр((СтрокаТаблицы[ОбщееИмя+"Окончание_График"]-СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"])/60,0,1)+" мин.)" ;
						ТекстДляВыводаКонец= Формат(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"],"ДФ=HH:mm")+Суффикс2;			
						ТекстДляВыводаНачало= Формат(СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"],"ДФ=HH:mm"+?(ПустаяСтрока(ТекстДляВыводаКонец),"","; ДП=00:00"))+Суффикс1;				
						ТекстДляВывода=ТекстДляВыводаНачало+?(ПустаяСтрока(ТекстДляВыводаНачало)И ПустаяСтрока(ТекстДляВыводаКонец),""," - ")+ТекстДляВыводаКонец+
						"(командировка)";
					КонецЕсли; 
					//КонецЕсли; //Работа Удаленно		
				Иначе
					Если СтрокаТаблицы[ОбщееИмя+"Пропуск"]=1 Тогда
						Суф3="(Пропуск)";
					Иначе
						Суф3="(невыход)";
					КонецЕсли;	
					
					// Это не выход
					Цвет="1";    //желтый цвет
					ТекстДляВыводаКонец= Формат(СтрокаТаблицы[ОбщееИмя+"Окончание_График"],"ДФ=HH:mm");			
					ТекстДляВыводаНачало= Формат(СтрокаТаблицы[ОбщееИмя+"Начало_График"],"ДФ=HH:mm"+?(ПустаяСтрока(ТекстДляВыводаКонец),"","; ДП=00:00"));				
					ТекстДляВывода=ТекстДляВыводаНачало+?(ПустаяСтрока(ТекстДляВыводаНачало)И ПустаяСтрока(ТекстДляВыводаКонец),""," - ")+ТекстДляВыводаКонец+
					Суф3;//"(невыход)";	
					
					СтрокаТаблицы.Недоработки = СтрокаТаблицы.Недоработки + СтрокаТаблицы[ОбщееИмя+"ВремяРаботы_График"];
					Если СтрокаТаблицы[ОбщееИмя+"Окончание_График"]='000101012359' Тогда
						СтрокаТаблицы.Недоработки = СтрокаТаблицы.Недоработки + 60;
					КонецЕсли;
					
					// + Граховский К.Н. 02.06.2015
					Если СтрокаТаблицы[ОбщееИмя+"Пропуск"] = 1 Тогда
						Цвет = "0";
					КонецЕсли;
					// - Граховский К.Н. 02.06.2015
					
				КонецЕсли;	
				
			Иначе
				// Разобраться с опозданиями
				//СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + СтрокаТаблицы[ОбщееИмя+"ВремяРаботы_Проходная"] - СтрокаТаблицы[ОбщееИмя+"ВремяРаботы_График"];
				
				Суффикс1="";
				Суффикс2="";
				СуфВх = "";
				СуфВых="";
				Если ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]) Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"])И
							(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]<СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]) Тогда
						Цвет="1";
						Суффикс1="("+ Окр((СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]-СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"])/60,0,1)+" мин.)" ;
					ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]) Тогда
						Суффикс1="";	
					//ИначеЕсли СтрокаТаблицы.ФактическийВход>0 И 
					//	(СтрокаТаблицы[ОбщееИмя+"Начало_График"]-СтрокаТаблицы.ФактическийВход*60)<СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"] И
					//	СтрокаТаблицы[ОбщееИмя+"Начало_График"]>СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]
					//	Тогда
					//	Цвет="1";
					//	СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + (СтрокаТаблицы[ОбщееИмя+"Начало_График"] - СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]);
					ИначеЕсли //СтрокаТаблицы.ПогрешностьНаВход>0 И
						СтрокаТаблицы[ОбщееИмя+"Начало_График"]<=СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]И     //Отмеряем опоздание < 15 минут
						(СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"] - СтрокаТаблицы[ОбщееИмя+"Начало_График"]<= 900) 
						Тогда
						Цвет="2";
						Суффикс1="("+ Окр((СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]-СтрокаТаблицы[ОбщееИмя+"Начало_График"])/60,0,1)+" мин.)" ;
						СтрокаТаблицы.Недоработки = СтрокаТаблицы.Недоработки + (СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"] - СтрокаТаблицы[ОбщееИмя+"Начало_График"]);
					ИначеЕсли //СтрокаТаблицы.ПогрешностьНаВход>0 И
						СтрокаТаблицы[ОбщееИмя+"Начало_График"]<СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]И     //Отмеряем опоздание > 15 минут
						(СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"] - СтрокаТаблицы[ОбщееИмя+"Начало_График"] > 900) 
						Тогда
						Цвет="3";
					//					
					//ИначеЕсли СтрокаТаблицы.ПогрешностьНаВход=0 И
					//	СтрокаТаблицы[ОбщееИмя+"Начало_График"]<СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]
					//	Тогда
					//	Цвет="2";
						Суффикс1="("+ Окр((СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]-СтрокаТаблицы[ОбщееИмя+"Начало_График"])/60,0,1)+" мин.)" ;
						СтрокаТаблицы.Недоработки = СтрокаТаблицы.Недоработки + (СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"] - СтрокаТаблицы[ОбщееИмя+"Начало_График"]);						
					КонецЕсли;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]) Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"])И
						(СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"]>СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]) Тогда
						Цвет="3";
						Суффикс2="("+ Окр((СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"]-СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"])/60,0,1)+" мин.)" ;	
					ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"]) Тогда
						Суффикс2="";	
					ИначеЕсли СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]<СтрокаТаблицы[ОбщееИмя+"Окончание_График"] Тогда
						Цвет="3";
						Суффикс2="("+ Окр((СтрокаТаблицы[ОбщееИмя+"Окончание_График"]-СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"])/60,0,1)+" мин.)" ;
						//СтрокаТаблицы.Недоработки = СтрокаТаблицы.Недоработки + (СтрокаТаблицы[ОбщееИмя+"Окончание_График"] - СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]);						
					КонецЕсли; 
					
				КонецЕсли;
				
				//Расчет Недоработок/переработок по дням,  утро
				Если ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]) И ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]) Тогда
					Если Не ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_График"]) Тогда 
						Если СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]<СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"] Тогда
							СтрокаТаблицы.НедоработкиУтро =  СтрокаТаблицы.НедоработкиУтро + ((СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]));
							СтрокаТаблицы.Недоработки = СтрокаТаблицы.Недоработки + ((СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]));						
						КонецЕсли; 
						СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + ((СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]-СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"]));	
						Если СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]='000101012359' Тогда
							СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + 60;
						КонецЕсли; 
					ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]) Тогда  //Вторая часть суток по графику, ошибка входа по суткам      Окончание графика не 0
						СуфВх = "(ОВх_Сутки2ч)";
					КонецЕсли;	
				//
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]) и Не ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_График"]) Тогда   //проверяем переработки и недоработки по входу, ошибки входа
					Если Не ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_График"]) Тогда //по графику пусто, пришел вне графика
						СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + ((СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]-СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]));	
						Если СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]='000101012359' Тогда
							СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + 60;
						КонецЕсли; 
					Иначе    //Вторая часть суток по графику, ошибка входа по суткам      Окончание графика не 0
						СуфВх = "(ОВх_Сутки2ч)";
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]) и ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_График"]) Тогда
					Если ((СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Начало_График"]))>0 тогда
						//ПереработкиУтро = 0;
						СтрокаТаблицы.НедоработкиУтро =  СтрокаТаблицы.НедоработкиУтро + ((СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Начало_График"]));
						СтрокаТаблицы.Недоработки = СтрокаТаблицы.Недоработки + ((СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Начало_График"]));
					ИначеЕсли ((СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Начало_График"]))< - 1800 Тогда
						СтрокаТаблицы.ПереработкиУтро = СтрокаТаблицы.ПереработкиУтро + (-1)*((СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"])-(СтрокаТаблицы[ОбщееИмя+"Начало_График"])); 
						СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + (-1)*((СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"])-(СтрокаТаблицы[ОбщееИмя+"Начало_График"]));
						//НедоработкаУтро = 0;
					КонецЕсли;
					
				Иначе  //Вход по проходной 0
					Если ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_График"]) Тогда
						СуфВх= "(Нет входа)";
					КонецЕсли;
				КонецЕсли;
				
				
				//Расчет Недоработок/переработок по дням,  вечер
				Если ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]) И ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_Командировка"]) Тогда
					Если Не ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_График"]) Тогда 
						Если СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"]>СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"] Тогда
							СтрокаТаблицы.НедоработкиВечер =  СтрокаТаблицы.НедоработкиВечер + ((СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"])- (СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]));
							СтрокаТаблицы.Недоработки = СтрокаТаблицы.Недоработки + ((СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"])- (СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]));						
						КонецЕсли; 
						СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + ((СтрокаТаблицы[ОбщееИмя+"Начало_Командировка"]-СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]));	
						Если СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]='000101012359' Тогда
							СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + 60;
						КонецЕсли; 
					КонецЕсли;
				//					 
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]) и Не ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_График"]) Тогда   //проверяем переработки и недоработки по выходу, ошибки выхода
					Если ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_График"]) Тогда //сутки по графику, выход внтри суток, м.б. выезд
						СуфВых = "Выезд?";
					Иначе    //Графика нет
						Если ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"]) тогда
							//ОбщаяПереработка = (СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]-СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]);		
							//НоЭтовторой раз писать не надо
						Иначе
							СуфВых = "Выход без входа и без графика";	                                	
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]) и ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_График"]) Тогда //Есть оба значения
					Если ((СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Окончание_График"]))>1800 и
						НЕ ( (СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]) = '000101012359' И ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_График"]) <> '000101012359') тогда
						СтрокаТаблицы.ПереработкиВечер = СтрокаТаблицы.ПереработкиВечер+ ((СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Окончание_График"])); 
						СтрокаТаблицы.Переработки = СтрокаТаблицы.Переработки + ((СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Окончание_График"]));
						//НедоработкаВечер = 0;
					ИначеЕсли ((СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Окончание_График"]))>1800 
						и ( (СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]) = '000101012359' И ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_График"]) <> '000101012359') Тогда 	
						СуфВых= "(Нет выхода)";
					ИначеЕсли ((СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Окончание_График"]))<0 Тогда  
						//ПереработкаВечер = 0;
						СтрокаТаблицы.НедоработкиВечер = СтрокаТаблицы.НедоработкиВечер + (-1)*((СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Окончание_График"]));
						СтрокаТаблицы.Недоработки = СтрокаТаблицы.Недоработки + (-1)*((СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"])- (СтрокаТаблицы[ОбщееИмя+"Окончание_График"]));
					КонецЕсли;
					
				ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]) и ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_График"])
					ИЛИ( (СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"]) = '000101012359' И ЗначениеЗаполнено(СтрокаТаблицы[ОбщееИмя+"Окончание_График"]) <> '000101012359')
					Тогда //Выход по проходной 0
					СуфВых= "(Нет выхода)";
					//Цвет = "3";
				КонецЕсли;
				
				
				ТекстДляВыводаКонец= Формат(СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"],"ДФ=HH:mm")+Суффикс2+СуфВых;
			
				ТекстДляВыводаНачало= Формат(СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"],"ДФ=HH:mm"+?(ПустаяСтрока(ТекстДляВыводаКонец),"","; ДП=00:00"))+Суффикс1+СуфВх;
				
				ТекстДляВывода=ТекстДляВыводаНачало+?(ПустаяСтрока(ТекстДляВыводаНачало)И ПустаяСтрока(ТекстДляВыводаКонец),""," - ")+ТекстДляВыводаКонец;
							
			КонецЕсли;
			
			////ТекстДляВыводаКонец= Формат(СтрокаТаблицы[ОбщееИмя+"Окончание_Проходная"],"ДФ=HH:mm");
			////
			////ТекстДляВыводаНачало= Формат(СтрокаТаблицы[ОбщееИмя+"Начало_Проходная"],"ДФ=HH:mm"+?(ПустаяСтрока(ТекстДляВыводаКонец),"","; ДП=00:00"));
			////
			////ТекстДляВывода=ТекстДляВыводаНачало+?(ПустаяСтрока(ТекстДляВыводаНачало)И ПустаяСтрока(ТекстДляВыводаКонец),""," - ")+ТекстДляВыводаКонец;
			
			
			
			// Вывод в ячейку	
			ОбластьМакета = Макет.ПолучитьОбласть("Строка"+Цвет+"|День");
			ОбластьМакета.Параметры.ТекстДляВывода= ТекстДляВывода;
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЦикла; 
		
		// Переработки
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка0|Недоработки");

		ОбластьМакета.Параметры.НедоработкаУтро = ПолучитьВремяПереработки(СтрокаТаблицы.НедоработкиУтро);
		ОбластьМакета.Параметры.НедоработкаВечер = ПолучитьВремяПереработки(СтрокаТаблицы.НедоработкиВечер);
		
		
		ТабДокумент.Присоединить(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Строка0|Переработки");
		ОбластьМакета.Параметры.ПереработкаУтро = ПолучитьВремяПереработки(СтрокаТаблицы.ПереработкиУтро);
		ОбластьМакета.Параметры.ПереработкаВечер = ПолучитьВремяПереработки(СтрокаТаблицы.ПереработкиВечер);
	
        ТабДокумент.Присоединить(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка0|ОВР");
        ОбластьМакета.Параметры.ОбщееОтработанноеВремя = Строка(Окр(ОбщееВремяРаботыГ/3600, 0))+"ч./"+Строка(Окр(ОбщееВремяРаботыФ/3600, 0))+"ч."; 
		ТабДокумент.Присоединить(ОбластьМакета);
		
		// Вывести Норму
		РезультатПоиска=НормаСотрудников.Найти(СтрокаТаблицы.Сотрудник, "Сотрудник");
		Если РезультатПоиска=Неопределено Тогда
			Норма=0;
		Иначе	
			Норма=РезультатПоиска.Норма;
		КонецЕсли; 
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка0|Норма");
        ОбластьМакета.Параметры.Норма = Норма; 
		ТабДокумент.Присоединить(ОбластьМакета);

		
		Если СтрокаТаблицы.Недоработки>0 тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Строка1|КонечнаяОтметка");
		ИначеЕсли СтрокаТаблицы.Переработки>0 Тогда
		    ОбластьМакета = Макет.ПолучитьОбласть("Строка2|КонечнаяОтметка");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("Строка0|КонечнаяОтметка");
		КонецЕсли;
		
        ТабДокумент.Присоединить(ОбластьМакета);

		//СтрокаПереработкиНедоработки="";
		//Если СтрокаТаблицы.Переработки>0 Тогда
		//	СтрокаПереработкиНедоработки=СтрокаПереработкиНедоработки+?(ПустаяСтрока(СтрокаПереработкиНедоработки),"","")+
		//	"Перераб."+ПолучитьВремяПереработки(СтрокаТаблицы.Переработки);
		//КонецЕсли; 
		//
		//Если СтрокаТаблицы.ПереработкиУтро>0 Тогда
		//	СтрокаПереработкиНедоработки=СтрокаПереработкиНедоработки+?(ПустаяСтрока(СтрокаПереработкиНедоработки),"",", ")+
		//	"Утро:"+ПолучитьВремяПереработки(СтрокаТаблицы.ПереработкиУтро);
		//КонецЕсли;
		//
		//Если СтрокаТаблицы.ПереработкиВечер>0 Тогда
		//	СтрокаПереработкиНедоработки=СтрокаПереработкиНедоработки+?(ПустаяСтрока(СтрокаПереработкиНедоработки),"",", ")+
		//	"Вечер:"+ПолучитьВремяПереработки(СтрокаТаблицы.ПереработкиВечер);
		//КонецЕсли;

		//
		//Если СтрокаТаблицы.Недоработки>0 Тогда
		//	СтрокаПереработкиНедоработки=СтрокаПереработкиНедоработки+?(ПустаяСтрока(СтрокаПереработкиНедоработки),"",", ")+
		//	"Недораб."+ПолучитьВремяПереработки(СтрокаТаблицы.Недоработки);
		//КонецЕсли;
		//
		//Если СтрокаТаблицы.НедоработкиУтро>0 Тогда
		//	СтрокаПереработкиНедоработки=СтрокаПереработкиНедоработки+?(ПустаяСтрока(СтрокаПереработкиНедоработки),"",", ")+
		//	"Утро:"+ПолучитьВремяПереработки(СтрокаТаблицы.НедоработкиУтро);
		//КонецЕсли;
		//
		//Если СтрокаТаблицы.НедоработкиВечер>0 Тогда
		//	СтрокаПереработкиНедоработки=СтрокаПереработкиНедоработки+?(ПустаяСтрока(СтрокаПереработкиНедоработки),"",", ")+
		//	"Вечер:"+ПолучитьВремяПереработки(СтрокаТаблицы.НедоработкиВечер);
		//КонецЕсли;


		//ОбластьМакета.Параметры.Переработка=СтрокаПереработкиНедоработки;
		//ТабДокумент.Присоединить(ОбластьМакета);
		
	КонецЦикла; 
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
 		ТабДокумент.Вывести(ОбластьМакета);

КонецПроцедуры // СформироватьОтчетНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьВремяПереработки(Переработка)
	
	РезультатФункции = "";
	Если Переработка=0 Тогда
		Возврат РезультатФункции;
	КонецЕсли; 
	
	Если ?(Переработка<0,-Переработка, Переработка)<60 Тогда
		Возврат РезультатФункции;
	КонецЕсли; 
	
	Если Переработка<0 Тогда
		//РезультатФункции = "Недоработка:";
		Переработка_=-Переработка;
	Иначе	
		//РезультатФункции = "Переработка:";
		Переработка_=Переработка;
	КонецЕсли; 
	
	// Дни
	Дни=Цел(Переработка_/86400);
	Если Дни>0 Тогда
		РезультатФункции=РезультатФункции+Дни+" дн. ";
	КонецЕсли; 
	Переработка_=Переработка_- Дни*86400;
	
	// Часы
	Часы=Цел(Переработка_/3600);
	Если Часы>0 Тогда
		РезультатФункции=РезультатФункции+Часы+" ч. ";
	КонецЕсли;
	Переработка_=Переработка_- Часы*3600;
	
	// Минуты
	Минуты=Цел(Переработка_/60);
	Если Минуты>0 Тогда
		РезультатФункции=РезультатФункции+Минуты+" мин.";
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции // ПолучитьВремяПереработки()	

&НаСервереБезКонтекста
Функция ПолучитьДеньНедели(Дата)
	
	Д = ДеньНедели(Дата);	
	Если Д = 1 ТОГДА
		Возврат "ПОНЕДЕЛЬНИК";
	ИначеЕсли Д=2 ТОГДА
		Возврат "ВТОРНИК";
	ИначеЕсли Д=3 ТОГДА
		Возврат "СРЕДА";
	ИначеЕсли Д=4 ТОГДА
		Возврат "ЧЕТВЕРГ";
	ИначеЕсли Д=5 ТОГДА
		Возврат "ПЯТНИЦА";
	ИначеЕсли Д=6 ТОГДА
		Возврат "СУББОТА";
	ИначеЕсли Д=7 ТОГДА
		Возврат "ВОСКРЕСЕНЬЕ";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьДеньНедели()

&НаСервереБезКонтекста
Функция ПолучитьИмяКолонки(Дата)
	Возврат "Д_"+Формат(Дата, "ДФ=dd_MM_yyyy");	
КонецФункции // ПолучитьИмяКолонки()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ЭтаФорма.ВариантМодифицирован = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыборкаПерерывы(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсторияРаботниковОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ИсторияРаботниковОрганизацииСрезПоследних.Перерыв) КАК Перерыв
	|ПОМЕСТИТЬ ВТ_Перерывы
	|ИЗ
	|	РегистрСведений.ИсторияРаботниковОрганизации.СрезПоследних(&Период, ) КАК ИсторияРаботниковОрганизацииСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияРаботниковОрганизацииСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Перерывы.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ВТ_Перерывы.Перерыв.ВычитаетсяИзГрафика
	|			ТОГДА ВТ_Перерывы.Перерыв.ОбщееВремяВСекундах
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Перерыв
	|ИЗ
	|	ВТ_Перерывы КАК ВТ_Перерывы";
	Запрос.УстановитьПараметр("Период", Период);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции


