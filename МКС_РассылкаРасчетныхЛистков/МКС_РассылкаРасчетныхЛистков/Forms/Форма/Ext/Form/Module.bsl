&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Структура = Новый Структура("Организация");
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(Структура);
	
	Организация = Структура.Организация;
	ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	Ответственный = Пользователи.ТекущийПользователь();
	Вид = "Подробно";
	ЗаполнитьДеревоПодразделений();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПодразделений()
	
	Подразделения.ПолучитьЭлементы().Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
	|	ЛОЖЬ КАК ФлагВыбора
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Владелец
	|	И Не ПодразделенияОрганизаций.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодразделенияОрганизаций.Наименование ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	
	Выборка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Выборка, "Подразделения");
	
КонецПроцедуры // ЗаполнитьДеревоПодразделений()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьДеревоПодразделений();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыборкуЕмаилФизическихЛиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК ФизическоеЛицо,
	|	ФизическиеЛицаКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьЕмаилФизлица()

&НаСервере
Процедура ДобавитьСотрудниковПодразделения(ПодразделениеОрганизации)
	
	//запрос по ТекущиеКадровыеДанныеСотрудников стал  работать некорректно по причине отсутствия необходимых данных
	//Получим типовым способом работавших физлиц в подразделении
	//далее получим сотрудников с учетом того что в одном подразделении не может работать сотрудник и совместитель одного физлица
	СписокФизическихЛиц = КадровыйУчет.ФизическиеЛицаРаботавшиеВОрганизации(Истина, Организация, НачалоМесяца(ПериодРегистрации), КонецМесяца(ПериодРегистрации), ПодразделениеОрганизации); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	&Подразделение КАК Подразделение,
	|	МАКСИМУМ(КадроваяИсторияСотрудниковСрезПоследних.Сотрудник) КАК Сотрудник
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	|		ПО (КадроваяИсторияСотрудниковСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка)
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)
	|	И КадроваяИсторияСотрудниковСрезПоследних.Подразделение = &Подразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛица.Ссылка";
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ВыборкаЕмаилФизическихЛиц = ПолучитьВыборкуЕмаилФизическихЛиц();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаСпискаРассылки = СписокРассылки.Добавить();
		СтрокаСпискаРассылки.НомерСтроки = СписокРассылки.Количество();
		СтрокаСпискаРассылки.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
		СтрокаСпискаРассылки.Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
		ВыборкаЕмаилФизическихЛиц.Сбросить();
		Если ВыборкаЕмаилФизическихЛиц.НайтиСледующий(ВыборкаДетальныеЗаписи.ФизическоеЛицо, "ФизическоеЛицо") Тогда
			СтрокаСпискаРассылки.ЕмаилСотрудника = ВыборкаЕмаилФизическихЛиц.АдресЭП;
			СтрокаСпискаРассылки.Сформировать = Истина;
		Иначе
			СтрокаСпискаРассылки.ЕмаилСотрудника = "";
			СтрокаСпискаРассылки.Сформировать = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСотрудниковПодразделения()

&НаКлиенте
Процедура ОбойтиУровеньДерева(Строки, ВидОбхода)
	
	Для каждого Строка из Строки Цикл
		
		Если ВидОбхода = "ДобавитьСотрудниковПодразделения" Тогда
			Если Строка.ФлагВыбора Тогда
				ДобавитьСотрудниковПодразделения(Строка.Подразделение);
			КонецЕсли;
		ИначеЕсли ВидОбхода = "УстановитьФлажки" Тогда
			Строка.ФлагВыбора = Истина;
		ИначеЕсли ВидОбхода = "СнятьФлажки" Тогда
			Строка.ФлагВыбора = Ложь;
		ИначеЕсли ВидОбхода = "ИнвертироватьФлажки" Тогда
			Если Строка.ФлагВыбора Тогда
				Строка.ФлагВыбора = Ложь;
			Иначе
				Строка.ФлагВыбора = Истина;
			КонецЕсли;
		ИначеЕсли ВидОбхода = "СвернутьВсе" Тогда
			Элементы.Подразделения.Свернуть(Строка);
		ИначеЕсли ВидОбхода = "РазвернутьВсе" Тогда
			Элементы.Подразделения.Развернуть(Строка, Истина);
		КонецЕсли;
		ОбойтиУровеньДерева(Строка.ПолучитьЭлементы(), ВидОбхода);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуРассылки(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СписокРассылки.Очистить();
	ОбойтиУровеньДерева(Подразделения.ПолучитьЭлементы(), "ДобавитьСотрудниковПодразделения");
	СписокРассылки.Сортировать("Подразделение");
	
КонецПроцедуры // ЗаполнитьТаблицуРассылки()

&НаКлиенте
Процедура ПериодРегистрацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Значение = ПериодРегистрации;
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
	Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
	ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ПериодРегистрации = ВыбранноеЗначение;
	КонецЕсли;
	
	СписокРассылки.Очистить();
	ОбойтиУровеньДерева(Подразделения.ПолучитьЭлементы(), "ДобавитьСотрудниковПодразделения");
	СписокРассылки.Сортировать("Подразделение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияФлагВыбораПриИзменении(Элемент) 
	
	ВидОбхода = ?(ЭтаФорма.Элементы.Подразделения.ТекущиеДанные.ФлагВыбора, "УстановитьФлажки", "СнятьФлажки"); 
	ТекущаяВетка = ЭтаФорма.Элементы.Подразделения.ТекущиеДанные;
	ОбойтиУровеньДерева(ТекущаяВетка.ПолучитьЭлементы(), ВидОбхода);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПриАктивизацииСтроки(Элемент)
	
	//Если Элемент.ТекущаяСтрока <> Неопределено Тогда
	//	ТекущаяСтрока = Элементы.СписокРассылки.ТекущаяСтрока;
	//	ТекущиеДанные = СписокРассылки.НайтиПоИдентификатору(ТекущаяСтрока);
	//	АдресТекущегоСотрудника = ПолучитьЕмаилФизлица(ТекущиеДанные.Сотрудник);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьРасчетныйЛистокПоСотруднику(ФизическиеЛица, МесяцФормированияОтчета, Организация, Вид = "Подробно")
	
	Если ТипЗнч(ФизическиеЛица) = Тип("Массив")
		Или ТипЗнч(ФизическиеЛица) = Тип("ФиксированныйМассив") Тогда
		ФизическиеЛицаОтчета = ФизическиеЛица;
		ИмяФайла = ПолучитьСтрокуНаЛатинском(Строка(ФизическиеЛица));
	Иначе
		ФизическиеЛицаОтчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
		ИмяФайла = ПолучитьСтрокуНаЛатинском(ФизическиеЛица);
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	ДокументРезультат.ОтображатьСетку = Ложь;
	
	ОтчетАнализНачисленийИУдержаний = Отчеты.АнализНачисленийИУдержаний.Создать();
	ОтчетАнализНачисленийИУдержаний.ИнициализироватьОтчет();
	
	НастройкиОтчета = ОтчетАнализНачисленийИУдержаний.СхемаКомпоновкиДанных.ВариантыНастроек.РасчетныйЛисток.Настройки;
	
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьПоказателиНачисленийИУдержаний",(Вид = "Подробно"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьИнформациюОНачисленныхВзносахВПФР",(Вид = "Подробно"));
	
	ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	Отбор = ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки.Отбор;
	Отбор.Элементы.Очистить();
	
	СтандартныйПериод = Новый СтандартныйПериод;
	СтандартныйПериод.ДатаНачала    = НачалоМесяца(МесяцФормированияОтчета);
	СтандартныйПериод.ДатаОкончания = КонецМесяца(МесяцФормированияОтчета);
	
	ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Период", СтандартныйПериод);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Организация", ВидСравненияКомпоновкиДанных.Равно, Организация);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ФизическоеЛицо", ВидСравненияКомпоновкиДанных.ВСписке, ФизическиеЛицаОтчета);
	
	ОтчетАнализНачисленийИУдержаний.СкомпоноватьРезультат(ДокументРезультат);
	
	КаталогФайла = КаталогВременныхФайлов();
	
	ТекИмяФайла = КаталогФайла + ИмяФайла + ".pdf";
	ДокументРезультат.Записать(ТекИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	Возврат ТекИмяФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтрокуНаЛатинском(ИсходныйТекст)
	
	СоответствиеСимволов = Новый Соответствие;
	СоответствиеСимволов.Вставить("А", "A");
	СоответствиеСимволов.Вставить("Б", "B");
	СоответствиеСимволов.Вставить("В", "V");
	СоответствиеСимволов.Вставить("Г", "G");
	СоответствиеСимволов.Вставить("Д", "D");
	СоответствиеСимволов.Вставить("Е", "E");
	СоответствиеСимволов.Вставить("Ё", "E");
	СоответствиеСимволов.Вставить("Ж", "ZH");
	СоответствиеСимволов.Вставить("З", "Z");
	СоответствиеСимволов.Вставить("И", "I");
	СоответствиеСимволов.Вставить("Й", "Y");
	СоответствиеСимволов.Вставить("К", "K");
	СоответствиеСимволов.Вставить("Л", "L");
	СоответствиеСимволов.Вставить("М", "M");
	СоответствиеСимволов.Вставить("Н", "N");
	СоответствиеСимволов.Вставить("О", "O");
	СоответствиеСимволов.Вставить("П", "P");
	СоответствиеСимволов.Вставить("Р", "R");
	СоответствиеСимволов.Вставить("С", "S");
	СоответствиеСимволов.Вставить("Т", "T");
	СоответствиеСимволов.Вставить("У", "U");
	СоответствиеСимволов.Вставить("Ф", "F");
	СоответствиеСимволов.Вставить("Х", "KH");
	СоответствиеСимволов.Вставить("Ц", "TS");
	СоответствиеСимволов.Вставить("Ч", "CH");
	СоответствиеСимволов.Вставить("Ш", "SH");
	СоответствиеСимволов.Вставить("Щ", "SHCH");
	СоответствиеСимволов.Вставить("Ъ", "");
	СоответствиеСимволов.Вставить("Ы", "Y");
	СоответствиеСимволов.Вставить("Ь", "");
	СоответствиеСимволов.Вставить("Э", "E");
	СоответствиеСимволов.Вставить("Ю", "YU");
	СоответствиеСимволов.Вставить("Я", "YA");
	СоответствиеСимволов.Вставить("а", "a");
	СоответствиеСимволов.Вставить("б", "b");
	СоответствиеСимволов.Вставить("в", "v");
	СоответствиеСимволов.Вставить("г", "g");
	СоответствиеСимволов.Вставить("д", "d");
	СоответствиеСимволов.Вставить("е", "e");
	СоответствиеСимволов.Вставить("ё", "e");
	СоответствиеСимволов.Вставить("ж", "zh");
	СоответствиеСимволов.Вставить("з", "z");
	СоответствиеСимволов.Вставить("и", "i");
	СоответствиеСимволов.Вставить("й", "y");
	СоответствиеСимволов.Вставить("к", "k");
	СоответствиеСимволов.Вставить("л", "l");
	СоответствиеСимволов.Вставить("м", "m");
	СоответствиеСимволов.Вставить("н", "n");
	СоответствиеСимволов.Вставить("о", "o");
	СоответствиеСимволов.Вставить("п", "p");
	СоответствиеСимволов.Вставить("р", "r");
	СоответствиеСимволов.Вставить("с", "s");
	СоответствиеСимволов.Вставить("т", "t");
	СоответствиеСимволов.Вставить("у", "u");
	СоответствиеСимволов.Вставить("ф", "f");
	СоответствиеСимволов.Вставить("х", "kh");
	СоответствиеСимволов.Вставить("ц", "ts");
	СоответствиеСимволов.Вставить("ч", "ch");
	СоответствиеСимволов.Вставить("ш", "sh");
	СоответствиеСимволов.Вставить("щ", "shch");
	СоответствиеСимволов.Вставить("ъ", "");
	СоответствиеСимволов.Вставить("ы", "y");
	СоответствиеСимволов.Вставить("ь", "");
	СоответствиеСимволов.Вставить("э", "e");
	СоответствиеСимволов.Вставить("ю", "yu");
	СоответствиеСимволов.Вставить("я", "ya");
	
	//ИсходныйТекст = СокрЛП(ВРег(ИсходныйТекст));
	ГотовоеЗначение = "";
	ТекущийСимвол = "";
	ТекущийГотовыйСимвол = "";
	Для к = 1 по СтрДлина(ИсходныйТекст) Цикл
		ТекущийСимвол = Сред(ИсходныйТекст, к, 1);
		ТекущийГотовыйСимвол = СоответствиеСимволов.Получить(ТекущийСимвол);
		Если ТекущийГотовыйСимвол = Неопределено Тогда
			ГотовоеЗначение = ГотовоеЗначение + ТекущийСимвол;
		Иначе
			ГотовоеЗначение = ГотовоеЗначение + ТекущийГотовыйСимвол;
		КонецЕсли;
		
	КонецЦикла;
	Возврат ГотовоеЗначение;
	
КонецФункции 

&НаКлиенте
Процедура СформироватьФайлы(Команда)
	
	СформироватьФайлыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьФайлыНаСервере()
	
	Для Каждого СтрокаОтправки Из СписокРассылки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОтправки.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаОтправки.Сформировать Тогда
			СтрокаОтправки.ФайлКОтправке = СформироватьФайлКОтправке(Организация, СтрокаОтправки.Сотрудник.ФизическоеЛицо, ПериодРегистрации, Вид);
			СтрокаОтправки.ФайлКОтправкеПредставление = Символ(60);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьФайлКОтправке(Организация, ФизическиеЛица, ПериодРегистрации, Вид)
	
	ИмяАрхива = СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(Формат(ТекущаяДата(), "ДФ='dd.MM.yy hh:mm:ss'")), ".", ""), ":", ""), " ", "") + ".zip";
	ИмяАрхиваПолное = КаталогВременныхФайлов() + ИмяАрхива;
	АрхивФайлов = Новый ЗаписьZipФайла(ИмяАрхиваПолное, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Оптимальный, МетодШифрованияZIP.AES128);
	
	ТекИмяФайла = СоздатьРасчетныйЛистокПоСотруднику(ФизическиеЛица, ПериодРегистрации, Организация, Вид);
	АрхивФайлов.Добавить(ТекИмяФайла, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
	
	АрхивФайлов.Записать();
	
	СтруктураФайла = Новый Структура("ХранилищеФайла, ИмяАрхива");
	СтруктураФайла.ХранилищеФайла = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяАрхиваПолное));
	СтруктураФайла.ИмяАрхива = ИмяАрхива;
	
	Возврат СтруктураФайла;
	
КонецФункции // ВыполнитьОтправку()

&НаСервере
Функция ПолучитьДвоичныеДанныеНаСервере(ИдСтроки)
	
	СписокРассылкиСтрока = СписокРассылки.НайтиПоИдентификатору(Элементы.СписокРассылки.ТекущаяСтрока);
	
	Если НЕ СписокРассылкиСтрока.ФайлКОтправкеПредставление = Символ(60) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеЗначения = СписокРассылкиСтрока.ФайлКОтправке.ХранилищеФайла;
	ДвоичныеДанные = ХранилищеЗначения.Получить();
	
	Возврат ДвоичныеДанные;
	
КонецФункции

&НаКлиенте
Процедура СнятьОтметки(Команда)
	
	Для Каждого Строка из СписокРассылки Цикл
		Строка.Сформировать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметки(Команда)
	
	Для Каждого Строка из СписокРассылки Цикл
		Строка.Сформировать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиФайлКОтправкеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеНаСервере(Элементы.СписокРассылки.ТекущаяСтрока);
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяФайла);
	ЗапуститьПриложение(ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	УдалитьФайлы(КаталогВременныхФайлов,"*.zip");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОтправкуНаСервере()
	
	ОсновнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ОсновнаяУчетнаяЗапись);
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(Профиль);
	Исключение
		Результат = "Не удалось подключить профиль электронной почты.";
	КонецПопытки;
	
	Если Лев(СокрЛП(ОсновнаяУчетнаяЗапись),18) = "<Объект не найден>" Тогда
		Сообщить("Нет доступа к учетной записи электронной почты.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОтправки Из СписокРассылки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОтправки.Сотрудник) ИЛИ СтрокаОтправки.ФайлКОтправкеПредставление <> Символ(60) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаОтправки.Сформировать Тогда
			РезультатОтправки = ОтправитьПисьмо(Почта, СтрокаОтправки, ПериодРегистрации, Организация, Ответственный);
			Если РезультатОтправки = Истина Тогда
				Сообщить("Отправлено сотруднику: " + СтрокаОтправки.Сотрудник, СтатусСообщения.Информация);
				СтрокаОтправки.Отправкавыполнена = Истина;
			Иначе
				Сообщить("Не удалось отправить сотруднику: " + СтрокаОтправки.Сотрудник + " по причине " + РезультатОтправки, СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		Почта.Отключиться();
	Исключение
		Результат = "Не удалось отключиться от электронной почты.";
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьПисьмо(Почта, СтрокаОтправки, ПериодРегистрации, Организация, Ответственный)
	
	Результат = Истина;
	
	ФизическоеЛицо = СтрокаОтправки.Сотрудник.ФизическоеЛицо;
	Емаил = СтрокаОтправки.ЕмаилСотрудника;
	
	Если Не ЗначениеЗаполнено(Емаил) Тогда
		Возврат " не указан адрес получателя.";
	КонецЕсли;	
	
	ТелоПисьма = "";
	ТемаПисьма = "Расчетный листок за " + Формат(ПериодРегистрации, "ДФ='ММММ гггг'");
	ТелоПисьма = ТелоПисьма + "<p>Во вложении расчетный листок сотрудника:<br />" + ФизическоеЛицо + "</p>";
	ТелоПисьма = ТелоПисьма + "<p>Ответственный: " + Ответственный + " </p>";
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	Сообщение.Отправитель = "1c@sogaz-clinic.ru";
	Сообщение.ИмяОтправителя = "1С:Предприятие";
	Сообщение.Получатели.Добавить(Емаил);
	Сообщение.Тема = ТемаПисьма;
	Сообщение.Тексты.Добавить(ТелоПисьма + "<p>"+Организация.НаименованиеПолное+"</p>", ТипТекстаПочтовогоСообщения.HTML);
	Сообщение.Вложения.Добавить(СтрокаОтправки.ФайлКОтправке.ХранилищеФайла.Получить(), СтрокаОтправки.ФайлКОтправке.ИмяАрхива);

	Попытка
		РезультатОтправки = Почта.Послать(Сообщение);
	Исключение
		Результат = "Не удалось отправить сообщение электронной почты." + ИнформацияОбОшибке();
	КонецПопытки;
	Сообщение.Вложения.Очистить();
	
	Возврат Результат;
	
КонецФункции // ВыполнитьОтправку()

&НаКлиенте
Процедура ВыполнитьОтправку(Команда)
	ВыполнитьОтправкуНаСервере();
КонецПроцедуры
