
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Информация = Метаданные().Представление();
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
	ПараметрыРегистрации.Версия = "1.0";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	ПараметрыРегистрации.Назначение.Добавить("Документ.ВедомостьНаВыплатуЗарплатыВБанк");
		
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = Метаданные().Синоним;
	Команда.Идентификатор = Метаданные().Имя;
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции


Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, ЭтотОбъект.Метаданные().Имя);
	
	Если ПечатнаяФорма <> Неопределено Тогда
		ТабличныйДокумент = ПечатьСписокПеречислений(
			МассивОбъектов,
			ОбъектыПечати,
			ДанныеВедомостиНаВыплатуЗарплатыВБанк(МассивОбъектов, , , Ложь));
			
		ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
	КонецЕсли;
	
КонецПроцедуры


Функция ПечатьСписокПеречислений(МассивОбъектов, ОбъектыПечати, ДанныеДляПечати)
		
	ПутьКМакету = "ОбщийМакет.ПФ_MXL_СписокПеречисленийНаЛицевыеСчета";
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВедомостьНаВыплатуЗарплатыВБанк_СписокПеречислений";
	
	// Бадеев Е.А. #TSK-19005739 +
	//Макет = УправлениеПечатью.МакетПечатнойФормы(ПутьКМакету);
	Макет = ПолучитьМакет("ПФ_MXL_СписокПеречисленийНаЛицевыеСчета");
	// Бадеев Е.А. #TSK-19005739 -

	ДанныеПечати = УправлениеПечатьюБЗК.ПараметрыОбластейСтандартногоМакета(ПутьКМакету);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеДокументаДляПечати Из ДанныеДляПечати Цикл
		
		ДанныеДокумента = ДанныеДокументаДляПечати.Значение;
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подсчитываем количество страниц документа - для корректного разбиения на страницы.
		ВсегоСтрокДокумента = ДанныеДокумента.Сотрудники.Количество();
		
		ОбластьМакетаШапкаДокумента  = Макет.ПолучитьОбласть("ШапкаДокумента");
		ОбластьМакетаШапка           = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогПоСтранице  = Макет.ПолучитьОбласть("ИтогПоЛисту");
		ОбластьМакетаПодвалДокумента = Макет.ПолучитьОбласть("Подвал");
		
		// Массив с двумя строками - для разбиения на страницы.
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
		ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
		
		// выводим данные о документе
		ДанныеПечати.ШапкаДокумента.Дата = Формат(ДанныеДокумента.ДатаДокумента, "ДЛФ=D");
		ДанныеПечати.ШапкаДокумента.Организация = СокрЛП(ДанныеДокумента.ПолноеНаименованиеОрганизации);
		ОбластьМакетаШапкаДокумента.Параметры.Заполнить(ДанныеПечати.ШапкаДокумента);
		
		// Бадеев Е.А. #TSK-19005739 +
		ОбластьМакетаШапкаДокумента.Параметры.ВидВыплаты = ДанныеДокумента.Документ.СпособВыплаты;
		ОбластьМакетаШапкаДокумента.Параметры.ЗарплатныйПроект = ДанныеДокумента.Документ.ЗарплатныйПроект;
		// Бадеев Е.А. #TSK-19005739 -
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапкаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; Итого = 0;
		
		// Выводим данные по строкам документа.
		Для Каждого ДанныеДляПечатиСтроки Из ДанныеДокумента.Сотрудники Цикл
			
			ДанныеПечати.Строка.НомерСтроки = ДанныеДляПечатиСтроки.НомерСтроки;
			ДанныеПечати.Строка.НомерЛицевогоСчета = ДанныеДляПечатиСтроки.НомерЛицевогоСчета;
			ДанныеПечати.Строка.Физлицо = 
				СтрШаблон(
					НСтр("ru = '%1 %2 %3'"), 
					ДанныеДляПечатиСтроки.Фамилия, 
					ДанныеДляПечатиСтроки.Имя, 
					ДанныеДляПечатиСтроки.Отчество);
			ДанныеПечати.Строка.Сумма = ДанныеДляПечатиСтроки.СуммаКВыплате;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеПечати.Строка);
			
			// разбиение на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу.
			ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьМакетаПодвалДокумента);
				ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				
				ОбщегоНазначенияБЗККлиентСервер.УстановитьЗначениеСвойства(
					ОбластьМакетаИтогПоСтранице.Параметры, "ИтогоНаСтранице", ИтогоНаСтранице); 
				
				ТабличныйДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
				
				ВыведеноСтраниц = ВыведеноСтраниц + 1;
				ИтогоНаСтранице = 0;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			ИтогоНаСтранице = ИтогоНаСтранице + ДанныеДляПечатиСтроки.СуммаКВыплате;
			Итого = Итого + ДанныеДляПечатиСтроки.СуммаКВыплате;
			
		КонецЦикла;
		
		Если ВыведеноСтрок > 0 Тогда 
			ОбщегоНазначенияБЗККлиентСервер.УстановитьЗначениеСвойства(
				ОбластьМакетаИтогПоСтранице.Параметры, "ИтогоНаСтранице", ИтогоНаСтранице); 
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеПечати.Подвал, ДанныеДокумента);
		ДанныеПечати.Подвал.Итого = Итого;
		ОбластьМакетаПодвалДокумента.Параметры.Заполнить(ДанныеПечати.Подвал);
		
		// Бадеев Е.А. #TSK-19005739 +
		ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		ОбластьМакетаСтрока.Параметры.Физлицо = ДанныеДокумента.Документ.Подразделение;
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		
		ОбластьМакетаСтрока.Параметры.НомерЛицевогоСчета = Формат(ДанныеДокумента.Документ.ПериодРегистрации, "ДФ=ММММ");
		ОбластьМакетаСтрока.Параметры.Физлицо = "НДФЛ ("+ДанныеДокумента.Документ.Подразделение.РегистрацияВНалоговомОргане+")";
		ОбластьМакетаСтрока.Параметры.Сумма = ДанныеДокумента.Документ.НДФЛ.Итог("Сумма");
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		// Бадеев Е.А. #TSK-19005739 -
		
		// дополняем пустыми строками до конца страницы
		ОбщегоНазначенияБЗК.ОчиститьПараметрыТабличногоДокумента(ОбластьМакетаСтрока);
		ОбластиКонцаСтраницы = Новый Массив();
		ОбластиКонцаСтраницы.Добавить(ОбластьМакетаИтогПоСтранице);
		ОбластиКонцаСтраницы.Добавить(ОбластьМакетаПодвалДокумента);
		ОбщегоНазначенияБЗК.ДополнитьСтраницуТабличногоДокумента(ТабличныйДокумент, ОбластьМакетаСтрока, ОбластиКонцаСтраницы);  
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвалДокумента);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.Документ);
		
	КонецЦикла; // по документам
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеВедомостиНаВыплатуЗарплатыВБанк(МассивДокументов, ДатаПолученияДанных = Неопределено, ПлатежныйДокумент = Неопределено, ТолькоПроведенные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	Запрос.УстановитьПараметр("ТолькоПроведенные", ТолькоПроведенные);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ведомость.Ссылка КАК Документ,
	|	Ведомость.Номер КАК НомерДокумента,
	|	Ведомость.НомерРеестра КАК НомерРеестра,
	|	Ведомость.Дата КАК ДатаДокумента,
	|	Ведомость.Организация,
	|	ВЫБОР
	|		КОГДА &ДатаПолученияДанных = НЕОПРЕДЕЛЕНО
	|			ТОГДА Ведомость.Дата
	|		ИНАЧЕ &ДатаПолученияДанных
	|	КОНЕЦ КАК Период,
	|	ВедомостьСостав.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьСостав.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	МИНИМУМ(ВедомостьСостав.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ВедомостьЗарплата.КВыплате) КАК СуммаКВыплате,
	|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
	|	ЗарплатныеПроекты.ФилиалОтделенияБанка КАК ФилиалОтделенияБанка,
	|	ЗарплатныеПроекты.Валюта.Код КАК КодВалюты
	|ПОМЕСТИТЬ ВТСписокФизическихЛиц
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьЗарплата
	|		ПО Ведомость.Ссылка = ВедомостьЗарплата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Состав КАК ВедомостьСостав
	|		ПО (ВедомостьЗарплата.Ссылка = ВедомостьСостав.Ссылка)
	|			И (ВедомостьЗарплата.ИдентификаторСтроки = ВедомостьСостав.ИдентификаторСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО Ведомость.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТолькоПроведенные
	|				ТОГДА Ведомость.Проведен
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И Ведомость.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Ведомость.Ссылка,
	|	Ведомость.Номер,
	|	Ведомость.Дата,
	|	Ведомость.Организация,
	|	ВЫБОР
	|		КОГДА &ДатаПолученияДанных = НЕОПРЕДЕЛЕНО
	|			ТОГДА Ведомость.Дата
	|		ИНАЧЕ &ДатаПолученияДанных
	|	КОНЕЦ,
	|	ВедомостьСостав.ФизическоеЛицо,
	|	ВедомостьСостав.НомерЛицевогоСчета,
	|	ЗарплатныеПроекты.ОтделениеБанка,
	|	ЗарплатныеПроекты.ФилиалОтделенияБанка,
	|	ЗарплатныеПроекты.Валюта.Код";
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, "ВТСписокФизическихЛиц");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "Фамилия,Имя,Отчество");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокФизическихЛиц.Документ,
	|	СписокФизическихЛиц.НомерДокумента,
	|	СписокФизическихЛиц.НомерРеестра,
	|	СписокФизическихЛиц.ДатаДокумента,
	|	СписокФизическихЛиц.Организация,
	|	СписокФизическихЛиц.ФизическоеЛицо,
	|	СписокФизическихЛиц.НомерСтроки,
	|	КадровыеДанныеФизическихЛиц.Фамилия КАК Фамилия,
	|	КадровыеДанныеФизическихЛиц.Имя КАК Имя,
	|	КадровыеДанныеФизическихЛиц.Отчество КАК Отчество,
	|	СписокФизическихЛиц.НомерЛицевогоСчета,
	|	СписокФизическихЛиц.СуммаКВыплате,
	|	СписокФизическихЛиц.ОтделениеБанка,
	|	СписокФизическихЛиц.ФилиалОтделенияБанка,
	|	СписокФизическихЛиц.КодВалюты
	|ПОМЕСТИТЬ ВТДанныеСтрокДокументов
	|ИЗ
	|	ВТСписокФизическихЛиц КАК СписокФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|		ПО СписокФизическихЛиц.ФизическоеЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
	|			И СписокФизическихЛиц.Период = КадровыеДанныеФизическихЛиц.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Номер КАК НомерДокумента,
	|	ВедомостьНаВыплатуЗарплатыВБанк.НомерРеестра КАК НомерРеестра,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Дата КАК Дата,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ПериодРегистрации КАК ПериодРегистрации,
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеОрганизации,
	|	Организации.ИНН КАК ИННОрганизации,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	ЗарплатныеПроекты.Ссылка КАК ЗарплатныйПроект,
	|	ЗарплатныеПроекты.НомерДоговора КАК НомерДоговора,
	|	ЗарплатныеПроекты.ДатаДоговора КАК ДатаДоговора,
	|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
	|	ЕСТЬNULL(ЗарплатныеПроекты.ИспользоватьЭлектронныйДокументооборотСБанком, ЛОЖЬ) КАК ИспользоватьЭлектронныйДокументооборотСБанком,
	|	КлассификаторБанков.Код КАК БИКБанка,
	|	ЗарплатныеПроекты.РасчетныйСчет КАК НомерРасчетногоСчетаОрганизации,
	|	ЗарплатныеПроекты.ФорматФайла КАК ФорматФайла,
	|	ЗарплатныеПроекты.КодировкаФайла КАК КодировкаФайла,
	|	ИтоговыеДанныеПоВедомости.КоличествоЗаписей,
	|	ИтоговыеДанныеПоВедомости.СуммаИтого,
	|	ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу КАК СуммаПоДокументу,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Руководитель,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО (ЗарплатныеПроекты.Банк = КлассификаторБанков.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДанныеВедомостейДляОплатыЧерезБанк.Ссылка КАК Ведомость,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостейДляОплатыЧерезБанк.Сотрудник.ФизическоеЛицо) КАК КоличествоЗаписей,
	|			СУММА(ДанныеВедомостейДляОплатыЧерезБанк.КВыплате + ДанныеВедомостейДляОплатыЧерезБанк.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаИтого
	|		ИЗ
	|			Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ДанныеВедомостейДляОплатыЧерезБанк
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДанныеВедомостейДляОплатыЧерезБанк.Ссылка) КАК ИтоговыеДанныеПоВедомости
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ИтоговыеДанныеПоВедомости.Ведомость
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТолькоПроведенные
	|				ТОГДА ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В(&МассивДокументов)";
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	
	// + Граховский К.Н. 2018.03.13 обновление 
	// Байдин проконтролировать при обновлении!! 2017-11-10
	//ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	// - Граховский К.Н. 2018.03.13 обновление
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Документ,
	|	ДанныеДокументов.НомерДокумента,
	|	ДанныеДокументов.НомерРеестра,
	|	ДанныеДокументов.Дата КАК ДатаДокумента,
	|	ДанныеДокументов.ПериодРегистрации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ПолноеНаименованиеОрганизации,
	|	ДанныеДокументов.ИННОрганизации,
	|	ДанныеДокументов.КодПоОКПО,
	|	ДанныеДокументов.ЗарплатныйПроект,
	|	ДанныеДокументов.НомерДоговора,
	|	ДанныеДокументов.ДатаДоговора,
	|	ДанныеДокументов.ОтделениеБанка,
	|	ДанныеДокументов.ИспользоватьЭлектронныйДокументооборотСБанком,
	|	ДанныеДокументов.БИКБанка,
	|	ДанныеДокументов.НомерРасчетногоСчетаОрганизации,
	|	ДанныеДокументов.ФорматФайла,
	|	ДанныеДокументов.КодировкаФайла,
	|	ДанныеДокументов.КоличествоЗаписей,
	|	ДанныеДокументов.СуммаИтого,
	|	ДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ВТФИОГлавБухПоследние.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ВТФИОРуководителейПоследние.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ВТФИОБухгалтерПоследние.РасшифровкаПодписи, """") КАК Бухгалтер
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОРуководителейПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОРуководителейПоследние.Ссылка
	|			И ДанныеДокументов.Руководитель = ВТФИОРуководителейПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОГлавБухПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОГлавБухПоследние.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ВТФИОГлавБухПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОБухгалтерПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОБухгалтерПоследние.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ВТФИОБухгалтерПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Организация,
	|	НАЧАЛОПЕРИОДА(ДанныеДокументов.Дата, ГОД),
	|	ДанныеДокументов.НомерДокумента,
	|	ДанныеДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСтрокДокументов.Документ,
	|	ДанныеСтрокДокументов.НомерДокумента,
	|	ДанныеСтрокДокументов.НомерРеестра,
	|	ДанныеСтрокДокументов.ДатаДокумента,
	|	ДанныеСтрокДокументов.Организация,
	|	ДанныеСтрокДокументов.ФизическоеЛицо,
	|	ДанныеСтрокДокументов.Фамилия,
	|	ДанныеСтрокДокументов.Имя,
	|	ДанныеСтрокДокументов.Отчество,
	|	ДанныеСтрокДокументов.НомерЛицевогоСчета,
	|	ДанныеСтрокДокументов.СуммаКВыплате,
	|	ДанныеСтрокДокументов.ОтделениеБанка,
	|	ДанныеСтрокДокументов.ФилиалОтделенияБанка,
	|	ДанныеСтрокДокументов.КодВалюты
	|ИЗ
	|	ВТДанныеСтрокДокументов КАК ДанныеСтрокДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеСтрокДокументов.Организация,
	|	НАЧАЛОПЕРИОДА(ДанныеСтрокДокументов.ДатаДокумента, ГОД),
	|	ДанныеСтрокДокументов.НомерДокумента,
	|	ДанныеСтрокДокументов.Документ,
	|	ДанныеСтрокДокументов.НомерСтроки";
	
	РеквизитыПлатежногоДокумента = Неопределено;
	Если ПлатежныйДокумент <> Неопределено Тогда 
		
		РеквизитыПлатежногоДокумента = Новый Структура;
		РеквизитыПлатежногоДокумента.Вставить("ПлатежныйДокумент", ПлатежныйДокумент);
		РеквизитыПлатежногоДокумента.Вставить("Номер",             "");     
		РеквизитыПлатежногоДокумента.Вставить("Дата",              Дата("00010101")); 
		РеквизитыПлатежногоДокумента.Вставить("Организация",       Неопределено);
		
		Выборка = 
			РегистрыСведений.РеквизитыПлатежныхДокументовПеречисленияЗарплаты.Выбрать(
				Новый Структура("ПлатежныйДокумент", ПлатежныйДокумент));
		
		Если Выборка.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(РеквизитыПлатежногоДокумента, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	ГодыВыгрузки = Новый Массив;
	СоответствиеДокументов = Новый Соответствие;
	Если РеквизитыПлатежногоДокумента <> Неопределено Тогда 
		ГодыВыгрузки.Добавить(Год(РеквизитыПлатежногоДокумента.Дата));
	КонецЕсли;
	Для Каждого ДокументСсылка Из МассивДокументов Цикл 
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, Номер, Организация, НомерРеестра");
		Если РеквизитыПлатежногоДокумента = Неопределено Тогда 
			ГодВыгрузки = Год(ДанныеДокумента.Дата);
			Если ГодыВыгрузки.Найти(ГодВыгрузки) = Неопределено Тогда 
				ГодыВыгрузки.Добавить(ГодВыгрузки);
			КонецЕсли;
		КонецЕсли;
		СоответствиеДокументов.Вставить(ДокументСсылка, ДанныеДокумента);
	КонецЦикла;
	НомераРеестров = ОбменСБанкамиПоЗарплатнымПроектам.НомераРеестровДокументов(СоответствиеДокументов, ГодыВыгрузки, РеквизитыПлатежногоДокумента);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	КоличествоЗаписей = 0;
	СуммаИтого = 0;
	ДанныеДокументов = Новый Соответствие;
	ВыборкаДокументов = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выбрать();
	ВыборкаСтрокДокументов = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДанныеДокумента = Документы.ВедомостьНаВыплатуЗарплатыВБанк.ДанныеЗаполненияВедомости();
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаДокументов);
		
		КоличествоЗаписей = КоличествоЗаписей + ВыборкаДокументов.КоличествоЗаписей;
		СуммаИтого = СуммаИтого + ВыборкаДокументов.СуммаИтого;
		
		ДанныеДокумента.ДатаФормирования = ?(ДатаПолученияДанных = Неопределено, ДанныеДокумента.ДатаДокумента, ДатаПолученияДанных);
		Если ПлатежныйДокумент <> Неопределено Тогда
			ДанныеДокумента.ИдПервичногоДокумента = ПлатежныйДокумент.УникальныйИдентификатор();
			ДанныеДокумента.НомерПлатежногоПоручения = Прав(РеквизитыПлатежногоДокумента.Номер, 6);
			ДанныеДокумента.ДатаПлатежногоПоручения = РеквизитыПлатежногоДокумента.Дата;
			ДанныеДокумента.ДатаДокумента = РеквизитыПлатежногоДокумента.Дата;
			ДанныеДокумента.КоличествоЗаписей = КоличествоЗаписей;
			ДанныеДокумента.СуммаИтого = СуммаИтого;
			ДанныеДокумента.ДанныеРеестра = НомераРеестров[ПлатежныйДокумент];
			НомерРеестра = СтрЗаменить(ДанныеДокумента.ДанныеРеестра.НомерРеестра, Символы.НПП, "");
			ДанныеДокумента.НомерРеестра = НомерРеестра;
			НомерРеестра = Прав(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерРеестра, 3), 3);
			ДанныеДокумента.ИмяФайла = ОбменСБанкамиПоЗарплатнымПроектам.ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(ПлатежныйДокумент, ДанныеДокумента.ОтделениеБанка, НомерРеестра, "z");
		Иначе
			ДанныеДокумента.ИдПервичногоДокумента = ДанныеДокумента.Документ.УникальныйИдентификатор();
			ДанныеДокумента.ДанныеРеестра = НомераРеестров[ДанныеДокумента.Документ];
			НомерРеестра = СтрЗаменить(ДанныеДокумента.ДанныеРеестра.НомерРеестра, Символы.НПП, "");
			ДанныеДокумента.НомерРеестра = НомерРеестра;
			НомерРеестра = Прав(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерРеестра, 3), 3);
			НомерРеестра = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерРеестра, 3);
			ДанныеДокумента.ИмяФайла = ОбменСБанкамиПоЗарплатнымПроектам.ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(ДанныеДокумента.Документ, ДанныеДокумента.ОтделениеБанка, НомерРеестра, "z");
		КонецЕсли;
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ЗаполнитьДанныеОплатыВедомостей(
			ДанныеДокумента.Документ, ДанныеДокумента.НомерПлатежногоПоручения, ДанныеДокумента.ДатаПлатежногоПоручения, ПлатежныйДокумент);
		
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеШапкиДокументаДляПолученияТекстаФайла(
			ДанныеДокумента, ДанныеДокумента.Документ, ?(ДатаПолученияДанных = Неопределено, ДанныеДокумента.ДатаДокумента, ДатаПолученияДанных));
		
		ВыборкаСтрокДокументов.Сбросить();
		Пока ВыборкаСтрокДокументов.НайтиСледующий(ВыборкаДокументов.Документ, "Документ") Цикл
			ДанныеСтрокиДокумента = Документы.ВедомостьНаВыплатуЗарплатыВБанк.ДанныеЗаполненияСтрокиВедомости();
			ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ДополнитьКолонкиДанныхСтрокДокументов(ДанныеСтрокиДокумента);
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиДокумента, ВыборкаСтрокДокументов);
			
			ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ЗаполнитьКолонкиДанныхСтрокДокумента(ДанныеСтрокиДокумента);
			ДанныеДокумента.Сотрудники.Добавить(ДанныеСтрокиДокумента);
			ДанныеДокумента.Сотрудники[ДанныеДокумента.Сотрудники.Количество()-1].НомерСтроки = ДанныеДокумента.Сотрудники.Количество();
			Если ДанныеДокумента.ИспользоватьЭлектронныйДокументооборотСБанком И СтрДлина(ДанныеСтрокиДокумента.НомерЛицевогоСчета) <> 20 Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='По ведомости в банк №%1 от %2г. в строке №%3 у сотрудника %4 лицевой счет менее 20 цифр.
							|Если номер действительно не удовлетворяет этому требованию, возможно,
							|банк не поддерживает обмен по типовому стандарту - следует обратиться в банк'"), 
						ДанныеДокумента.НомерДокумента, 
						Формат(ДанныеДокумента.ДатаДокумента, "ДЛФ=D"),
						ДанныеСтрокиДокумента.НомерСтроки,
						ДанныеСтрокиДокумента.ФизическоеЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, ДанныеДокумента.Документ,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Состав[%1].%2'"),
						ДанныеСтрокиДокумента.НомерСтроки-1,
						"НомерЛицевогоСчета"));
			КонецЕсли;
		КонецЦикла;
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеСтрокДокументовДляПолученияТекстаФайла(
			ДанныеДокумента, 
			?(ДатаПолученияДанных = Неопределено, ДанныеДокумента.ДатаДокумента, ДатаПолученияДанных));
		
		Если ПлатежныйДокумент <> Неопределено Тогда
			ДанныеДокумента.Документ = ПлатежныйДокумент;
			ДанныеПлатежногоДокумента = ДанныеДокументов.Получить(ПлатежныйДокумент);
			Если ДанныеПлатежногоДокумента <> Неопределено Тогда
				Для Каждого СтруктураСтроки Из ДанныеПлатежногоДокумента.Сотрудники Цикл
					НайденнаяСтрокаПоФизическомуЛицу = Неопределено;
					Для каждого СтруктураСтрокиДокумента Из ДанныеДокумента.Сотрудники Цикл
						Если СтруктураСтрокиДокумента.ФизическоеЛицо = СтруктураСтроки.ФизическоеЛицо
							И СтруктураСтрокиДокумента.НомерЛицевогоСчета = СтруктураСтроки.НомерЛицевогоСчета Тогда
							НайденнаяСтрокаПоФизическомуЛицу = СтруктураСтрокиДокумента;
							Прервать;
						КонецЕсли
					КонецЦикла;
					Если НайденнаяСтрокаПоФизическомуЛицу = Неопределено Тогда
						ДанныеДокумента.Сотрудники.Добавить(СтруктураСтроки);
						ДанныеДокумента.Сотрудники[ДанныеДокумента.Сотрудники.Количество()-1].НомерСтроки = ДанныеДокумента.Сотрудники.Количество();
					Иначе
						НайденнаяСтрокаПоФизическомуЛицу.СуммаКВыплате = НайденнаяСтрокаПоФизическомуЛицу.СуммаКВыплате + СтруктураСтроки.СуммаКВыплате;
					КонецЕсли;
				КонецЦикла;
				ДанныеДокумента.КоличествоЗаписей = ДанныеДокумента.Сотрудники.Количество();
			КонецЕсли;
		КонецЕсли;
		ДанныеДокументов.Вставить(ДанныеДокумента.Документ, ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции