
#Область СохранениеНастроек

&НаСервере
Функция ВернутьНастройки()
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	СтруктураСохранения = Новый Структура;
	
	СтруктураСохранения.Вставить("ОбслуживаемыеБазы", ОбслуживаемыеБазы.Выгрузить());
	СтруктураСохранения.Вставить("Обновления", Обновления.Выгрузить());
	СтруктураСохранения.Вставить("ПараметрыОбновления", ПараметрыОбновлений.Выгрузить());
	СтруктураСохранения.Вставить("ИнформационныеБазы", ИнформационныеБазы.Выгрузить());
	СтруктураСохранения.Вставить("КластерыСерверов1С", КластерыСерверов1С.Выгрузить());
	СтруктураСохранения.Вставить("СерверыСУБД", СерверыСУБД.Выгрузить());
	СтруктураСохранения.Вставить("Пользователи", Пользователи.Выгрузить());
	
	Если ЗначениеВФайл(ИмяВременногоФайла, СтруктураСохранения) Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	Адрес = ВернутьНастройки();
	ПолучитьФайл(Адрес,"*.txt");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлНаСервере(Адрес)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	СтруктураСохранения = ЗначениеИзФайла(ИмяВременногоФайла);
	
	ОбслуживаемыеБазы.Загрузить(СтруктураСохранения.ОбслуживаемыеБазы);
	Обновления.Загрузить(СтруктураСохранения.Обновления);
	ПараметрыОбновлений.Загрузить(СтруктураСохранения.ПараметрыОбновления);
	ИнформационныеБазы.Загрузить(СтруктураСохранения.ИнформационныеБазы);
	КластерыСерверов1С.Загрузить(СтруктураСохранения.КластерыСерверов1С);
	СерверыСУБД.Загрузить(СтруктураСохранения.СерверыСУБД);
	Пользователи.Загрузить(СтруктураСохранения.Пользователи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьФайлЗавершение", ЭтаФорма);
	
	НачатьПомещениеФайла(ОписаниеОповещения);

	ОбновитьСпискиВыбораЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		ЗагрузитьФайлНаСервере(Адрес);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПоэтапноеВыполнение

&НаКлиенте
Процедура ВыполнитьОбработкуОжидание()
	
	Если ОтложенныйЗапуск И ТекущаяДата() < ДатаНачала Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполнитьДействия() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Обработка данных закончена";
		Сообщение.Сообщить();
		ОтключитьОбработчикОжидания("ВыполнитьОбработкуОжидание");
		Элементы.СтраницаОбслуживаемыеБазы.Доступность = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбработку(Команда)
	
	ОчиститьСообщения();
	Сообщить("Обработка запущена");
	
	ОбновитьСтатусВыполнения();
	
	ИнтервалЗапуска = 60;
	ПодключитьОбработчикОжидания("ВыполнитьОбработкуОжидание", ИнтервалЗапуска);
	
	//Первый запуск выполняем сразу
	ВыполнитьОбработкуОжидание();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусВыполнения()
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьОбработку(Команда)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Обработка остановлена";
	Сообщение.Сообщить();
	ОтключитьОбработчикОжидания("ВыполнитьОбработкуОжидание");
	Элементы.СтраницаОбслуживаемыеБазы.Доступность = Истина;
	
КонецПроцедуры

//ОбработчикДействий
&НаКлиенте
Функция ВыполнитьДействия()
	
	ДействиеВыполнено = Ложь;
	
	//Ищем действие
	Для Каждого СтрокаОбслуживаемыеБазы ИЗ ОбслуживаемыеБазы Цикл
		
		ВыполняемоеДействие = Неопределено;
		
		Если СтрокаОбслуживаемыеБазы.Обрабатывать Тогда
			
			ТаблицаВыполняемыеДействия = ВыполняемыеДействия.НайтиСтроки(Новый Структура("ИД_Базы", СтрокаОбслуживаемыеБазы.ИД_Базы));
			Для Каждого СтрокаВыполняемыеДействия Из ТаблицаВыполняемыеДействия Цикл
				
				Если СтрокаВыполняемыеДействия.Статус = "" ИЛИ
					Найти(СтрокаВыполняемыеДействия.Статус, "Выполнено") = 0 Тогда
					ВыполняемоеДействие = СтрокаВыполняемыеДействия;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВыполняемоеДействие <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыполняемоеДействие = Неопределено Тогда
		Возврат ДействиеВыполнено;
	КонецЕсли;
	
	//Т.к. некоторые операции могут выполняться продолжительное время убираем обработчик ожидания на время обработки
	ОтключитьОбработчикОжидания("ВыполнитьОбработкуОжидание");
	
	Попытка
		РезультатОбработки = ОбработатьДействие(ВыполняемоеДействие);
		ДействиеВыполнено = Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат ДействиеВыполнено;
	КонецПопытки;
	
	Если РезультатОбработки = "Выполнено" Тогда
		ИнтервалЗапуска = 1; // запускаем без ожидания
	Иначе
		ИнтервалЗапуска = 60; // ждем 60 сек
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьОбработкуОжидание", ИнтервалЗапуска);
	
	Возврат ДействиеВыполнено;
	
КонецФункции

#КонецОбласти

#Область ПодключенияКБазамЧерезCom

&НаСервере
Функция ВыполнитьПодключениеКБазе(ПараметрыИнформационнойБазы)

	СтрокаПодключения = "";
	
	//Подключение		
	СтруктураПодключения = ПолучитьСтруктуруПодключения(ПараметрыИнформационнойБазы);
	
	СтрокаСообщенияОбОшибке = "";
	Если НЕ ОпределитьДостаточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения, СтрокаСообщенияОбОшибке) Тогда
		Сообщить(СтрокаСообщенияОбОшибке);	
		Возврат Неопределено;
	КонецЕсли;;
	
	
	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	//"V8" или "V81"
	ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы;
	
	СтрокаПодключения = СтрокаПодключения + ";UC = ""123"";";
	
	Попытка
		
		#Если Клиент Тогда
			Состояние("Идет процесс соединения ...");
		#КонецЕсли
		
		ОбъектПодключения = ОбъектПодключения +".COMConnector";
		ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
		ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
		
		#Если Клиент Тогда
			Состояние("Соединение установлено");
		#КонецЕсли		
		
		Возврат ТекCOMОбъект;
		
	Исключение
		
		СтрокаСообщенияОбОшибке = "При попытке соединения с COM-сервером произошла следующая ошибка:" + Символы.ПС 
		+ ОписаниеОшибки();
		
		#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.ОченьВажное);
			Состояние(НСтр("ru = 'Соединение установить не удалось'"));
			Состояние();
		#КонецЕсли
		
		Возврат Неопределено;
		
	КонецПопытки;

КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПодключения(ПараметрыИнформационнойБазы)
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ФайловыйРежим",         ПараметрыИнформационнойБазы.ТипРасположения = "Файловая");
	СтруктураПодключения.Вставить("АутентификацияWindows", Ложь);
	СтруктураПодключения.Вставить("КаталогИБ", 			   "");
	
	СтруктураПодключения.Вставить("ИмяСервера",     	   ПараметрыИнформационнойБазы.КластерСерверов1СПредприятия);
	СтруктураПодключения.Вставить("ИмяИБНаСервере",        ПараметрыИнформационнойБазы.ИмяИнформационнойБазы);
	СтруктураПодключения.Вставить("Пользователь",          ПараметрыИнформационнойБазы.ИмяПользователяБазы);
	СтруктураПодключения.Вставить("Пароль",         	   ПараметрыИнформационнойБазы.ПарольПользователяБазы);
	СтруктураПодключения.Вставить("ВерсияПлатформы",	   "V83");
	
	Возврат СтруктураПодключения;

КонецФункции // ВыполнитьПодключениеКУУ()

&НаСервере
Функция ОпределитьДостаточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения = "", СтрокаСообщенияОбОшибке = "")
	
	НаличиеОшибок = Ложь;
	
	Если СтруктураПодключения.ФайловыйРежим  Тогда
		
		Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
			СтрокаСообщенияОбОшибке = НСтр("'ru = Не задан каталог информационной базы-приемника'");
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.ОченьВажное);
			НаличиеОшибок = Истина;
		КонецЕсли;
		
		СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	Иначе
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяСервера) Тогда
			СтрокаСообщенияОбОшибке = НСтр("'ru  = Не задано имя сервера 1С:Предприятия информационной базы-приемника'");
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.ОченьВажное);
			НаличиеОшибок = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяИБНаСервере) Тогда
			СтрокаСообщенияОбОшибке = НСтр("'ru = Не задано имя информационной базы-приемника на сервере 1С:Предприятия'");
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.ОченьВажное);
			НаличиеОшибок = Истина;
			
		КонецЕсли;		
		
		СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";		
		
	КонецЕсли;
	
	Возврат НЕ НаличиеОшибок;	
	
КонецФункции

#КонецОбласти

#Область КомандыРаботыСФункциямиАвтоматизации 

&НаСервере
Функция ПолучитьИспользуемыеПараметры(Знач ИД_Базы)
	
	СтруктураОтбора = Новый Структура("ИД_Базы", ИД_Базы);
	СтрокаОбслуживаемаяБаза = ОбслуживаемыеБазы.НайтиСтроки(СтруктураОтбора)[0];
	
	СтруктураОтбора = Новый Структура("ИД_Базы", СтрокаОбслуживаемаяБаза.ИД_Базы);
	СтрокаИнформационнаяБаза = ИнформационныеБазы.НайтиСтроки(СтруктураОтбора)[0];
	
	СтруктураОтбора = Новый Структура("Имя", СтрокаИнформационнаяБаза.Пользователь);
	СтрокаПользовательБазы = Пользователи.НайтиСтроки(СтруктураОтбора)[0];

	СтруктураОтбора = Новый Структура("Имя", СтрокаИнформационнаяБаза.ПользовательХранилища);
	СтрокаПользовательХранилища = Пользователи.НайтиСтроки(СтруктураОтбора)[0];
	
	СтруктураОтбора = Новый Структура("Имя", СтрокаИнформационнаяБаза.КластерСерверов1С);
	СтрокаКластерыСерверов1С = КластерыСерверов1С.НайтиСтроки(СтруктураОтбора)[0];
	СтруктураОтбора = Новый Структура("Имя", СтрокаКластерыСерверов1С.Пользователь);
	НайденныеСтроки = Пользователи.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаПользователиКластера1С = НайденныеСтроки[0];
		ИмяПользователяКластера1С = СтрокаПользователиКластера1С.Имя;
		ПарольПользователяКластера1С = СтрокаПользователиКластера1С.Пароль;
	Иначе
		ИмяПользователяКластера1С = "";
		ПарольПользователяКластера1С = "";
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Имя", СтрокаИнформационнаяБаза.СерверСУБД);
	СтрокаСерверыСУБД = СерверыСУБД.НайтиСтроки(СтруктураОтбора)[0];
	СтруктураОтбора = Новый Структура("Имя", СтрокаСерверыСУБД.Пользователь);
	СтрокаПользователиСУБД = Пользователи.НайтиСтроки(СтруктураОтбора)[0];
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Обрабатывать", СтрокаОбслуживаемаяБаза.Обрабатывать);
	СтруктураПараметров.Вставить("ИмяИнформационнойБазы", СтрокаИнформационнаяБаза.Имя);
	СтруктураПараметров.Вставить("ТипРасположения", СтрокаИнформационнаяБаза.ТипРасположения);
	СтруктураПараметров.Вставить("ПутьКБазе", СтрокаИнформационнаяБаза.ПутьКБазе);
	
	СтруктураПараметров.Вставить("ИмяПользователяБазы", СтрокаПользовательБазы.Имя);
	СтруктураПараметров.Вставить("ПарольПользователяБазы", СтрокаПользовательБазы.Пароль);
	
	СтруктураПараметров.Вставить("РасположениеХранилища", СтрокаИнформационнаяБаза.РасположениеХранилища);
	СтруктураПараметров.Вставить("ИмяПользователяХранилища", СтрокаПользовательХранилища.Имя);
	СтруктураПараметров.Вставить("ПарольПользователяХранилища", СтрокаПользовательХранилища.Пароль);
	
	СтруктураПараметров.Вставить("КластерСерверов1СПредприятия", СтрокаКластерыСерверов1С.Имя);
	СтруктураПараметров.Вставить("ИмяПользователяКластера1С", ИмяПользователяКластера1С);
	СтруктураПараметров.Вставить("ПарольПользователяКластера1С", ПарольПользователяКластера1С);
	
	СтруктураПараметров.Вставить("СерверСУБД", СтрокаСерверыСУБД.Имя);
	СтруктураПараметров.Вставить("КаталогБэкаповСУБД", СтрокаСерверыСУБД.КаталогБэкапов);
	СтруктураПараметров.Вставить("ИмяПользователяСУБД", СтрокаПользователиСУБД.Имя);
	СтруктураПараметров.Вставить("ПарольПользователяСУБД", СтрокаПользователиСУБД.Пароль);
	СтруктураПараметров.Вставить("ИмяБазыСУБД", СтрокаИнформационнаяБаза.ИмяБазыСУБД);
		
	
	СтруктураПараметров.Вставить("КаталогФайлов", ПараметрыОбновленийПолучитьЗначениеПараметра(СтрокаОбслуживаемаяБаза.Обновление, "КаталогФайлов"));
	
	СтруктураПараметров.Вставить("ФайлКонфигурацииОбновления", ПараметрыОбновленийПолучитьЗначениеПараметра(СтрокаОбслуживаемаяБаза.Обновление, "ФайлКонфигурацииОбновления"));
	СтруктураПараметров.Вставить("ФайлНастроекОбновления", ПараметрыОбновленийПолучитьЗначениеПараметра(СтрокаОбслуживаемаяБаза.Обновление, "ФайлНастроекОбновления"));
	
	СтруктураПараметров.Вставить("ФайлКонфигурацииПоставкиНаПоддержку", ПараметрыОбновленийПолучитьЗначениеПараметра(СтрокаОбслуживаемаяБаза.Обновление, "ФайлКонфигурацииПоставкиНаПоддержку"));
	СтруктураПараметров.Вставить("ФайлНастроекПоставкиНаПоддержку", ПараметрыОбновленийПолучитьЗначениеПараметра(СтрокаОбслуживаемаяБаза.Обновление, "ФайлНастроекПоставкиНаПоддержку"));
	
	СтруктураПараметров.Вставить("ФайлКонфигурацииСравненияОбъединения", ПараметрыОбновленийПолучитьЗначениеПараметра(СтрокаОбслуживаемаяБаза.Обновление, "ФайлКонфигурацииСравненияОбъединения"));
	СтруктураПараметров.Вставить("ФайлНастроекСравненияОбъединения", ПараметрыОбновленийПолучитьЗначениеПараметра(СтрокаОбслуживаемаяБаза.Обновление, "ФайлНастроекСравненияОбъединения"));
	
	ИмяФайлаЛоговПакетногоЗапуска = """" + СтруктураПараметров.КаталогФайлов + "\log_" + СтруктураПараметров.ИмяИнформационнойБазы + ".txt""";
	СтруктураПараметров.Вставить("ИмяФайлаЛоговПакетногоЗапуска", ИмяФайлаЛоговПакетногоЗапуска);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.КаталогФайлов) Тогда
		ИмяФайлаЛогов = СтруктураПараметров.КаталогФайлов + "\log.txt";
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ИмяФайлаЛогов", ИмяФайлаЛогов);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьСозданиеБэкапаНаСУБД(ИД_Базы)
	
	СтруктураПараметров = ПолучитьИспользуемыеПараметры(ИД_Базы);
	
	СтрокаПодключения = 
	"Provider=SQLOLEDB.1;
	|User ID=ИмяПользователяСУБД;
	|Pwd=ПарольПользователяСУБД;
	|Data Source=СерверСУБД;
	|Initial Catalog=ИмяБазыСУБД";
	
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "ИмяПользователяСУБД", СтруктураПараметров.ИмяПользователяСУБД);  
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "ПарольПользователяСУБД", СтруктураПараметров.ПарольПользователяСУБД);
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "СерверСУБД", СтруктураПараметров.СерверСУБД);
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "ИмяБазыСУБД", СтруктураПараметров.ИмяБазыСУБД);
	
	Connection  = Новый COMОбъект("ADODB.Connection");
	Command  = Новый COMОбъект("ADODB.Command");
	RecordSet  = Новый COMОбъект("ADODB.RecordSet");
	
	Попытка
		Connection.Open(СокрЛП(СтрокаПодключения));
		Command.ActiveConnection   = Connection;
		ТекстКоманды = "BACKUP DATABASE [ИмяБазыСУБД] TO  DISK = N'КаталогБэкаповСУБД\ИмяБазыСУБД_СтрокаДата.bak' WITH NOFORMAT, NOINIT,  NAME = N'ИмяБазыСУБД-Full Database Backup', SKIP, NOREWIND, NOUNLOAD,  STATS = 10";
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "ИмяБазыСУБД", СтруктураПараметров.ИмяБазыСУБД);
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "КаталогБэкаповСУБД", СтруктураПараметров.КаталогБэкаповСУБД);
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "СтрокаДата", Формат(ТекущаяДата(),"ДФ=yyyyMMdd"));
		Command.CommandText = ТекстКоманды;
		RecordSet = Command.Execute();
		
		Если RecordSet.State = 0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПакетныйЗапуск(ИД_Базы, ВидЗапуска)
	
	СтруктураПараметров = ПолучитьИспользуемыеПараметры(ИД_Базы);	
	СтрокаЗапуска = ПолучитьСтрокуЗапуска(СтруктураПараметров, ВидЗапуска);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапускПриложенияЗавершение", ЭтотОбъект, СтруктураПараметров);
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = "" + ТекущаяДата() + " начало " + ВидЗапуска + " " + СтруктураПараметров.НазваниеБазы;
	//Сообщение.Сообщить();
	
	НачатьЗапускПриложения(ОписаниеОповещения, СтрокаЗапуска, , Ложь);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОбновлениеВерсииНеИнтерактивно(ИД_Базы)

	СтруктураПараметров = ПолучитьИспользуемыеПараметры(ИД_Базы);
	Подключение = ВыполнитьПодключениеКБазе(СтруктураПараметров);
	Если Подключение <> Неопределено Тогда
		Попытка
			Подключение.ОбновлениеИнформационнойБазыСлужебный.УстановитьЗапускОбновленияИнформационнойБазы(Истина);
			Подключение.ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы();
			Подключение.ОбновлениеИнформационнойБазыСлужебный.ЗаписатьПодтверждениеЛегальностиПолученияОбновлений();
			Подключение = Неопределено;	
			Возврат Истина;	
		Исключение
			Подключение = Неопределено;
			Возврат ОписаниеОшибки();	
		КонецПопытки;
	Иначе
		Возврат "Не удалось установить подключение";
	КонецЕсли;	
		
КонецФункции

&НаКлиенте
Процедура ЗапускПриложенияЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт

	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = "" + ТекущаяДата() + " окончание " + ДополнительныеПараметры.НазваниеБазы;
	//Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуЗапуска(СтруктураПараметров, ВидЗапуска)
	
	ИмяФайла = """" + КаталогПрограммы() + "1cv8s.exe" + """";
	
	Если СтруктураПараметров.ТипРасположения = "Серверная" Тогда;
		СтрокаПодключения = "/S " + """" + СтруктураПараметров.КластерСерверов1СПредприятия + "\" + СтруктураПараметров.ИмяИнформационнойБазы + """";		
	Иначе		
		СтрокаПодключения = "/F " + """" + СтруктураПараметров.ПутьКБазе + """";
	КонецЕсли;
	
	ПараметрыПодключения = "/N " + """" + СтруктураПараметров.ИмяПользователяБазы + """" + " " +  
	?(ЗначениеЗаполнено(СтруктураПараметров.ПарольПользователяБазы), "/P " + """" + СтруктураПараметров.ПарольПользователяБазы + """" + " ", "");	
	
	ДополнительныеПараметрыЗапуска = "/DisableStartupDialogs /DisableStartupMessages /UsePrivilegedMode /Visible";
	ПараметрыДоступа = "/uc123";
	
	РежимЗапуска = "DESIGNER";
	
	Если ВидЗапуска = "СнятьСПоддержки" Тогда
		ПараметрыВыполнения = "/ManageCfgSupport -disableSupport -force";	
	ИначеЕсли ВидЗапуска = "ВыполнитьСравнениеОбъединение" Тогда
		ПараметрыВыполнения = "/MergeCfg """ + СтруктураПараметров.ФайлКонфигурацииСравненияОбъединения + """ -Settings """ + СтруктураПараметров.ФайлНастроекСравненияОбъединения + """ -IncludeObjectsByUnresolvedRefs -force";
	ИначеЕсли ВидЗапуска = "ВыполнитьОбновление" Тогда
		ПараметрыВыполнения = "/UpdateCfg """ + СтруктураПараметров.ФайлКонфигурацииОбновления + """ -Settings """ + СтруктураПараметров.ФайлНастроекОбновления + """ -IncludeObjectsByUnresolvedRefs -force";	
	ИначеЕсли ВидЗапуска = "ПоставитьНаПоддержку" Тогда
		ПараметрыВыполнения = "/MergeCfg """ + СтруктураПараметров.ФайлКонфигурацииПоставкиНаПоддержку + """ -Settings """ + СтруктураПараметров.ФайлНастроекПоставкиНаПоддержку + """ -EnableSupport  -IncludeObjectsByUnresolvedRefs"; // -force убрал, были косяки
	ИначеЕсли ВидЗапуска = "ОбновитьКонфигурациюИзХранилища" Тогда
		ПараметрыВыполнения = "/ConfigurationRepositoryF " + """" + СтруктураПараметров.РасположениеХранилища + """" + " " +
		"/ConfigurationRepositoryN " + """" + СтруктураПараметров.ИмяПользователяХранилища + """" + " " +		
		?(ЗначениеЗаполнено(СтруктураПараметров.ПарольПользователяХранилища), "/ConfigurationRepositoryP " + СтруктураПараметров.ПарольПользователяХранилища + " ", "") +
		"/ConfigurationRepositoryUpdateCfg";	
	ИначеЕсли ВидЗапуска = "ПрименитьИзмененияКИнформационнойБазе" Тогда
		ПараметрыВыполнения = "/UpdateDBCfg -Dynamic–";
	ИначеЕсли ВидЗапуска = "ВыгрузитьБазу" Тогда
		ПараметрыВыполнения = "/DumpIB """ + СтруктураПараметров.КаталогФайлов + "\" + СтруктураПараметров.ИмяИнформационнойБазы + "_" +  Формат(ТекущаяДата(),"ДФ=yyyyMMdd") + ".dt""";
	ИначеЕсли ВидЗапуска = "ЗапуститьВРежимеПредприятия" Тогда
		РежимЗапуска = "ENTERPRISE";
		ПараметрыВыполнения = "/ЗапуститьОбновлениеИнформационнойБазы /ВыполнитьОтложенноеОбновлениеСейчас";
	КонецЕсли;	
		
	ПараметрыВывода = "/Out " + СтруктураПараметров.ИмяФайлаЛоговПакетногоЗапуска + " -NoTruncate";
	
	СтрокаЗапуска = 
	ИмяФайла + " " + РежимЗапуска + " " + 
	ПараметрыДоступа + " " +
	ДополнительныеПараметрыЗапуска + " " +
	СтрокаПодключения + " " +
	ПараметрыПодключения + " " +	
	ПараметрыВыполнения + " " +			
	ПараметрыВывода;
	
	Возврат СтрокаЗапуска;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокДействий()
	
	СписокДействий = Новый СписокЗначений;
	
	СписокДействий.Добавить("ВыгрузитьБазу");
	СписокДействий.Добавить("СоздатьБэкапНаСУБД");
	СписокДействий.Добавить("УстановитьБлокировкуСеансовИЗаданий");
	СписокДействий.Добавить("УдалитьСеансыИСоединения");
	СписокДействий.Добавить("СнятьСПоддержки");
	СписокДействий.Добавить("ВыполнитьОбновление");
	СписокДействий.Добавить("ВыполнитьСравнениеОбъединение");	
	СписокДействий.Добавить("ПоставитьНаПоддержку");
	СписокДействий.Добавить("ОбновитьКонфигурациюИзХранилища");
	СписокДействий.Добавить("ПрименитьИзмененияКИнформационнойБазе");
	СписокДействий.Добавить("ВыполнитьОбновлениеВерсииНеИнтерактивно");
	СписокДействий.Добавить("СнятьБлокировкуСеансовИЗаданий");
	СписокДействий.Добавить("ЗапуститьВРежимеПредприятия");
	
	Возврат СписокДействий;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокПараметровОбновлений()
	
	СписокДействий = Новый СписокЗначений;
	
	СписокДействий.Добавить("КаталогФайлов");
	
	СписокДействий.Добавить("ФайлКонфигурацииСравненияОбъединения");
	СписокДействий.Добавить("ФайлНастроекСравненияОбъединения");
	
	СписокДействий.Добавить("ФайлКонфигурацииОбновления");
	СписокДействий.Добавить("ФайлНастроекОбновления");
	
	СписокДействий.Добавить("ФайлКонфигурацииПоставкиНаПоддержку");
	СписокДействий.Добавить("ФайлНастроекПоставкиНаПоддержку");
	
	Возврат СписокДействий;
	
КонецФункции

&НаКлиенте
Функция ОбработатьДействие(ВыполняемоеДействие)
	
	ИнформацияОСистеме = ПолучитьИспользуемыеПараметры(ВыполняемоеДействие.ИД_Базы);
	Лог = "" + ТекущаяДата() + ": " + ИнформацияОСистеме.ИмяИнформационнойБазы + " " + ВыполняемоеДействие.Действие;
	
	Если ВыполняемоеДействие.Действие = "СоздатьБэкапНаСУБД" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			Лог = Лог + " Запущено ";
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			ВыполняемоеДействие.Статус = "Запущено " + ТекущаяДата();
			
			Лог = "" + ТекущаяДата() + ": " + ИнформацияОСистеме.ИмяИнформационнойБазы + " " + ВыполняемоеДействие.Действие;
			Если ВыполнитьСозданиеБэкапаНаСУБД(ВыполняемоеДействие.ИД_Базы) Тогда
				Лог = Лог + " Выполнено";
				ВыполняемоеДействие.Статус = ВыполняемоеДействие.Статус + ". Выполнено " + ТекущаяДата();
				Возврат "Выполнено";
			Иначе
				Лог = Лог + " Ошибка";
			КонецЕсли;
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "УстановитьБлокировкуСеансовИЗаданий" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			ПараметрыУправления = Новый Структура;
			ПараметрыУправления.Вставить("ПризнакБлокировкиБазы", Истина);
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме, ПараметрыУправления);
			Лог = Лог + " Выполнено ";
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			ВыполняемоеДействие.Статус = "Выполнено " + ТекущаяДата();
			Возврат "Выполнено";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "УдалитьСеансыИСоединения" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			ПараметрыУправления = Новый Структура;
			ПараметрыУправления.Вставить("УдалятьСеансы", Истина);
			ПараметрыУправления.Вставить("УдалятьСеансыИСоединенияФоновыхЗаданий", Истина);
			ПараметрыУправления.Вставить("УдалятьСеансыИСоединенияКонфигуратора", Истина);
			ПараметрыУправления.Вставить("УдалятьСобственныеСеансы", Истина);
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме, ПараметрыУправления);
			Если НЕ Результат.ЕстьСеансКонфигуратора
				И Результат.ЕстьВозможностьОбновления Тогда
				Лог = Лог + " Выполнено ";
				ВыполняемоеДействие.Статус = "Выполнено " + ТекущаяДата();
				Возврат "Выполнено";
			Иначе 	
				Лог = Лог + " Не выполнено ";
				ВыполняемоеДействие.Статус = "Не выполнено " + ТекущаяДата();	
			КонецЕсли;
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "ВыгрузитьБазу" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора
				И Результат.ЕстьВозможностьОбновления Тогда
				ВыполнитьПакетныйЗапуск(ВыполняемоеДействие.ИД_Базы, "ВыгрузитьБазу");
				Лог = Лог + " Запущено ";
				ВыполняемоеДействие.Статус = "Запущено " + ТекущаяДата();
			Иначе
				Лог = Лог + " нет возможности выгрузить базу, сеансы пользователей или конфигуратор";	
			КонецЕсли;
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			
		ИначеЕсли Найти(ВыполняемоеДействие.Статус, "Запущено") > 0 Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				Лог = Лог + " Выполнено";
				ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
				ВыполняемоеДействие.Статус = ВыполняемоеДействие.Статус + ". Выполнено " + ТекущаяДата();
				Возврат "Выполнено";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "СнятьСПоддержки" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				ВыполнитьПакетныйЗапуск(ВыполняемоеДействие.ИД_Базы, "СнятьСПоддержки");
				Лог = Лог + " Запущено ";
				ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
				ВыполняемоеДействие.Статус = "Запущено " + ТекущаяДата();
			Иначе
				Лог = Лог + " нет возможности снятия с поддержки, сеанс конфигуратора";	
				ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);	
			КонецЕсли;
			
		ИначеЕсли Найти(ВыполняемоеДействие.Статус, "Запущено") > 0 Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				Лог = Лог + " Выполнено";
				ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
				ВыполняемоеДействие.Статус = ВыполняемоеДействие.Статус + ". Выполнено " + ТекущаяДата();
				Возврат "Выполнено";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "ВыполнитьСравнениеОбъединение" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				ВыполнитьПакетныйЗапуск(ВыполняемоеДействие.ИД_Базы, "ВыполнитьСравнениеОбъединение");
				Лог = Лог + " Запущено ";
				ВыполняемоеДействие.Статус = "Запущено " + ТекущаяДата();
			Иначе
				Лог = Лог + " нет возможности объединения конфигураций, сеанс конфигуратора";	
			КонецЕсли;
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			
		ИначеЕсли Найти(ВыполняемоеДействие.Статус, "Запущено") > 0 Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				Лог = Лог + " Выполнено";
				ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
				ВыполняемоеДействие.Статус = ВыполняемоеДействие.Статус + ". Выполнено " + ТекущаяДата();
				Возврат "Выполнено";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "ВыполнитьОбновление" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				ВыполнитьПакетныйЗапуск(ВыполняемоеДействие.ИД_Базы, "ВыполнитьОбновление");
				Лог = Лог + " Запущено ";
				ВыполняемоеДействие.Статус = "Запущено " + ТекущаяДата();
			Иначе
				Лог = Лог + " нет возможности объединения конфигураций, сеанс конфигуратора";	
			КонецЕсли;
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			
		ИначеЕсли Найти(ВыполняемоеДействие.Статус, "Запущено") > 0 Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				Лог = Лог + " Выполнено";
				ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
				ВыполняемоеДействие.Статус = ВыполняемоеДействие.Статус + ". Выполнено " + ТекущаяДата();
				Возврат "Выполнено";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "ПоставитьНаПоддержку" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				ВыполнитьПакетныйЗапуск(ВыполняемоеДействие.ИД_Базы, "ПоставитьНаПоддержку");
				Лог = Лог + " Запущено ";
				ВыполняемоеДействие.Статус = "Запущено " + ТекущаяДата();
			Иначе
				Лог = Лог + " нет возможности поставки на поддержку, сеанс конфигуратора";	
			КонецЕсли;
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			
		ИначеЕсли Найти(ВыполняемоеДействие.Статус, "Запущено") > 0 Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				Лог = Лог + " Выполнено";
				ВыполняемоеДействие.Статус = ВыполняемоеДействие.Статус + ". Выполнено " + ТекущаяДата();
				ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
				Возврат "Выполнено";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "ОбновитьКонфигурациюИзХранилища" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				ВыполнитьПакетныйЗапуск(ВыполняемоеДействие.ИД_Базы, "ОбновитьКонфигурациюИзХранилища");
				Лог = Лог + " Запущено ";
				ВыполняемоеДействие.Статус = "Запущено " + ТекущаяДата();
			Иначе
				Лог = Лог + " нет возможности обновления хранилища, сеансы пользователей или конфигуратор";
			КонецЕсли;
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			
		ИначеЕсли Найти(ВыполняемоеДействие.Статус, "Запущено") > 0 Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				Лог = Лог + " Выполнено";
				ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
				ВыполняемоеДействие.Статус = ВыполняемоеДействие.Статус + ". Выполнено " + ТекущаяДата();
				Возврат "Выполнено";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "ПрименитьИзмененияКИнформационнойБазе" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора 
				И Результат.ЕстьВозможностьОбновления Тогда
				ВыполнитьПакетныйЗапуск(ВыполняемоеДействие.ИД_Базы, "ПрименитьИзмененияКИнформационнойБазе");
				Лог = Лог + " Запущено ";
				ВыполняемоеДействие.Статус = "Запущено " + ТекущаяДата();
			Иначе
				Лог = Лог + " нет возможности обновления, сеансы пользователей или конфигуратор";
			КонецЕсли;
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			
		ИначеЕсли Найти(ВыполняемоеДействие.Статус, "Запущено") > 0 Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если НЕ Результат.ЕстьСеансКонфигуратора Тогда
				Лог = Лог + " Выполнено";
				ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
				ВыполняемоеДействие.Статус = ВыполняемоеДействие.Статус + ". Выполнено " + ТекущаяДата();
				Возврат "Выполнено";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "ЗапуститьВРежимеПредприятия" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			ВыполнитьПакетныйЗапуск(ВыполняемоеДействие.ИД_Базы, "ЗапуститьВРежимеПредприятия");
			Лог = Лог + " Выполнено ";
			ВыполняемоеДействие.Статус = "Выполнено " + ТекущаяДата();
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			Возврат "Выполнено";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "ВыполнитьОбновлениеВерсииНеИнтерактивно" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме);
			Если Результат.ЕстьВозможностьОбновления Тогда
				Лог = Лог + " Запущено ";
				ВыполняемоеДействие.Статус = "Запущено " + ТекущаяДата();
				ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
				
				РезультатОбновления = ВыполнитьОбновлениеВерсииНеИнтерактивно(ВыполняемоеДействие.ИД_Базы);
				Если ТипЗнч(РезультатОбновления) = Тип("Булево") И РезультатОбновления Тогда
					Лог = Лог + " Выполнено";
					ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
					ВыполняемоеДействие.Статус = ВыполняемоеДействие.Статус + ". Выполнено " + ТекущаяДата();
					Возврат "Выполнено";
				ИначеЕсли ТипЗнч(РезультатОбновления) = Тип("Строка") Тогда
					Лог = Лог + " " + РезультатОбновления;
					ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
					ВыполняемоеДействие.Статус = ВыполняемоеДействие.Статус + ". " + "РезультатОбновления" + ТекущаяДата();
				КонецЕсли;
			Иначе
				Лог = Лог + " нет возможности выполнить обновление, сеансы пользователей или конфигуратор";	
				ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие.Действие = "СнятьБлокировкуСеансовИЗаданий" Тогда
		
		Если ВыполняемоеДействие.Статус = "" Тогда
			
			ПараметрыУправления = Новый Структура;
			ПараметрыУправления.Вставить("ПризнакБлокировкиБазы", Ложь);
			
			Результат = РаботаСКластеромСерверов1С(ИнформацияОСистеме, ПараметрыУправления);
			Лог = Лог + " Выполнено ";
			ЗаписатьЛог(Лог, ИнформацияОСистеме.ИмяФайлаЛогов);
			ВыполняемоеДействие.Статус = "Выполнено " + ТекущаяДата();
			Возврат "Выполнено";
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область РаботаФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСпискиВыбораЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпискиВыбораЭлементов()
	
	МассивПользователей = Пользователи.Выгрузить().ВыгрузитьКолонку("Имя");
	МассивПользователей.Добавить("");
	
	Элементы.КластерыСерверов1СПользователь.СписокВыбора.ЗагрузитьЗначения(МассивПользователей);
	Элементы.ИнформационныеБазыПользователь.СписокВыбора.ЗагрузитьЗначения(МассивПользователей);
	Элементы.ИнформационныеБазыПользовательХранилища.СписокВыбора.ЗагрузитьЗначения(МассивПользователей);
	Элементы.СерверыСУБДПользователь.СписокВыбора.ЗагрузитьЗначения(МассивПользователей);
	
	МассивКластеровСерверов1С = КластерыСерверов1С.Выгрузить().ВыгрузитьКолонку("Имя");
	Элементы.ИнформационныеБазыКластерСерверов1С.СписокВыбора.ЗагрузитьЗначения(МассивКластеровСерверов1С);
	
	МассивСерверовСУБД = СерверыСУБД.Выгрузить().ВыгрузитьКолонку("Имя");
	Элементы.ИнформационныеБазыСерверСУБД.СписокВыбора.ЗагрузитьЗначения(МассивСерверовСУБД);
	
	Элементы.ОбслуживаемыеБазыИнформационнаяБаза.СписокВыбора.Очистить();
	Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
		Элементы.ОбслуживаемыеБазыИнформационнаяБаза.СписокВыбора.Добавить(ИнформационнаяБаза.ИД_Базы, ИнформационнаяБаза.Имя);
	КонецЦикла;
	
	МассивОбновлений = Обновления.Выгрузить().ВыгрузитьКолонку("Обновление");
	Элементы.ОбслуживаемыеБазыОбновление.СписокВыбора.ЗагрузитьЗначения(МассивОбновлений);
	
	МассивТипРасположения = Новый Массив();
	МассивТипРасположения.Добавить("Серверная");
	Элементы.ИнформационныеБазыТипРасположения.СписокВыбора.ЗагрузитьЗначения(МассивТипРасположения);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИДБаз()
	
	Для Каждого ИнформационнаяБазаСтрока Из ИнформационныеБазы Цикл
		ИнформационнаяБазаСтрока.ИД_Базы = ИнформационнаяБазаСтрока.Имя + "_" + ИнформационнаяБазаСтрока.КластерСерверов1С;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбновленияПриИзменении(Элемент)
	
	ОбновитьСпискиВыбораЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриИзменении(Элемент)
	
	ОбновитьСпискиВыбораЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КластерыСерверов1СПриИзменении(Элемент)
	
	ОбновитьСпискиВыбораЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СерверыСУБДПриИзменении(Элемент)
	
	ОбновитьСпискиВыбораЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационныеБазыПриИзменении(Элемент)
	
	ОбновитьСпискиВыбораЭлементов();
	ОбновитьИДБаз()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Для Каждого Строка Из ОбслуживаемыеБазы Цикл
		Строка.Обрабатывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	
	Для Каждого Строка Из ОбслуживаемыеБазы Цикл
		Строка.Обрабатывать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КаталогФайлов = ОпределитьКаталогФайловДляОбновления(Элементы.ПараметрыОбновления.ТекущиеДанные.Обновление);
	
	Если Элемент.Родитель = Элементы.ПараметрыОбновления
		И Элементы.ПараметрыОбновления.ТекущиеДанные.Параметр = "КаталогФайлов" Тогда
		РежимРаботы = РежимДиалогаВыбораФайла.ВыборКаталога;
	Иначе
		РежимРаботы = РежимДиалогаВыбораФайла.Открытие;
	КонецЕсли;	
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимРаботы);
	ДиалогВыбора.Каталог = ?(ЗначениеЗаполнено(КаталогФайлов),
		КаталогФайлов, Неопределено);
		
	ИмяРедактируемогоРеквизита = СтрЗаменить(Элемент.Имя, "ПараметрыОбновления", "");
	ДополнительныеПараметры = Новый Структура("ИмяРедактируемогоРеквизита, НомерСтроки", ИмяРедактируемогоРеквизита, Элементы.ПараметрыОбновления.ТекущаяСтрока);	
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбора.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьКаталогФайловДляОбновления(Обновление)
	
	ПараметрыОбновления = ПараметрыОбновлений.НайтиСтроки(Новый Структура("Обновление, Параметр", Обновление, "КаталогФайлов"));
	Если ПараметрыОбновления.Количество() > 0 Тогда
		ПутьККаталогу = ПараметрыОбновления[0].ЗначениеПараметра;
		Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
			Возврат ПутьККаталогу;	
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОбновления  = ПараметрыОбновлений.НайтиСтроки(Новый Структура("Обновление", Обновление));
	Если ПараметрыОбновления.Количество() > 0 Тогда
		ПутьКФайлу = ПараметрыОбновления[0].ЗначениеПараметра;
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
			ФайлНаДиске = Новый Файл(ПутьКФайлу);
			Возврат ФайлНаДиске.Путь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПараметрыОбновленийПолучитьЗначениеПараметра(Обновление, Параметр)
	
	ПараметрыОбновления = ПараметрыОбновлений.НайтиСтроки(Новый Структура("Обновление, Параметр", Обновление, Параметр));
	Если ПараметрыОбновления.Количество() > 0 Тогда
		Возврат ПараметрыОбновления[0].ЗначениеПараметра;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ФайлНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество() > 0 Тогда
		
			СтрокаПараметрыОбновления = ПараметрыОбновлений.НайтиПоИдентификатору(ДополнительныеПараметры.НомерСтроки);
		
			СтрокаПараметрыОбновления[ДополнительныеПараметры.ИмяРедактируемогоРеквизита] = ВыбранныеФайлы.Получить(0);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокДействий = ПолучитьСписокДействий();
	
	Для Каждого Действие Из СписокДействий Цикл
		СтрокаДействие = ВидыДействий.Добавить();
		СтрокаДействие.Действие = Действие.Значение;
	КонецЦикла;
	
	Элементы.ПараметрыОбновленияПараметр.СписокВыбора.Очистить();
	СписокПараметровОбновлений = ПолучитьСписокПараметровОбновлений();
	Для Каждого ПараметрОбновления Из СписокПараметровОбновлений Цикл
		Элементы.ПараметрыОбновленияПараметр.СписокВыбора.Добавить(ПараметрОбновления.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбслуживаемыеБазыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ОбслуживаемыеБазы.ТекущиеДанные <> Неопределено Тогда
		Элементы.ВыполняемыеДействия.ОтборСтрок = Новый ФиксированнаяСтруктура("ИД_Базы", Элементы.ОбслуживаемыеБазы.ТекущиеДанные.ИД_Базы);
	КонецЕсли;

КонецПроцедуры



&НаКлиенте
Процедура ОбновленияПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Обновления.ТекущиеДанные <> Неопределено Тогда
		Элементы.ПараметрыОбновления.ОтборСтрок = Новый ФиксированнаяСтруктура("Обновление", Элементы.Обновления.ТекущиеДанные.Обновление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбслуживаемыеБазыИнформационнаяБазаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ОбслуживаемыеБазы.ТекущиеДанные.ИД_Базы = ВыбранноеЗначение;
	Элементы.ОбслуживаемыеБазы.ТекущиеДанные.ИнформационнаяБаза = ИнформационныеБазы.НайтиСтроки(Новый Структура("ИД_Базы", ВыбранноеЗначение))[0].Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполняемыеДействияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ВыполняемыеДействия.Удалить(ВыполняемыеДействия.НайтиПоИдентификатору(Элемент.ТекущаяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполняемыеДействияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ПараметрыПеретаскивания.Значение[0].Свойство("Действие") Тогда
		НовоеДействие = ВыполняемыеДействия.Добавить();
		НовоеДействие.Действие = ПараметрыПеретаскивания.Значение[0].Действие;
		НовоеДействие.ИД_Базы = Элементы.ОбслуживаемыеБазы.ТекущиеДанные.ИД_Базы;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Наработки

&НаКлиенте
Процедура ВыполнитьАнализ(СтруктураЛогов)
	
	ИмяФайла = СтруктураЛогов.ИмяФайла;
	СтрокаЛогов = СтруктураЛогов.ТаблицаЛогов[СтруктураЛогов.ТаблицаЛогов.Количество() - 1];
	ДатаНачала = СтрокаЛогов.ДатаНачала;
	
	Файл = Новый Файл(ИмяФайла);
	ВремяИзменения = Файл.ПолучитьВремяИзменения();
	
	Если ВремяИзменения > ДатаНачала Тогда
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайла);
		
		Результат = ТекстовыйДокумент.ПолучитьСтроку(ТекстовыйДокумент.КоличествоСтрок());
		
		СтрокаЛогов.Результат = Результат;
		СтрокаЛогов.ДатаОкончания = ВремяИзменения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛог(Сообщение, ИмяФайлаЛогов)
	
	ФайлЛогов = Новый ТекстовыйДокумент;
	Файл = Новый Файл(ИмяФайлаЛогов);
	Если Файл.Существует() Тогда
		ФайлЛогов.Прочитать(ИмяФайлаЛогов);
	КонецЕсли;
	ФайлЛогов.ДобавитьСтроку(Сообщение);
	ФайлЛогов.Записать(ИмяФайлаЛогов);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКластеромСерверов1С

&НаСервере
Функция РаботаСКластеромСерверов1С(ИнформацияОСистеме, ПараметрыУправления = Неопределено)
	
	Если ПараметрыУправления = Неопределено Тогда
		ПараметрыУправления = Новый Структура;
	КонецЕсли;
	
	ВозвращаемыеДанные = Новый Структура;
	ВозвращаемыеДанные.Вставить("ЕстьСеансКонфигуратора", Ложь);
	ВозвращаемыеДанные.Вставить("ЕстьВозможностьОбновления", Истина);
	ВозвращаемыеДанные.Вставить("ЗавершенныеСеансы", Новый Массив);
	ВозвращаемыеДанные.Вставить("ЗавершенныеСоединения", Новый Массив);
	
	Коннектор = Новый COMОбъект("V83.COMConnector");
	Агент = Коннектор.ConnectAgent(ИнформацияОСистеме.КластерСерверов1СПредприятия);
	Кластеры = Агент.GetClusters();
	
	Для Каждого Кластер из Кластеры Цикл
		
		Агент.Authenticate(Кластер, ИнформацияОСистеме.ИмяПользователяКластера1С, ИнформацияОСистеме.ПарольПользователяКластера1С);
		
		ИнформационнаяБазаАгент = Неопределено;
		
		Базы = Агент.GetInfoBases(Кластер);
		Для каждого База из Базы Цикл
			Если База.Name = ИнформацияОСистеме.ИмяИнформационнойБазы Тогда
				ИнформационнаяБазаАгент = База;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИнформационнаяБазаАгент = "" Тогда
			// база не найдена
		КонецЕсли;
		
		Сеансы = Агент.GetInfoBaseSessions(Кластер, ИнформационнаяБазаАгент);
		СеансыКУдалению = Новый Массив;
		//удаление сеансов Агента
		Для Каждого Сеанс Из Сеансы Цикл
			Попытка
				Если нРег(Сеанс.AppID) = "1cv8c" И 
					(ПараметрыУправления.Свойство("УдалятьСеансы") И ПараметрыУправления.УдалятьСеансы) Тогда 
					// если это сеансы пользователя
					СеансыКУдалению.Добавить(Сеанс);
				КонецЕсли;
				Если нРег(Сеанс.AppID) = "backgroundjob" И 
					(ПараметрыУправления.Свойство("УдалятьСеансыИСоединенияФоновыхЗаданий") И ПараметрыУправления.УдалятьСеансыИСоединенияФоновыхЗаданий) Тогда 
					// если это сеансы фонового задания
					СеансыКУдалению.Добавить(Сеанс);
				КонецЕсли;
				Если нРег(Сеанс.AppID) = "designer" И 
					(ПараметрыУправления.Свойство("УдалятьСеансыИСоединенияКонфигуратора") И ПараметрыУправления.УдалятьСеансыИСоединенияКонфигуратора) Тогда
					// если это сеансы конфигуратора
					СеансыКУдалению.Добавить(Сеанс);
				КонецЕсли;
				Если Сеанс.UserName = ИнформацияОСистеме.ИмяПользователяБазы И 
					(ПараметрыУправления.Свойство("УдалятьСобственныеСеансы") И ПараметрыУправления.УдалятьСобственныеСеансы) Тогда
					// это текущий пользователь
					СеансыКУдалению.Добавить(Сеанс);
				КонецЕсли;
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
		Для Каждого СеансКУдалению Из СеансыКУдалению Цикл
			ВозвращаемыеДанные.ЗавершенныеСеансы.Добавить(СеансКУдалению.userName + ";" + СеансКУдалению.Host + ";" + СеансКУдалению.StartedAt);
			Агент.TerminateSession(Кластер, СеансКУдалению);
		КонецЦикла;
		
		СоединенияСАгентом = Агент.GetInfoBaseConnections(Кластер, ИнформационнаяБазаАгент);
		// Разорвать соединения
		Для Каждого Соединение Из СоединенияСАгентом Цикл
			// код
		КонецЦикла;
			
		Сеансы = Агент.GetInfoBaseSessions(Кластер, ИнформационнаяБазаАгент);
		//сеанс конфигуратора
		Для Каждого Сеанс Из Сеансы Цикл
			Если нРег(Сеанс.AppID) = "designer" Тогда
				ВозвращаемыеДанные.ЕстьСеансКонфигуратора = Истина;
			КонецЕсли;
		КонецЦикла;
		
		//возможность обновления
		Для Каждого Сеанс Из Сеансы Цикл
			Если нРег(Сеанс.AppID) <> "comconsole" И нРег(Сеанс.AppID) <> "backgroundjob" И нРег(Сеанс.AppID) <> "designer" И нРег(Сеанс.AppID) <> "srvrconsole" Тогда
				ВозвращаемыеДанные.ЕстьВозможностьОбновления = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		// выходим если нет потребности в управлении, т.к. появились какие-то ошибки работаещего конфигуратора при обращении к процессам
		Если Не ЗначениеЗаполнено(ПараметрыУправления) Тогда
			Продолжить;
		КонецЕсли;
		
		//работа с процессами и соединениями
		Процессы = Агент.GetWorkingProcesses(Кластер);
		
		Для Каждого Процесс из Процессы Цикл
			
			Если Процесс.License = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Порт = Процесс.MainPort;
			// теперь есть адрес и порт для подключения к рабочему процессу
			РабочийПроцесс = Коннектор.ConnectWorkingProcess(ИнформацияОСистеме.КластерСерверов1СПредприятия + ":" + СтрЗаменить(Порт, Символы.НПП, ""));
			РабочийПроцесс.AddAuthentication(ИнформацияОСистеме.ИмяПользователяБазы, ИнформацияОСистеме.ПарольПользователяБазы);
			
			ИнформационнаяБазаПроцесс = Неопределено;
			
			ИнформационныеБазыПроцесс = РабочийПроцесс.GetInfoBases();
			Для Каждого ИнформационныеБазыПроцессБаза из ИнформационныеБазыПроцесс Цикл
				Если ИнформационныеБазыПроцессБаза.Name = ИнформацияОСистеме.ИмяИнформационнойБазы Тогда
					ИнформационнаяБазаПроцесс = ИнформационныеБазыПроцессБаза;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ИнформационнаяБазаПроцесс = Неопределено ИЛИ ИнформационнаяБазаПроцесс = "" Тогда
				// база не найдена
				Продолжить;
			КонецЕсли;
			
			//установка блокировки/разблокировки
			Если ПараметрыУправления.Свойство("ПризнакБлокировкиБазы") Тогда
				ИнформационнаяБазаПроцесс.ScheduledJobsDenied = ПараметрыУправления.ПризнакБлокировкиБазы;
				ИнформационнаяБазаПроцесс.SessionsDenied = ПараметрыУправления.ПризнакБлокировкиБазы;
				Если ПараметрыУправления.ПризнакБлокировкиБазы Тогда
					ИнформационнаяБазаПроцесс.DeniedFrom = НачалоЧаса(ТекущаяДата()) - 1800;
					ИнформационнаяБазаПроцесс.DeniedTo = КонецЧаса(ТекущаяДата()) + 1801;
					ИнформационнаяБазаПроцесс.DeniedMessage = "Информационная база не доступна в связи с выполнением регламентных операций.";
					ИнформационнаяБазаПроцесс.PermissionCode = "123";
				КонецЕсли;
				РабочийПроцесс.UpdateInfoBase(ИнформационнаяБазаПроцесс);
			КонецЕсли;
			
			//Соединения с процессом
			
			СоединенияСПроцессом = РабочийПроцесс.GetInfoBaseConnections(ИнформационнаяБазаПроцесс);
			СоединенияКУдалению = Новый Массив;
			// удаление соединений
			Для Каждого Соединение Из СоединенияСПроцессом Цикл
				Если нРег(Соединение.AppID) = "1cv8c" Тогда 
					// если это соединения пользователей
					//СоединенияКУдалению.Добавить(Соединение);
				КонецЕсли;
				Если нРег(Соединение.AppID) = "comconsole" Тогда 
					// если это соединения с консолью
					//СоединенияКУдалению.Добавить(Соединение);
				КонецЕсли;
				Если нРег(Соединение.AppID) = "backgroundjob" И 
					(ПараметрыУправления.Свойство("УдалятьСеансыИСоединенияФоновыхЗаданий") И ПараметрыУправления.УдалятьСеансыИСоединенияФоновыхЗаданий) Тогда 
					// если это соединения фонового задания
					СоединенияКУдалению.Добавить(Соединение);
				КонецЕсли;
				Если нРег(Соединение.AppID) = "designer" И 
					(ПараметрыУправления.Свойство("УдалятьСеансыИСоединенияКонфигуратора") И ПараметрыУправления.УдалятьСеансыИСоединенияКонфигуратора) Тогда
					// если это соединения конфигуратора
					СоединенияКУдалению.Добавить(Соединение);
				КонецЕсли;
				Если Соединение.UserName = ИнформацияОСистеме.ИмяПользователяБазы И
					(ПараметрыУправления.Свойство("УдалятьСобственныеСеансы") И ПараметрыУправления.УдалятьСобственныеСеансы) Тогда
					// это текущий пользователь
					СоединенияКУдалению.Добавить(Соединение);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СоединениеКУдалению Из СоединенияКУдалению Цикл
				ВозвращаемыеДанные.ЗавершенныеСоединения.Добавить(СоединениеКУдалению.userName + ";" + СоединениеКУдалению.HostName + ";" + СоединениеКУдалению.ConnectedAt);
				РабочийПроцесс.Disconnect(СоединениеКУдалению);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

&НаСервере 
Функция ИсключитьНеЧитаемыеСимволыИзСтроки(Знач АнализируемыйТекст, ЗаменятьСимволы = Истина, СимволЗамены = " ") 
	
	// Читаемые символы. 
	Латиница = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"; 
	Кирилица = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя"; 
	Греческие = "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψω"; 
	Цифры = "0123456789"; 
	СпециальныеСимволы = "~`!@#$%^&*(){}[]_-=+\|/*:;.<>?,№«» "; 
	ДвойнаяКавычка = """"; 
	ОдинарнаяКавычка = "'"; 
	АпострофОбратный = "L9;";           // КодСимвола 769. Обратный для символа на букве "Ё". 
	АвторскоеПраво = "©";             // КодСимвола 169. "Copyright" - латинская буква C в окружности - авторское право. 
	Зарезервировано = "®";           // КодСимвола 174. "Registered" - латинская буква R в окружности - товарный знак. 
	ТоварныйЗнак = "™";               // Верхний  индекс ТМ. 
	ШирокоеТире = "—";                // КодСимвола 8212. 
	ДенежныеСимволы = "¤¢€£¥";  // Денежная единица, Цент, Евро, Фунт стерлингов, Иена или юань. 
	ДробныеСимволы = "½¼¾";    // Дроби: 1/2, 1/4, 3/4. 
	СимволыСтепени = "¹²³";         // Степени: 1, 2, 3 
	ПрочиеСимволы = "°±×÷Øƒµ"+Символ(167);    // Градус, Плюс/Минус, Знак умножения, Знак деления, Диаметр, Знак функции, Микро, Параграф. 
	
	ЧитаемыеСимволы = Латиница + Кирилица + Греческие + Цифры + СпециальныеСимволы + ШирокоеТире 
	+ ДвойнаяКавычка + ОдинарнаяКавычка + АпострофОбратный + АвторскоеПраво + Зарезервировано + ТоварныйЗнак 
	+ ДенежныеСимволы + ДробныеСимволы + СимволыСтепени + ПрочиеСимволы; 
	
	// Формирование результирующей строки. 
	ИтоговаяСтрока = ""; 
	Для НомерСимвола = 1 ПО СтрДлина(АнализируемыйТекст) Цикл 
		ТекущийСимвол = Сред(АнализируемыйТекст, НомерСимвола, 1); 
		// Заменяемые символы. Системный набор значений: "Символы": 
		Если ТекущийСимвол = Символы.ВК ИЛИ ТекущийСимвол = Символы.ВТаб ИЛИ ТекущийСимвол = Символы.НПП 
			ИЛИ ТекущийСимвол = Символы.ПС ИЛИ ТекущийСимвол = Символы.ПФ ИЛИ ТекущийСимвол = Символы.Таб Тогда 
			ТекущийСимвол = СимволЗамены; 
		КонецЕсли; 
		Если КодСимвола(ТекущийСимвол) = 21 Тогда    // Параграф. 
			ТекущийСимвол = Символ(167); 
		КонецЕсли; 
		Если Найти(ЧитаемыеСимволы, ТекущийСимвол) > 0 Тогда 
			ИтоговаяСтрока = ИтоговаяСтрока + ТекущийСимвол; 
		Иначе 
			Если ЗаменятьСимволы Тогда 
				ИтоговаяСтрока = ИтоговаяСтрока + СимволЗамены; 
			Иначе 
				// Сокращение строки на символ. 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ИтоговаяСтрока; 
	
КонецФункции 

&НаКлиенте
Процедура ПараметрыОбновленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Элементы.Обновления.ТекущиеДанные.Обновление) Тогда
		НоваяСтрока = ПараметрыОбновлений.Добавить();
		НоваяСтрока.Обновление = Элементы.Обновления.ТекущиеДанные.Обновление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
