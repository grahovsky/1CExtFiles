
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНач) Тогда
		Объект.ДатаНач = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаКон) Тогда
		Объект.ДатаКон = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	СписокВидовДокументовДляГрЗагрузки = ЭтаФорма.СписокВидовДокументовДляГрЗагрузки;
	СписокВидовДокументовДляГрЗагрузки.Добавить(2, "Расход по акту списания");
	СписокВидовДокументовДляГрЗагрузки.Добавить(7,	"Персонифицированная расходная накладная");
	СписокВидовДокументовДляГрЗагрузки.Добавить(8,	"Продажа в розницу");
	Для каждого ЭлементСписка Из СписокВидовДокументовДляГрЗагрузки Цикл
		Элементы.ТипДокумента.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла; 
	ЭтаФорма.ТипДокумента = 2;
	
	СписокСпособовГрЗагрузки = ЭтаФорма.СписокСпособовГрЗагрузки;
	СписокСпособовГрЗагрузки.Добавить(1, "добавлять в существующий");
	СписокСпособовГрЗагрузки.Добавить(2, "в новый документ");
	Для каждого ЭлементСписка Из СписокСпособовГрЗагрузки Цикл
		Элементы.СпособЗагрузки.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	ЭтаФорма.СпособЗагрузки = 2;
	
	ЭтаФорма.ЭтоБазаПроф=НЕ ЗначениеЗаполнено(Справочники.Организации.НайтиПоКоду("000000002"));
	
	ЗаполнениеСпискаОрганизаций();
	
	
	рдСписокВидовДокументовОбъект = ЭтаФорма.рдСписокВидовДокументов;
	рдСписокВидовДокументовОбъект.Очистить();
	рдСписокВидовДокументовОбъект.Добавить(1, "Приход от поставщика");
	рдСписокВидовДокументовОбъект.Добавить(2, "Расход по акту списания");
	рдСписокВидовДокументовОбъект.Добавить(4, "Перемещение между подразделениями");
	рдСписокВидовДокументовОбъект.Добавить(7,	"Персонифицированная расходная накладная");
	рдСписокВидовДокументовОбъект.Добавить(8,	"Продажа в розницу");                 
	рдСписокВидовДокументовОбъект.Добавить(10,	"Массовое списание на основании оказанных услуг");
	рдСписокВидовДокументовОбъект.Добавить(11,	"Персонифицированное списание на основании оказанных услуг");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ГрупповаяЗагрузка_Загрузить(Команда)
	
	ГрупповаяЗагрузка_ЗагрузитьНаСервере();
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры // ГрупповаяЗагрузка_Загрузить()

&НаСервере
Процедура ГрупповаяЗагрузка_ЗагрузитьНаСервере()
	
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	
	
	ЭтаФорма.мСтекСтраниц.Очистить();
	
	//. ЭтаФорма.рдДеревоДокументов.Строки.Очистить();
	//. ЭтаФорма.рдДеревоДокументовРеализации.Строки.Очистить();
	
	рдДеревоДокументовРеализацииОбъект = РеквизитФормыВЗначение("рдДеревоДокументовРеализации");
	рдДеревоДокументовРеализацииОбъект.Строки.Очистить();
	ЗначениеВРеквизитФормы(рдДеревоДокументовРеализацииОбъект,"рдДеревоДокументовРеализации");
	
	рдДеревоГрупповойЗагрузкиОбъект=РеквизитФормыВЗначение("рдДеревоГрупповойЗагрузки");
	рдДеревоГрупповойЗагрузкиОбъект.Строки.Очистить();
	
	//ЭтаФорма.ТаблицаДокументов.Очистить();
	
	//. ЭтаФорма.ТоварныеТаблицы.Очистить();
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес) Тогда
		ТоварныеТаблицыОбъект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес);
		Попытка
			ТоварныеТаблицыОбъект.Очистить();
		Исключение
			ТоварныеТаблицыОбъект=ПолучитьСтруктуруТоварныхТаблиц();
		КонецПопытки;
		
		ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.ТоварныеТаблицыАдрес);
	Иначе	
		ЭтаФорма.ТоварныеТаблицыАдрес=ПоместитьВоВременноеХранилище(ПолучитьСтруктуруТоварныхТаблиц(), ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли; 
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
		Попытка
			ТаблицаДокументовОбъект.Очистить();	
		Исключение
			ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
		КонецПопытки;
		ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.ТаблицаДокументовАдрес);
	Иначе	
		ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
		ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);		
	КонецЕсли;
	
	COMОбъектConnection = ОбработкаОбъект.ПолучитьСоединение();
	Если COMОбъектConnection = Неопределено Тогда
		Сообщить("Не удалось установить соединение");
		Возврат;	
	КонецЕсли;
	
	РазобратьДокументыГрупповойЗагрузки(COMОбъектConnection,ОбработкаОбъект);
	
	ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);
	
	ЗапомнитьСтраницуВСтеке( "СтраницаГрупповаяЗагрузка");	
	Если НЕ	ПроверитьНоменклатуру2() Тогда	
		мСтекСтраниц.Очистить();
		ОбработкаОбъект.ЗакрытьСоединение();
		Возврат;
	КонецЕсли;
	мСтекСтраниц.Очистить();
	
	ЗапомнитьСтраницуВСтеке( "СтраницаГрупповаяЗагрузка");
	Если НЕ	ПроверитьСклады2() Тогда	
		мСтекСтраниц.Очистить();
		ОбработкаОбъект.ЗакрытьСоединение();
		Возврат;
	КонецЕсли;
	мСтекСтраниц.Очистить();
	
	
	// Проверка папок номенклатуры
	// Для дальнейшего формирования необходимо, чтобы все папки имели соответствующий вид документа
	
	ТЗ_КэшВидовДокументов = Новый ТаблицаЗначений;
	ТЗ_КэшВидовДокументов.Колонки.Добавить("Папка");
	ТЗ_КэшВидовДокументов.Колонки.Добавить("ВидДокумента");
	
	СписокПапокБезВидаДокумента = Новый СписокЗначений;
	
	СписокСкладовИсключений = ПолучитьСписокСкладовИсключений();
	
	//Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
	//	ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
	//Иначе	
	//	ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
	//	ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);		
	//КонецЕсли;
	
	ТЗ_ИД_Объект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТЗ_ИД_Адрес);
	
	ТЗ_КэшНоменклатурыОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшНоменклатуры");
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументовОбъект Цикл
		
		// Фильтруем не участвующие в проверке
		Если СтрокаТаблицы.Ид_Вид = 1 Тогда
			//	Приход от поставщика
			Продолжить;
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 8 Тогда
			//	"Продажа в розницу"
			//Продолжить;
		ИначеЕсли (СтрокаТаблицы.Ид_Вид = 2)ИЛИ
			(СтрокаТаблицы.Ид_Вид = 7)ИЛИ
			(СтрокаТаблицы.Ид_Вид = 10)ИЛИ
			(СтрокаТаблицы.Ид_Вид = 11)
			Тогда
			//	Расход по акту списания
			//  Персонифицированная расходная накладная
			//  Массовое списание на основании оказанных услуг
			//  Персонифицированное списание на основании оказанных услуг
			// обработка этих документов одинакова
			
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 4 Тогда	
			// Перемещение между подразделениями
			
			Если СтрокаТаблицы.Ид_СкладКуда=16 Тогда
				// склад амбулаторно-поликлинического отделения
				Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл												
					// Номенклатура
					РезультатПоиска = ТЗ_КэшНоменклатурыОбъект.Найти(СтрокаТаблицыН.Ид_Номенклатура, "Ид_Медиалог"); 
					Если РезультатПоиска <> Неопределено Тогда
						СтрокаТаблицыН.Номенклатура = РезультатПоиска.Номенклатура;						
					КонецЕсли;
                КонецЦикла;
				Продолжить;	
			ИначеЕсли СписокСкладовИсключений.НайтиПоЗначению(СтрокаТаблицы.Ид_СкладКуда) <> Неопределено Тогда
				Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл												
					// Номенклатура
					РезультатПоиска = ТЗ_КэшНоменклатурыОбъект.Найти(СтрокаТаблицыН.Ид_Номенклатура, "Ид_Медиалог"); 
					Если РезультатПоиска <> Неопределено Тогда
						СтрокаТаблицыН.Номенклатура = РезультатПоиска.Номенклатура;						
					КонецЕсли;
                КонецЦикла;
				Продолжить;	
			КонецЕсли; 
			
		Иначе	
			Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл
												
			// Номенклатура
			РезультатПоиска = ТЗ_КэшНоменклатурыОбъект.Найти(СтрокаТаблицыН.Ид_Номенклатура, "Ид_Медиалог"); 
			Если РезультатПоиска <> Неопределено Тогда
				СтрокаТаблицыН.Номенклатура = РезультатПоиска.Номенклатура;						
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(СтрокаТаблицыН.Номенклатура) Тогда
				// Это нонсенс. Такого быть не может
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.Ид_Вид = 8 Тогда
				// Папки проверять не надо
				Продолжить;
			КонецЕсли;	
				
			ТекПапка = СтрокаТаблицыН.Номенклатура.Родитель;
			РезультатПоискаВидаДокумента = ТЗ_КэшВидовДокументов.Найти(ТекПапка);
				
			Если РезультатПоискаВидаДокумента <> Неопределено Тогда
				
				// Все Ок
										
			Иначе
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ТекПапка", ТекПапка);
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Рег.ИмяДокумента КАК ИмяДокумента
				|
				|ИЗ
				|	РегистрСведений._СоответствиеДокументовПапкам КАК Рег
				|ГДЕ
				|	Рег.Номенклатура = &ТекПапка
				|";
					
				ВремТЗ = Запрос.Выполнить().Выгрузить();
				Если ВремТЗ.Количество()>0 Тогда
					ТекВД = СокрЛП(ВремТЗ[0].ИмяДокумента);	
					
					НовСтрока = ТЗ_КэшВидовДокументов.Добавить();
					НовСтрока.Папка = ТекПапка;
					НовСтрока.ВидДокумента = ТекВД;
								
				Иначе	
					Если СписокПапокБезВидаДокумента.НайтиПоЗначению(ТекПапка)=Неопределено Тогда
						СписокПапокБезВидаДокумента.Добавить(ТекПапка);
					КонецЕсли;	
						
				КонецЕсли;	
			КонецЕсли;	

		КонецЦикла; 
	КонецЦикла;	
	
	Если СписокПапокБезВидаДокумента.Количество()>0 Тогда
		Сч=0;
		Сообщить("Имеются папки без соответствия виду документа. Обратитесь к системному администратору");
		Пока Сч < СписокПапокБезВидаДокумента.Количество() Цикл
			Сообщить(СокрЛП(СписокПапокБезВидаДокумента[Сч].Значение));
			Сч = Сч + 1;	
		КонецЦикла;	
		
		// Дальше - не грузим
		мСтекСтраницОбъект = ЭтаФорма.РеквизитФормыВЗначение("мСтекСтраниц");
		мСтекСтраницОбъект.Очистить();
		ЭтаФорма.ЗначениеВРеквизитФормы(мСтекСтраницОбъект, "мСтекСтраниц");
		Возврат;
		
	КонецЕсли;
		
		
	// Теперь - нарисовать
	
	ПоследняяСтрокаСклада = Неопределено;
	СтарыйСклад = Неопределено;
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументовОбъект Цикл
		
		Если (СтрокаТаблицы.Ид_Медиалог = "")И(СтрокаТаблицы.Номер_Медиалог = "")И(СтрокаТаблицы.Ид_Вид = "") Тогда
			
			// На этом этапе склад должен быть уже в СтрокаТаблицы (в кэше его искать не нужно)
			
			////Если ТЗ_КэшСкладов.Найти(СтрокаТаблицы.ИД_Склад, "Ид_Медиалог")<>Неопределено Тогда
			////	Продолжить;
			////КонецЕсли;
			
			Если СтарыйСклад <> СтрокаТаблицы.Склад Тогда
		    	СтарыйСклад = СтрокаТаблицы.Склад;
				ПоследняяСтрокаСклада = рдДеревоГрупповойЗагрузкиОбъект.Строки.Добавить();	
				ПоследняяСтрокаСклада.Уровень = 1;
				ПоследняяСтрокаСклада.СтрокаТаблицы = ТаблицаДокументовОбъект.Индекс(СтрокаТаблицы);
				ПоследняяСтрокаСклада.Склад_Номенклатура = СтарыйСклад;
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;	
				
		КонецЕсли;	
		
		Если ПоследняяСтрокаСклада = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
			
		
		//СО
		// Для "Расход по акту списания": Если тип акта списания = 3, то документ 1С - 
		// "ПередачаМатериаловВЭксплуатацию" - пропускаем его
		ЭтоСписаниеСпецОдежды = Ложь;
		Если СтрокаТаблицы.Ид_Вид = 2 Тогда
			Если СтрокаТаблицы.ТипАкта = 3 Тогда
				ЭтоСписаниеСпецОдежды = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		//////Если ЭтоСписаниеСпецОдежды Тогда
		//////	Продолжить;	
		//////КонецЕсли; 
			
		НоваяСтрока = ПоследняяСтрокаСклада.Строки.Добавить();
		НоваяСтрока.Уровень = 2;
		НоваяСтрока.СтрокаТаблицы = ТаблицаДокументовОбъект.Индекс(СтрокаТаблицы);
		
		//Если СтрокаТаблицы.Ид_Вид = 1 Тогда		
		//	НоваяСтрока.Вид = "Приход от поставщика";
		//Иначе
		Если СтрокаТаблицы.Ид_Вид = 8 Тогда
			НоваяСтрока.Вид = "Продажа в розницу";	
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 2 Тогда
			НоваяСтрока.Вид = "Расход по акту списания";	
		//ИначеЕсли СтрокаТаблицы.Ид_Вид = 4 Тогда			
		//	НоваяСтрока.Вид = "Перемещение между подразделениями";
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 7 Тогда
			НоваяСтрока.Вид = "Персонифицированная расходная накладная";
		//ИначеЕсли СтрокаТаблицы.Ид_Вид = 10 Тогда
		//	НоваяСтрока.Вид = "Массовое списание на основании оказанных услуг";
		//ИначеЕсли СтрокаТаблицы.Ид_Вид = 11 Тогда
		//	НоваяСтрока.Вид = "Персонифицированное списание на основании оказанных услуг";	
		Иначе
			НоваяСтрока.Вид = "В разработке";	
		КонецЕсли; 
		
		//НоваяСтрока.Документ = СокрЛП(СтрокаТаблицы.Номер_Медиалог)+" от "+СокрЛП(СтрокаТаблицы.ДатаДок);
		НоваяСтрока.Документ = СокрЛП(СтрокаТаблицы.Номер_Медиалог);
		НоваяСтрока.ДатаДок = СтрокаТаблицы.ДатаДок;
		
		СписокДокументов1С = СтрокаТаблицы.СписокДокументов1С;
		
		////////НоваяСтрока.Контрагент = СтрокаТаблицы.Контрагент;
		////////НоваяСтрока.Договор = СтрокаТаблицы.Договор;
		
		Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл
												
			// Номенклатура
			Если Не ЗначениеЗаполнено(СтрокаТаблицыН.Номенклатура) Тогда
				// Это нонсенс. Такого быть не может
				Продолжить;
			КонецЕсли;
			
			Если ТипДокумента = 8 Тогда
				РезультатПоискаВидаДокумента = Новый Структура("ВидДокумента", "РеализацияТоваровУслуг");
			Иначе	
				ТекПапка = СтрокаТаблицыН.Номенклатура.Родитель;
				РезультатПоискаВидаДокумента = ТЗ_КэшВидовДокументов.Найти(ТекПапка);		
			КонецЕсли; 
			
			//СО
			Если ЭтоСписаниеСпецОдежды Тогда
				РезультатПоискаВидаДокумента = "ПередачаМатериаловВЭксплуатацию";
			КонецЕсли;
				
			Если РезультатПоискаВидаДокумента = Неопределено Тогда
				// Это нонсенс. Такого быть не может
				Продолжить;
			Иначе
				
				//СО
				Если РезультатПоискаВидаДокумента = "ПередачаМатериаловВЭксплуатацию" Тогда
					ВД = "ПередачаМатериаловВЭксплуатацию";
				// Все Ок, делаем подмены
				ИначеЕсли РезультатПоискаВидаДокумента.ВидДокумента = "ПеремещениеТоваров" Тогда
					ВД = "ТребованиеНакладная";
				ИначеЕсли РезультатПоискаВидаДокумента.ВидДокумента = "РеализацияТоваровУслуг" Тогда
					ВД = "РеализацияТоваровУслуг";
				ИначеЕсли РезультатПоискаВидаДокумента.ВидДокумента = "ПередачаМатериаловВЭксплуатацию" Тогда
					ВД = "ПередачаМатериаловВЭксплуатацию";
				// Обработка ситуации со складами исключениями
				ИначеЕсли (СтрокаТаблицы.Ид_Вид = 2)И(
						(СтрокаТаблицы.Ид_Склад=16)ИЛИ(СписокСкладовИсключений.НайтиПоЗначению(СтрокаТаблицы.Ид_Склад) <> Неопределено)
						) Тогда
						ВД = "ТребованиеНакладная";	
				Иначе	
					ВД = "НеГрузить";
					Продолжить;
				КонецЕсли; 
				
				// Попытаемся найти документ в ТЗ_ИД
				РезультатПоиска = ТЗ_ИД_Объект.НайтиСтроки(Новый Структура("Ид_Документ,Ид_Номенклатура",СтрокаТаблицы.Ид_Медиалог,СтрокаТаблицыН.Ид_Номенклатура));
				Если РезультатПоиска.Количество()>0 Тогда
					ВД = РезультатПоиска[0].Ссылка;
					СтрокаТаблицыН.Документ1С = ВД;
				КонецЕсли; 
				
				НоваяСтрокаТовара = НоваяСтрока.Строки.Добавить();
				НоваяСтрокаТовара.Уровень = 3;
				НоваяСтрокаТовара.Склад_Номенклатура = СтрокаТаблицыН.Номенклатура;
				НоваяСтрокаТовара.Количество = СтрокаТаблицыН.Количество;
				НоваяСтрокаТовара.Документ1С = ВД;
				НоваяСтрокаТовара.СтрокаТаблицыН = СтрокаТаблицы.Товар.Индекс(СтрокаТаблицыН);
													
			КонецЕсли;		
		КонецЦикла;

					
		Если НоваяСтрока.Строки.Количество()=0 Тогда
			ПоследняяСтрокаСклада.Строки.Удалить(НоваяСтрока);
		Иначе	
			//ЭлементыФормы.рдДеревоДокументов.Развернуть(НоваяСтрока, Истина);
		КонецЕсли; 
		
			
	КонецЦикла; 
	
	ЗаполнитьСписокДокументов1Сгр();
	
	// Скроем уже загруженные если надо
	Если Объект.СкрыватьЗагруженные Тогда
		Для каждого СтрокаСклада Из рдДеревоГрупповойЗагрузкиОбъект.Строки Цикл
			Для каждого СтрокаДокумента Из СтрокаСклада.Строки Цикл
				СписокСтрокКУдалению = Новый СписокЗначений;
				Для каждого СтрокаНоменклатуры Из СтрокаДокумента.Строки Цикл				
					Если ТипЗнч(СтрокаНоменклатуры.Документ1С)<>Тип("Строка") Тогда
						Если ЗначениеЗаполнено(СтрокаНоменклатуры.Документ1С) Тогда
							
							//СтрокаДокумента.Строки.Удалить(СтрокаНоменклатуры);	
							СписокСтрокКУдалению.Добавить(СтрокаНоменклатуры);
							
						КонецЕсли; 				
					КонецЕсли; 
				КонецЦикла;
				Для каждого ЭлементСписка Из СписокСтрокКУдалению Цикл
				
					СтрокаДокумента.Строки.Удалить(ЭлементСписка.Значение);	
				
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 	
	КонецЕсли; 
	
	мСтекСтраницОбъект = ЭтаФорма.РеквизитФормыВЗначение("мСтекСтраниц");
	мСтекСтраницОбъект.Очистить();
	ЭтаФорма.ЗначениеВРеквизитФормы(мСтекСтраницОбъект, "мСтекСтраниц");
	
	
	ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);
	
	ЭтаФорма.ЗначениеВРеквизитФормы(рдДеревоГрупповойЗагрузкиОбъект, "рдДеревоГрупповойЗагрузки");
	
	ОбработкаОбъект.ЗакрытьСоединение();
			
КонецПроцедуры // ГрупповаяЗагрузка_ЗагрузитьНаСервере()

&НаСервере
Процедура ЗаполнитьСписокДокументов1Сгр()
	
	СписокДокументов1СгрОбъект=ЭтаФорма.СписокДокументов1Сгр;//РеквизитФормыВЗначение("СписокДокументов1Сгр");	
	СписокДокументов1СгрОбъект.Очистить();
	
	рдДеревоГрупповойЗагрузкиОбъект= РеквизитФормыВЗначение("рдДеревоГрупповойЗагрузки");
	
	// Заполним теперь СписокДокументов1Сгр
	Для каждого СтрокаСклада Из рдДеревоГрупповойЗагрузкиОбъект.Строки Цикл
		//
		СтрокаСклада.СписокДокументов1С.Очистить();
		Для каждого СтрокаДокумента Из СтрокаСклада.Строки Цикл
			Для каждого СтрокаНоменклатуры Из СтрокаДокумента.Строки Цикл				
				Если ТипЗнч(СтрокаНоменклатуры.Документ1С)<>Тип("Строка") Тогда
					Если ЗначениеЗаполнено(СтрокаНоменклатуры.Документ1С) Тогда
						СтрокаСклада.СписокДокументов1С.Добавить(СтрокаНоменклатуры.Документ1С);
						Если СписокДокументов1СгрОбъект.НайтиПоЗначению(СтрокаНоменклатуры.Документ1С)=Неопределено Тогда
						
							СписокДокументов1СгрОбъект.Добавить(СтрокаНоменклатуры.Документ1С);	
						
						КонецЕсли; 
					КонецЕсли; 				
				КонецЕсли; 
		    КонецЦикла;
		КонецЦикла; 
	КонецЦикла; 
	
	//ЭтаФорма.ЗначениеВРеквизитФормы(СписокДокументов1СгрОбъект, "СписокДокументов1Сгр");
	
КонецПроцедуры // ЗаполнитьСписокДокументов1Сгр()

&НаСервере
Функция ПолучитьСписокСкладовИсключений()
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|
	|	Рег.Ид	
	|
	|ИЗ
	|	РегистрСведений._СкладыИсключения КАК Рег
	|
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ид);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьСписокСкладовИсключений()

&НаСервере
Функция ПроверитьСклады2()
				
	Результат = Истина;
	
	ТЗ_КэшСкладовОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшСкладов");
	ТЗСкладовОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗСкладов");
	
	// 1. Заполнить ТЗ_КэшСкладов
	
	ТЗ_КэшСкладовОбъект.Очистить();
	ТЗСкладовОбъект.Очистить();
	
	Если НЕ ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		Сообщить("Отсутствует таблица документов");
		Возврат Ложь;
	КонецЕсли; 	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);
	
	
	// Сначала - склады откуда
	Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл
				
		Если ТЗ_КэшСкладовОбъект.Найти(СтрокаТаблицы.ИД_Склад, "Ид_Медиалог")<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаКэша = ТЗ_КэшСкладовОбъект.Добавить();
		НоваяСтрокаКэша.Ид_Медиалог = СтрокаТаблицы.ИД_Склад;
		НоваяСтрокаКэша.НаименованиеМедиалог = СтрокаТаблицы.СкладНаименованиеМедиалог;
				   
	КонецЦикла;
	
	// Потом - склады куда
	//
	Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл		
		
		Если СтрокаТаблицы.Ид_Вид <> 4 Тогда  // Фильтруем перемещения
			Продолжить;
		КонецЕсли;
		
		Если ТЗ_КэшСкладовОбъект.Найти(ТаблицаДокументов.ИД_СкладКуда, "Ид_Медиалог")<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаКэша = ТЗ_КэшСкладовОбъект.Добавить();
		НоваяСтрокаКэша.Ид_Медиалог = ТаблицаДокументов.ИД_СкладКуда;
		НоваяСтрокаКэша.НаименованиеМедиалог = ТаблицаДокументов.СкладКудаНаименованиеМедиалог;
				   
	КонецЦикла;
			
	// 2. В ТЗ_КэшСкладов заполнить колонку Склад
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшСкладовОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Рег.Склад КАК Склад,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеСкладов КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшСкладовОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.Склад = Выборка.Склад;
		
	КонецЦикла;
	
	// 2.1 Заполнить строки ТаблицаДокументов
	Для каждого СтрокаКэша Из ТЗ_КэшСкладовОбъект Цикл
		МассивСтрок = ТаблицаДокументов.НайтиСтроки(Новый Структура("Ид_Склад", СтрокаКэша.Ид_Медиалог));
		Если МассивСтрок.Количество()=0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			СтрокаМассива.Склад = СтрокаКэша.Склад;
		КонецЦикла; 
	КонецЦикла; 
	
	// 3. Оставшиеся незаполненными вывалить в ТЗСкладов на форму
	
	МассивСтрок = ТЗ_КэшСкладовОбъект.НайтиСтроки(Новый Структура("Склад", Справочники.Склады.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если СокрЛП(ЭлементМассива.Ид_Медиалог)="" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТЗСкладовОбъект.Добавить();
			НоваяСтрока.НаименованиеМедиалог = ЭлементМассива.НаименованиеМедиалог;
			НоваяСтрока.КодМедиалог = ЭлементМассива.Ид_Медиалог; 	
		КонецЦикла;
		
		Если ТЗСкладовОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСоответствиеСкладов;
			
			Сообщить("Имеются Склады без соответствия в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшСкладовОбъект, "ТЗ_КэшСкладов");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗСкладовОбъект, "ТЗСкладов");
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументов, ЭтаФорма.ТаблицаДокументовАдрес); 
	
	
	Возврат Результат;
	
КонецФункции // ПроверитьСклады2()

&НаСервере
// Возвращает ИСТИНА если вся номенклатура из документов есть в регистре
// _СоответствиеНоменклатуры
// Если какая-то номенклатура не найдена, возвращается ЛОЖЬ, заполняется таблица
// ТЗНоменклатуры на форме, выдается предупреждение, и открывается страница
// "СоответствиеНоменклатуры" на форме
//
Функция ПроверитьНоменклатуру2()
	
	Если НЕ ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		Сообщить("Отсутствует таблица документов");
		Возврат Ложь;
	КонецЕсли; 	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);
		
	Результат = Истина;
	
	// 1. Заполнить ТЗ_КэшНоменклатуры
	ТЗ_КэшНоменклатурыОбъект=ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшНоменклатуры");
	ТЗНоменклатурыОбъект=ЭтаФорма.РеквизитФормыВЗначение("ТЗНоменклатуры");
	ТЗ_КэшНоменклатурыОбъект.Очистить();
	ТЗНоменклатурыОбъект.Очистить();
	
	Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл
				
		Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл
			
			//Добавлено ограничение по Группе товаров ИД Медиалога 10000007 - Поступление от отдела снабжения (не грузится)
			Если ТЗ_КэшНоменклатурыОбъект.Найти(СтрокаТаблицыН.Ид_Номенклатура, "Ид_Медиалог")<>Неопределено ИЛИ СтрокаТаблицыН.Папка_Ид_Медиалог = 10000007 Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрокаКэша = ТЗ_КэшНоменклатурыОбъект.Добавить();
		
			НоваяСтрокаКэша.Ид_Медиалог = СтрокаТаблицыН.Ид_Номенклатура;
			// + Граховский К.Н. 20.05.2015
			//НоваяСтрокаКэша.НаименованиеМедиалог = СтрокаТаблицыН.НоменклатураНаименованиеМедиалог;
			НоваяСтрокаКэша.НаименованиеМедиалог = ИсключитьНеЧитаемыеСимволыИзСтроки(СтрокаТаблицыН.НоменклатураНаименованиеМедиалог, Истина, " ");
			// - Граховский К.Н. 20.05.2015
			НоваяСтрокаКэша.ЕИ = СтрокаТаблицыН.ЕИ_НаименованиеМедиалог;
			НоваяСтрокаКэша.ИД_ЕИ = СтрокаТаблицыН.ЕИ_Ид_Медиалог;
			НоваяСтрокаКэша.Код_ЕИ = СтрокаТаблицыН.ЕИ_Код_Медиалог;
			НоваяСтрокаКэша.НДС = СтрокаТаблицыН.НДС;	
			НоваяСтрокаКэша.Папка_Ид_Медиалог = СтрокаТаблицыН.Папка_Ид_Медиалог;			
			
		КонецЦикла;					   
	КонецЦикла;
	
	// 2. В ТЗ_КэшНоменклатуры заполнить колонку Номенклатура
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшНоменклатурыОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Номенклатура КАК Номенклатура,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеНоменклатуры КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшНоменклатурыОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.Номенклатура = Выборка.Номенклатура;
		
	КонецЦикла;
	
	// Заполнить Кэш папок
	
	//ТЗ_КэшПапок.Очистить();
	//ТЗПапок.Очистить();
	
	ТЗ_КэшПапокОбъект=ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшПапок");
	ТЗПапокОбъект=ЭтаФорма.РеквизитФормыВЗначение("ТЗПапок");
	ТЗ_КэшПапокОбъект.Очистить();
	ТЗПапокОбъект.Очистить();

	
	Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл	
		
		Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл
			
			Если ТЗ_КэшПапокОбъект.Найти(СтрокаТаблицыН.Папка_Ид_Медиалог, "Ид_Медиалог")<>Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрокаКэша = ТЗ_КэшПапокОбъект.Добавить();
		
			НоваяСтрокаКэша.Ид_Медиалог = СтрокаТаблицыН.Папка_Ид_Медиалог;
			НоваяСтрокаКэша.НаименованиеМедиалог = СтрокаТаблицыН.Папка_НаименованиеМедиалог;
							
		КонецЦикла;					   
	КонецЦикла;
	
	// В ТЗ_КэшПапок заполнить колонку Папка
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшПапокОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Номенклатура КАК Номенклатура,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеПапок КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшПапокОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.Номенклатура = Выборка.Номенклатура;
		
	КонецЦикла;
			
	// 3. Оставшиеся незаполненными вывалить в ТЗНоменклатуры на форму
	
	МассивСтрок = ТЗ_КэшНоменклатурыОбъект.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если СокрЛП(ЭлементМассива.Ид_Медиалог)="" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТЗНоменклатурыОбъект.Добавить();
			НоваяСтрока.НаименованиеМедиалог = ЭлементМассива.НаименованиеМедиалог;
			НоваяСтрока.КодМедиалог = ЭлементМассива.Ид_Медиалог; 
			НоваяСтрока.ЕдИзмМедиалог = ЭлементМассива.ЕИ; 
			НоваяСтрока.ИД_ЕИ = ЭлементМассива.ИД_ЕИ;
			НоваяСтрока.Код_ЕИ = ЭлементМассива.Код_ЕИ;
			НоваяСтрока.НДС = ЭлементМассива.НДС;
			//
			НоваяСтрока.КодПапкиМедиалога = ЭлементМассива.Папка_Ид_Медиалог;
			РезультатПоиска = ТЗ_КэшПапокОбъект.Найти(ЭлементМассива.Папка_Ид_Медиалог, "Ид_Медиалог");
			Если РезультатПоиска <> Неопределено Тогда
				НоваяСтрока.ПапкаМедиалога = РезультатПоиска.НаименованиеМедиалог;
				НоваяСтрока.Папка = РезультатПоиска.Номенклатура;
			КонецЕсли;	
		    		
		КонецЦикла;
		
		Если ТЗНоменклатурыОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.СтраницаСоответствиеНоменклатуры;
			//ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.СоответствиеНоменклатуры;
			
			Сообщить("Имеется Номенклатура без соответствия в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументов, ЭтаФорма.ТаблицаДокументовАдрес); 
		
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшНоменклатурыОбъект, "ТЗ_КэшНоменклатуры");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗНоменклатурыОбъект, "ТЗНоменклатуры");
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшПапокОбъект, "ТЗ_КэшПапок");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗПапокОбъект, "ТЗПапок");
		
	Возврат Результат;
	
КонецФункции // ПроверитьНоменклатуру2()

// + Граховский К.Н. 20.05.2015
&НаСервере 
Функция ИсключитьНеЧитаемыеСимволыИзСтроки(Знач АнализируемыйТекст, ЗаменятьСимволы = Истина, СимволЗамены = " ") 
	
	// Читаемые символы. 
	Латиница = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"; 
	Кирилица = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя"; 
	Греческие = "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψω"; 
	Цифры = "0123456789"; 
	СпециальныеСимволы = "~`!@#$%^&*(){}[]_-=+\|/*:;.<>?,№«» "; 
	ДвойнаяКавычка = """"; 
	ОдинарнаяКавычка = "'"; 
	АпострофОбратный = "L9;";           // КодСимвола 769. Обратный для символа на букве "Ё". 
	АвторскоеПраво = "©";             // КодСимвола 169. "Copyright" - латинская буква C в окружности - авторское право. 
	Зарезервировано = "®";           // КодСимвола 174. "Registered" - латинская буква R в окружности - товарный знак. 
	ТоварныйЗнак = "™";               // Верхний  индекс ТМ. 
	ШирокоеТире = "—";                // КодСимвола 8212. 
	ДенежныеСимволы = "¤¢€£¥";  // Денежная единица, Цент, Евро, Фунт стерлингов, Иена или юань. 
	ДробныеСимволы = "½¼¾";    // Дроби: 1/2, 1/4, 3/4. 
	СимволыСтепени = "¹²³";         // Степени: 1, 2, 3 
	ПрочиеСимволы = "°±×÷Øƒµ"+Символ(167);    // Градус, Плюс/Минус, Знак умножения, Знак деления, Диаметр, Знак функции, Микро, Параграф. 
	
	ЧитаемыеСимволы = Латиница + Кирилица + Греческие + Цифры + СпециальныеСимволы + ШирокоеТире 
	+ ДвойнаяКавычка + ОдинарнаяКавычка + АпострофОбратный + АвторскоеПраво + Зарезервировано + ТоварныйЗнак 
	+ ДенежныеСимволы + ДробныеСимволы + СимволыСтепени + ПрочиеСимволы; 
	
	// Формирование результирующей строки. 
	ИтоговаяСтрока = ""; 
	Для НомерСимвола = 1 ПО СтрДлина(АнализируемыйТекст) Цикл 
		ТекущийСимвол = Сред(АнализируемыйТекст, НомерСимвола, 1); 
		// Заменяемые символы. Системный набор значений: "Символы": 
		Если ТекущийСимвол = Символы.ВК ИЛИ ТекущийСимвол = Символы.ВТаб ИЛИ ТекущийСимвол = Символы.НПП 
			ИЛИ ТекущийСимвол = Символы.ПС ИЛИ ТекущийСимвол = Символы.ПФ ИЛИ ТекущийСимвол = Символы.Таб Тогда 
			ТекущийСимвол = СимволЗамены; 
		КонецЕсли; 
		Если КодСимвола(ТекущийСимвол) = 21 Тогда    // Параграф. 
			ТекущийСимвол = Символ(167); 
		КонецЕсли; 
		Если Найти(ЧитаемыеСимволы, ТекущийСимвол) > 0 Тогда 
			ИтоговаяСтрока = ИтоговаяСтрока + ТекущийСимвол; 
		Иначе 
			Если ЗаменятьСимволы Тогда 
				ИтоговаяСтрока = ИтоговаяСтрока + СимволЗамены; 
			Иначе 
				// Сокращение строки на символ. 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ИтоговаяСтрока; 
	
КонецФункции 
// - Граховский К.Н. 20.05.2015

&НаСервере
Процедура ЗапомнитьСтраницуВСтеке(ИмяСтраницы)
	НоваяСтраницаСтека = ЭтаФорма.мСтекСтраниц.Добавить();
	НоваяСтраницаСтека.Страница = ИмяСтраницы;
КонецПроцедуры // ЗапомнитьСтраницуВСтеке()

&НаСервере
Процедура ЗапомнитьПервуюСтраницуВСтеке(ИмяСтраницы)
	ЭтаФорма.мСтекСтраниц.Очистить();
	ЗапомнитьСтраницуВСтеке(ИмяСтраницы)
КонецПроцедуры // ЗапомнитьПервуюСтраницуВСтеке()

&НаКлиенте
Процедура ВернутьсяНаСтраницу() 
	
	Если ЭтаФорма.мСтекСтраниц.Количество()>0 Тогда	
		Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы[СокрЛП(мСтекСтраниц[0].Страница)];
		ЭтаФорма.мСтекСтраниц.Удалить(0);
	КонецЕсли;
	
КонецПроцедуры // ВернутьсяНаСтраницу()

&НаСервере
Процедура ЗаполнениеСпискаОрганизаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Рег.Организация КАК Организация,
	|   Рег.Ид КАК Ид,
	|	Рег.Наименование КАК Наименование,
	// Байдин 2018-01-09 /*
	|	ПодразделениеДляТалонов КАК ПодразделениеДляТалонов
	// */ Байдин 2018-01-09 
	|ИЗ
	|	РегистрСведений._СоответствиеОрганизаций КАК Рег
	|";
	ЭтаФорма.мТаблицаОрганизаций.Загрузить(Запрос.Выполнить().Выгрузить());
		
	//СписокВыбора = Новый СписокЗначений;
	Для каждого СтрокаТЗ Из мТаблицаОрганизаций Цикл
	    Наим=?(ПустаяСтрока(СтрокаТЗ.Наименование),СокрЛП(СтрокаТЗ.Организация),СтрокаТЗ.Наименование);
		//СписокВыбора(СтрокаТЗ.Ид, Наим);
		Элементы.Организация1.СписокВыбора.Добавить(СтрокаТЗ.Ид, Наим);
		Элементы.Организация.СписокВыбора.Добавить(СтрокаТЗ.Ид, Наим);
		Элементы.Организация2.СписокВыбора.Добавить(СтрокаТЗ.Ид, Наим);
		Элементы.Организация3.СписокВыбора.Добавить(СтрокаТЗ.Ид, Наим);
	КонецЦикла;
	
	
	//СписокВыбора.ЗагрузитьЗначения(ЭтаФорма.мТаблицаОрганизаций.Выгрузить(,"Организация").ВыгрузитьКолонку("Организация"));
	
	//Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	//
	//Элементы.Организация2.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	//Элементы.Организация3.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
	
	Если мТаблицаОрганизаций.Количество()>0  Тогда
		Объект.Организация = мТаблицаОрганизаций[0].Организация; // Организацию передергивать при изменении 
		// Организации1 не будем, т.к. Организация нужна только для коннекта
		ЭтаФорма.Организация1= мТаблицаОрганизаций[0].Ид;
	КонецЕсли; 
		
КонецПроцедуры // ЗаполнениеСпискаОрганизаций()

&НаСервере
Функция ПолучитьИДтекОрганизации()
	
	Результат = 0;
	
	мТаблицаОрганизацийОбъект=РеквизитФормыВЗначение("мТаблицаОрганизаций");
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		РезультатПоиска = мТаблицаОрганизацийОбъект.Найти(Объект.Организация,"Организация");
		Если РезультатПоиска<>Неопределено Тогда
		
			Результат = РезультатПоиска.Ид;	
		
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьИДтекОрганизации()

&НаСервере
Процедура РазобратьДокументыГрупповойЗагрузки(COMОбъектConnection,ОбработкаОбъект)
	
	ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
	ТЗ_КэшКонтрагентовОбъект=ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшКонтрагентов");
	
	ТекОрг = ЭтаФорма.Организация1; //ПолучитьИДтекОрганизации();  //-=Орг
	Если ТекОрг=0 Тогда
		Сообщить("Не определена организация");
		Возврат;	
	КонецЕсли;
	ТекстОтбораПоОрганизации = "ISNULL(FM_DEP1.MAIN_ORG_ID,0)="+Формат(ТекОрг,"ЧГ=");
	//-=Орг

	ТекстОтбораПоВидуДокумента = "(DM_DOC.DM_DOC_TYPE_ID = "+ЭтаФорма.ТипДокумента+")"+
	?(ТипДокумента=8,"AND(ISNULL(DM_TRANSFERS.FM_PAYMODE_ID, 2)=2)AND(DM_DOC.DM_WAREHOUSES_ID=4)","");
				
	// Доп.отбор Склады, которые нужно исключить из загрузки:
	// DM_WAREHOUSES_ID               Склад
	// 77                           Аптека ЛПУ до 30.06
	// 78                           Административно-хозяйственный до 30.06
	ОтборПоИсключаемымСкладам = "";
	//"AND (
	//|(DM_DOC.DM_WAREHOUSES_ID <> 77)
	//|
	//|AND
	//|
	//|(DM_DOC.DM_WAREHOUSES_ID <> 78)
	//|)";
	
	//Отбор по папке номенклатуры
	//?????????
	ОтборПоПапкеНоменклатуры = " AND 
	|(DM_GROUPS.DM_GROUPS_ID <> 10000007)
	| AND (DM_GROUPS.DM_GROUPS_ID <> 10000003)";
	ОтборПоПапкеНоменклатуры = "";

	
	ОтборПоОсновнымСкладамДляПеремещений = "";
	
	//Состояние("Заполнение таблицы единиц измерения");
	// Сначала заполним единицы измерения
	Попытка
		Recordset = Новый COMОбъект("ADODB.Recordset");
		
		ТекстЗапроса = "SELECT DISTINCT
		|	DM_MEDS.DM_MEDS_ID,
		|	DM_MEDS.LABEL,
		|   DM_MEDS_MEASURES.MEDS_MEASURE_FACTOR,
		|   DM_MEDS_MEASURES.MEASURE_FACTOR,
		|
		|
		|	DM_MEASURE.DM_MEASURE_ID,
		|	DM_MEASURE.LABEL AS MEASURELABEL,
		|	DM_MEASURE.CODE AS MEASURECODE
		|FROM DM_DOC  WITH (NOLOCK)
		|
		|LEFT JOIN DM_TRANSFERS  WITH (NOLOCK)
		|ON DM_DOC.DM_DOC_ID = DM_TRANSFERS.DM_DOC_ID 
		|
		|LEFT JOIN DM_LOTS  WITH (NOLOCK)
		|ON DM_TRANSFERS.DM_LOTS_ID = DM_LOTS.DM_LOTS_ID
		|
		|LEFT JOIN DM_MEDS  WITH (NOLOCK)
		|ON DM_LOTS.DM_MEDS_ID = DM_MEDS.DM_MEDS_ID 
		|
		|LEFT JOIN DM_WAREHOUSES  WITH (NOLOCK)
		|ON DM_WAREHOUSES.DM_WAREHOUSES_ID = DM_DOC.DM_WAREHOUSES_ID
		|
		|LEFT JOIN DM_MEDS_MEASURES  WITH (NOLOCK)
		|ON DM_MEDS.DM_MEDS_ID = DM_MEDS_MEASURES.DM_MEDS_ID
		|
		|LEFT JOIN DM_MEASURE  WITH (NOLOCK)
		|ON DM_MEDS_MEASURES.DM_MEASURE_ID = DM_MEASURE.DM_MEASURE_ID
		|
		|
		|	WHERE (DM_DOC.ACCEPT_DATE >= '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"')AND(DM_DOC.ACCEPT_DATE <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')AND";
		ТекстЗапроса = ТекстЗапроса + "
		|	("+ТекстОтбораПоВидуДокумента+")AND
		|	(ACCEPTED=1) "+ОтборПоИсключаемымСкладам+ОтборПоПапкеНоменклатуры+ОтборПоОсновнымСкладамДляПеремещений+"
		|
		|ORDER BY DM_MEDS.LABEL
		|";
		
		//|	DM_DOC.DM_DOC_ID,
		//|	DM_DOC.DM_WAREHOUSES_ID,

		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);
		ТаблицаЕдиницИзмерения = Новый ТаблицаЗначений;
		ТаблицаЕдиницИзмерения.Колонки.Добавить("DM_MEDS_ID");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("LABEL");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("MEDS_MEASURE_FACTOR");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("MEASURE_FACTOR");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("DM_MEASURE_ID");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("MEASURELABEL");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("MEASURECODE");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("Флаг");

		Пока НЕ Recordset.EOF Цикл
			MEASURECODE = Recordset.Fields("MEASURECODE").Value;
			MEASURELABEL = Recordset.Fields("MEASURELABEL").Value;
			Если MEASURECODE = NULL Тогда
				Recordset.MoveNext();
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = ТаблицаЕдиницИзмерения.Добавить();
			НоваяСтрока.DM_MEDS_ID = Recordset.Fields("DM_MEDS_ID").Value;
			НоваяСтрока.LABEL = Recordset.Fields("LABEL").Value;
			НоваяСтрока.MEDS_MEASURE_FACTOR = Recordset.Fields("MEDS_MEASURE_FACTOR").Value;
			НоваяСтрока.MEASURE_FACTOR = Recordset.Fields("MEASURE_FACTOR").Value;
			НоваяСтрока.DM_MEASURE_ID = Recordset.Fields("DM_MEASURE_ID").Value;
			НоваяСтрока.MEASURELABEL = MEASURELABEL;
			НоваяСтрока.MEASURECODE = MEASURECODE;
			НоваяСтрока.Флаг = 1;
			
			Recordset.MoveNext();
		КонецЦикла;

		// Проверить наличие 2х строк в таблице
		ТаблицаЕдиницИзмерения.Свернуть("DM_MEDS_ID,LABEL,MEDS_MEASURE_FACTOR,MEASURE_FACTOR,DM_MEASURE_ID,MEASURELABEL,MEASURECODE", "Флаг");		
		БылиДвойныеСтроки= Ложь;
		Для каждого СтрокаТаблицы Из ТаблицаЕдиницИзмерения Цикл
		    Если СтрокаТаблицы.Флаг < 2 Тогда
				Продолжить;
			КонецЕсли; 
			
			Сообщить(""+СтрокаТаблицы.LABEL+" : "+СтрокаТаблицы.MEASURELABEL);
			БылиДвойныеСтроки = Истина;
		
		КонецЦикла; 
				
	    Recordset.Close();
		Recordset = NULL;
		
		Если БылиДвойныеСтроки Тогда
		
			Сообщить("Встретилось несколько альтернативных единиц у одной номенклатуры");	
		    Возврат;
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	//Состояние("Заполнение документов");	
		
	Попытка
		
		Recordset = Новый COMОбъект("ADODB.Recordset");	
		
		//СО
		ТекстЗапроса = "SELECT 
		|	DM_DOC.DM_DOC_ID,
		|	DM_DOC.DOC_NUM,
		|	DM_DOC.DM_DOC_TYPE_ID,
		|   DM_DOC.ACCEPT_DATE AS DateDoc,
		|	DM_DOC.ACT_SPISANIYA_TYPE,
		|   DM_DOC.ACT_SPISANIYA_DEP,
		|	FM_DEP.LABEL AS DEP_LABEL,
		|   DM_DOC.ACT_SPISANIYA_USER,
		|	MEDECINS.NOM,
		|	MEDECINS.PRENOM,
		|	DM_DOC.FM_ORG_ID,
		|	FM_ORG.INN,
		|	FM_ORG.LABEL AS ORGLABEL,
		|	DM_DOC.DM_WAREHOUSES_ID,
		|	DM_WAREHOUSES.LABEL AS WAREHOUSESLABEL,
		|	DM_DOC.DM_SOURCE_WH_ID,
		|	DM_WAREHOUSES1.LABEL AS WAREHOUSES1LABEL,
		|	DM_MEDS.DM_MEDS_ID,
		|	DM_LOTS.FM_TAXE_IN_ID AS NDS,
		|	DM_LOTS.PRICE,
		|	DM_TRANSFERS.QUANTITY,
		|	DM_TRANSFERS.SUM_WOUT_NDS,
		|	DM_TRANSFERS.SUM_NDS,
		|	DM_TRANSFERS.NDS_IN_MONEY,
		|	DM_TRANSFERS.SALE_SUM,
		|   DM_TRANSFERS.TRANSFERS_SUM,
		|   DM_TRANSFERS.TRANSFERS_NDS,
		|	DM_TRANSFERS.MEASURE_FACTOR,
		|	ISNULL(DM_TRANSFERS.FM_PAYMODE_ID, 2) AS DM_TRANSFERS_PAYMODE,
		|	DM_MEDS.LABEL,
		|	DM_MEASURE.DM_MEASURE_ID,
		|	DM_MEASURE.LABEL AS MEASURELABEL,
		|	DM_MEASURE.CODE AS MEASURECODE,
		|	DM_GROUPS.DM_GROUPS_ID,
		|   DM_GROUPS.LABEL AS GROUPSLABEL
		|FROM DM_DOC  WITH (NOLOCK)
		|
		|LEFT JOIN DM_TRANSFERS  WITH (NOLOCK)
		|ON DM_DOC.DM_DOC_ID = DM_TRANSFERS.DM_DOC_ID 
		|
		|LEFT JOIN DM_LOTS  WITH (NOLOCK)
		|ON DM_TRANSFERS.DM_LOTS_ID = DM_LOTS.DM_LOTS_ID
		|
		|LEFT JOIN DM_MEDS  WITH (NOLOCK)
		|ON DM_LOTS.DM_MEDS_ID = DM_MEDS.DM_MEDS_ID 
		|
		|LEFT JOIN DM_WAREHOUSES  WITH (NOLOCK)
		|ON DM_WAREHOUSES.DM_WAREHOUSES_ID = DM_DOC.DM_WAREHOUSES_ID
		|
		|LEFT JOIN DM_WAREHOUSES AS DM_WAREHOUSES1  WITH (NOLOCK)
		|ON DM_WAREHOUSES1.DM_WAREHOUSES_ID = DM_DOC.DM_SOURCE_WH_ID
		|		
		|LEFT JOIN FM_DEP AS FM_DEP1  WITH (NOLOCK)
		|ON DM_WAREHOUSES.FM_DEP_ID = FM_DEP1.FM_DEP_ID
		|
		|LEFT JOIN FM_ORG  WITH (NOLOCK)
		|ON DM_DOC.FM_ORG_ID = FM_ORG.FM_ORG_ID 
		|
		|LEFT JOIN DM_MEASURE  WITH (NOLOCK)
		|ON DM_MEASURE.DM_MEASURE_ID = DM_MEDS.DM_MEASURE_ID
		|
		|LEFT JOIN DM_GROUPS  WITH (NOLOCK)
		|ON DM_MEDS.DM_GROUPS_ID = DM_GROUPS.DM_GROUPS_ID
		|
		|LEFT JOIN FM_DEP  WITH (NOLOCK)
		|ON DM_DOC.ACT_SPISANIYA_DEP = FM_DEP.FM_DEP_ID 
		|
		|LEFT JOIN MEDECINS  WITH (NOLOCK)
		|ON MEDECINS.MEDECINS_ID = DM_DOC.ACT_SPISANIYA_USER
		|
		|	WHERE (DM_DOC.ACCEPT_DATE >= '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"') AND(DM_DOC.ACCEPT_DATE <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')AND";
		ТекстЗапроса = ТекстЗапроса + "
		|	"+ТекстОтбораПоВидуДокумента+"AND("+ТекстОтбораПоОрганизации+")AND
		|	(ACCEPTED=1) "+ОтборПоИсключаемымСкладам+ОтборПоПапкеНоменклатуры+"
		|
		|ORDER BY  DM_DOC.DM_WAREHOUSES_ID, DM_DOC.ACCEPT_DATE, DM_DOC.DM_DOC_ID
		|";
		
		// |   DM_TRANSFERS.TRANSFERS_R_SUM,
		// |   DM_TRANSFERS.TRANSFERS_R_NDS,
		
		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);
		
		СтарыйИдДокумента = "";
		СтарыйИдСклада = "";
		
		ТоварыТекущегоДокумента = Неопределено;
		
		СписокУжеЗагруженных = Новый СписокЗначений; // Сюда включаем документы, которые уже загружены
		СписокУжеПроверенных = Новый СписокЗначений; // не групповым способом
		
		СписокЗагружаемых = Новый СписокЗначений; // Список с Ид документов Медиалога, встречающихся в дереве
							
		Пока НЕ Recordset.EOF Цикл
			
			Ид_Склад = Recordset.Fields("DM_WAREHOUSES_ID").Value;
			Если ПустаяСтрока(Ид_Склад) Тогда
				// Неожиданная Лажа
				Recordset.MoveNext();
				Продолжить;
			КонецЕсли;
			
			Если СтарыйИдСклада <> Ид_Склад Тогда
				// Поменялся склад. Если предыдущая строка - то же группировочная, ее надо удалить,
				// т.к. под ней нет документов
				Если ТаблицаДокументовОбъект.Количество()>0 Тогда
					НС = ТаблицаДокументовОбъект.Количество()-1;
					Если (ТаблицаДокументовОбъект[НС].Ид_Медиалог = "")И(ТаблицаДокументовОбъект[НС].Номер_Медиалог = "")
						И(ТаблицаДокументовОбъект[НС].Ид_Вид = "") Тогда
					
						ТаблицаДокументовОбъект.Удалить(НС);	
					
					КонецЕсли; 				
				КонецЕсли; 
								
				НоваяСтрока = ТаблицаДокументовОбъект.Добавить();
				НоваяСтрока.Ид_Медиалог = "";     // Признаки группировочной строки склада
				НоваяСтрока.Номер_Медиалог = "";  //
				НоваяСтрока.Ид_Вид = "";          //
				НоваяСтрока.Товар = ПолучитьСтруктуруТаблицыТоваров(); // Это - чтобы не клинило далее
			
				НоваяСтрока.Ид_Склад = Ид_Склад;
				НоваяСтрока.СкладНаименованиеМедиалог = Recordset.Fields("WAREHOUSESLABEL").Value;
			КонецЕсли;	
						
			ИД_Документа = СокрЛП(Recordset.Fields("DM_DOC_ID").Value);
			Если ПустаяСтрока(ИД_Документа) Тогда
				// Неожиданная Лажа
				Recordset.MoveNext();
				Продолжить;
			КонецЕсли;	
			
			// Если ИД_Документа уже загружен не групповым способом, сюда эту строку тащить не надо
			// т.е. необходимо проверить по СписокУжеЗагруженных и СписокУжеПроверенных
			ГрузитьНадо = Истина;
			Если СписокУжеЗагруженных.НайтиПоЗначению(ИД_Документа)<>Неопределено Тогда
				ГрузитьНадо = Ложь;
			Иначе
				// Попробовать заглянуть в регистр
				Если СписокУжеПроверенных.НайтиПоЗначению(ИД_Документа)=Неопределено Тогда
					ЗапросСоответствияДокументов = Новый Запрос;
					ЗапросСоответствияДокументов.УстановитьПараметр("Ид_Медиалог", ИД_Документа);
					ЗапросСоответствияДокументов.Текст = "ВЫБРАТЬ
					|	Рег.Документ,	
					|   Рег.Ид
					|ИЗ
					|	РегистрСведений._СоответствиеДокументов КАК Рег
					|ГДЕ
					|	Рег.Ид = &Ид_Медиалог
					|";
				
					Если ЗапросСоответствияДокументов.Выполнить().Пустой() Тогда
						СписокУжеПроверенных.Добавить(ИД_Документа);	
					Иначе	
						ГрузитьНадо = Ложь;
						СписокУжеПроверенных.Добавить(ИД_Документа);	
						СписокУжеЗагруженных.Добавить(ИД_Документа);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли; 
			Если НЕ ГрузитьНадо Тогда
				Recordset.MoveNext();
				Продолжить;
			КонецЕсли; 
			
			Если СтарыйИдДокумента <> Recordset.Fields("DM_DOC_ID").Value Тогда
								
				НоваяСтрока = ТаблицаДокументовОбъект.Добавить();
				НоваяСтрока.СписокДокументов1С = Новый СписокЗначений;
				НоваяСтрока.Ид_Медиалог = Recordset.Fields("DM_DOC_ID").Value;
				СписокЗагружаемых.Добавить(НоваяСтрока.Ид_Медиалог);
				НоваяСтрока.ДатаДок = Recordset.Fields("DateDoc").Value;
				НоваяСтрока.Ид_Вид = Recordset.Fields("DM_DOC_TYPE_ID").Value;
				НоваяСтрока.Номер_Медиалог = Recordset.Fields("DOC_NUM").Value;
				//СО
				НоваяСтрока.ТипАкта = Recordset.Fields("ACT_SPISANIYA_TYPE").Value;
				НоваяСтрока.ОтделениеАкта = Recordset.Fields("ACT_SPISANIYA_DEP").Value;
				НоваяСтрока.ОтделениеАкта_Наименование = Recordset.Fields("DEP_LABEL").Value;
				
				// Контрагент
				Ид_Медиалог = Recordset.Fields("FM_ORG_ID").Value;
								
				НоваяСтрока.Ид_Контрагент = Ид_Медиалог;
				НоваяСтрока.КонтрагентИННМедиалог = Recordset.Fields("INN").Value;
				НоваяСтрока.КонтрагентНаименованиеМедиалог = Recordset.Fields("ORGLABEL").Value;
				
				РезультатПоиска = ТЗ_КэшКонтрагентовОбъект.Найти(Ид_Медиалог, "Ид_Медиалог"); 
				Если РезультатПоиска <> Неопределено Тогда
					НоваяСтрока.Контрагент = РезультатПоиска.Контрагент;						
					//НоваяСтрока.Договор = РезультатПоиска.Контрагент.ОсновнойДоговорКонтрагента;
				ИначеЕсли НоваяСтрока.Ид_Контрагент <> NULL Тогда	
				
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Ид_Медиалог", НоваяСтрока.Ид_Контрагент);
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Рег.Контрагент КАК Контрагент,
					|	Рег.Ид КАК Ид
					|ИЗ
					|	РегистрСведений._СоответствиеКонтрагентов КАК Рег
					|ГДЕ
					|	Рег.Ид = &Ид_Медиалог
					|";
		
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаКэша = ТЗ_КэшКонтрагентовОбъект.Добавить();
						СтрокаКэша.Ид_Медиалог = НоваяСтрока.Ид_Контрагент;
						СтрокаКэша.ИННМедиалог = НоваяСтрока.КонтрагентИННМедиалог;
						СтрокаКэша.НаименованиеМедиалог = НоваяСтрока.КонтрагентНаименованиеМедиалог;
						СтрокаКэша.Контрагент = Выборка.Контрагент;	
						НоваяСтрока.Контрагент = Выборка.Контрагент;
					КонецЕсли;						
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
					НоваяСтрока.Договор = ПолучитьДоговорКонтрагента(НоваяСтрока.Контрагент);					
		        КонецЕсли;
						
				//РезультатПоиска = ТЗ_КэшКонтрагентов.Найти(Ид_Медиалог, "Ид_Медиалог"); 
				//Если РезультатПоиска <> Неопределено Тогда
				//	НоваяСтрока.Контрагент = РезультатПоиска.Контрагент;						
				//	НоваяСтрока.Договор = РезультатПоиска.Контрагент.ОсновнойДоговорКонтрагента;
				//КонецЕсли;
				// Склад
				
				Ид_Медиалог = Recordset.Fields("DM_WAREHOUSES_ID").Value;
				НоваяСтрока.Ид_Склад = Ид_Медиалог;
				НоваяСтрока.СкладНаименованиеМедиалог = Recordset.Fields("WAREHOUSESLABEL").Value;
				
				Ид_Медиалог = Recordset.Fields("DM_SOURCE_WH_ID").Value;
				НоваяСтрока.Ид_СкладКуда = Ид_Медиалог;
				НоваяСтрока.СкладКудаНаименованиеМедиалог = Recordset.Fields("WAREHOUSES1LABEL").Value;
				
				СвернутьТаблицуТоваров(ТоварыТекущегоДокумента);
				
				НоваяСтрока.Товар = ПолучитьСтруктуруТаблицыТоваров();
				ТоварыТекущегоДокумента = НоваяСтрока.Товар;

				СтарыйИдДокумента = Recordset.Fields("DM_DOC_ID").Value;
			КонецЕсли; 
						
			Если ТоварыТекущегоДокумента = Неопределено Тогда
				// Это какая-то лажа
				Recordset.MoveNext();
				Продолжить;
			КонецЕсли; 
			
			НоваяСтрокаТоваров = ТоварыТекущегоДокумента.Добавить();
			
			// Номенклатура
			Ид_Медиалог = Recordset.Fields("DM_MEDS_ID").Value;
			НоваяСтрокаТоваров.Ид_Номенклатура = Ид_Медиалог;
			НоваяСтрокаТоваров.НоменклатураНаименованиеМедиалог = Recordset.Fields("LABEL").Value;
			
			//СО
			Сотр = Recordset.Fields("ACT_SPISANIYA_USER").Value;
			Если (Сотр <> NULL)И(ЗначениеЗаполнено(Сотр)) Тогда
				НоваяСтрокаТоваров.СотрудникАкта = Сотр;
				НоваяСтрокаТоваров.ФИО = СокрЛП(Recordset.Fields("NOM").Value)+ " " +СокрЛП(Recordset.Fields("PRENOM").Value);	
			КонецЕсли;
			
			// 2011-07-20 Менять единицы пока не будем
			НоваяСтрокаТоваров.ЕИ_Ид_Медиалог = Recordset.Fields("DM_MEASURE_ID").Value;
			НоваяСтрокаТоваров.ЕИ_НаименованиеМедиалог = Recordset.Fields("MEASURELABEL").Value;
			НоваяСтрокаТоваров.ЕИ_Код_Медиалог = Recordset.Fields("MEASURECODE").Value;
			
			// Здесь - попытаемся поменять единицу измерения
			НайденнаяСтрока = ТаблицаЕдиницИзмерения.Найти(НоваяСтрокаТоваров.Ид_Номенклатура, "DM_MEDS_ID");
			Доп_Коэффициент = 1;
			Если НайденнаяСтрока = Неопределено Тогда
				// Нет альтернативных единиц
				//////НоваяСтрокаТоваров.ЕИ_Ид_Медиалог = Recordset.Fields("DM_MEASURE_ID").Value;
				//////НоваяСтрокаТоваров.ЕИ_НаименованиеМедиалог = Recordset.Fields("MEASURELABEL").Value;
				//////НоваяСтрокаТоваров.ЕИ_Код_Медиалог = Recordset.Fields("MEASURECODE").Value;
			    Доп_Коэффициент = 1;
			Иначе
				// Подмена
				//////НоваяСтрокаТоваров.ЕИ_Ид_Медиалог = НайденнаяСтрока.DM_MEASURE_ID;
				//////НоваяСтрокаТоваров.ЕИ_НаименованиеМедиалог = НайденнаяСтрока.MEASURELABEL;
				//////НоваяСтрокаТоваров.ЕИ_Код_Медиалог = НайденнаяСтрока.MEASURECODE;
                Доп_Коэффициент = НайденнаяСтрока.MEASURE_FACTOR; //-=1 НайденнаяСтрока.MEDS_MEASURE_FACTOR;
				Если Доп_Коэффициент = NULL Тогда
					Доп_Коэффициент = 1;
				ИначеЕсли Доп_Коэффициент = 0 Тогда
					Доп_Коэффициент = 1;
				Иначе
					//Доп_Коэффициент = Число(Доп_Коэффициент);	
				КонецЕсли;	
			КонецЕсли;
			
            // Т.е все суммы, передаваемые ранее в 1с из Медиалога по списаниям, 
			// перемещениям или поступлениям товара должны умножаться на значение 
			// поля DM_TRANSFERS.MEASURE_FACTOR и если MEASURE_FACTOR = 1, то еще на количество 
			// альтернативных единиц в одной основной (MEDS_MEASURE_FACTOR).
			
			MEASURE_FACTOR = Recordset.Fields("MEASURE_FACTOR").Value;
			Если MEASURE_FACTOR = 1 Тогда
				 
			Иначе			 
				Если MEASURE_FACTOR = NULL Тогда
					MEASURE_FACTOR = 1;
				ИначеЕсли MEASURE_FACTOR = 0 Тогда
					MEASURE_FACTOR = 1;
				Иначе
					MEASURE_FACTOR = Число(MEASURE_FACTOR);	
				КонецЕсли;
				Доп_Коэффициент = MEASURE_FACTOR;
			КонецЕсли;
			
			НДС = Recordset.Fields("NDS").Value;
			// 1-Без, 3-18, 4-10
			Если НДС = 1 Тогда
				НДС = 0;
			ИначеЕсли НДС = 4 Тогда
				НДС = 10;
			Иначе
				НДС = 18;
			КонецЕсли;	
			
			// Определение ставки ндс
		    НДС = ПолучитьНДСвВидеЧисла(ПолучитьВВидеЧисла(Recordset.Fields("SUM_WOUT_NDS").Value),ПолучитьВВидеЧисла(Recordset.Fields("NDS_IN_MONEY").Value));
			
			НоваяСтрокаТоваров.НДС = НДС;

			//РезультатПоиска = ТЗ_КэшНоменклатуры.Найти(Ид_Медиалог, "Ид_Медиалог");
			//Если РезультатПоиска <> Неопределено Тогда
			//	НоваяСтрокаТоваров.Номенклатура = РезультатПоиска.Номенклатура;	
			//КонецЕсли;
			
			// Папка
			НоваяСтрокаТоваров.Папка_Ид_Медиалог = Recordset.Fields("DM_GROUPS_ID").Value;
			НоваяСтрокаТоваров.Папка_НаименованиеМедиалог = Recordset.Fields("GROUPSLABEL").Value;
			
			// Цена
			//НоваяСтрокаТоваров.Цена = Recordset.Fields("PRICE").Value;
			НоваяСтрокаТоваров.Цена = Recordset.Fields("SUM_WOUT_NDS").Value;
			//НоваяСтрокаТоваров.Цена = НоваяСтрокаТоваров.Цена * Доп_Коэффициент;
			// Сумма с НДС
			//НоваяСтрокаТоваров.Сумма = Recordset.Fields("SUM_NDS").Value;
			// НДС
			//НоваяСтрокаТоваров.СуммаНДС = Recordset.Fields("NDS_IN_MONEY").Value;
			// Количество
			Если MEASURE_FACTOR <> 1 Тогда  //-=1
				НоваяСтрокаТоваров.Количество = Окр(ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value) * Доп_Коэффициент,3,1);	
				//НоваяСтрокаТоваров.Цена = Окр(НоваяСтрокаТоваров.Цена / ?(Доп_Коэффициент=0,1,Доп_Коэффициент),2,1);
			Иначе
				НоваяСтрокаТоваров.Количество = ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value);	
				//НоваяСтрокаТоваров.Цена = НоваяСтрокаТоваров.Цена * Доп_Коэффициент;
			КонецЕсли;
			
			// 2011-07-11
			//////Результат.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			//////Результат.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			//////Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,5)));
			////НоваяСтрокаТоваров.Сумма = ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_SUM").Value)-ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_NDS").Value);
			////НоваяСтрокаТоваров.СуммаНДС = ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_NDS").Value);
			////НоваяСтрокаТоваров.Цена = НоваяСтрокаТоваров.Сумма / ?(НоваяСтрокаТоваров.Количество=0,1,НоваяСтрокаТоваров.Количество);
			
			// 2014-10-16
			////НоваяСтрокаТоваров.Сумма = ПолучитьВВидеЧисла(Recordset.Fields("SUM_WOUT_NDS").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value) * ПолучитьВВидеЧисла(Recordset.Fields("MEASURE_FACTOR").Value);
			////НоваяСтрокаТоваров.СуммаНДС = ПолучитьВВидеЧисла(Recordset.Fields("NDS_IN_MONEY").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value) * ПолучитьВВидеЧисла(Recordset.Fields("MEASURE_FACTOR").Value) ;
			////НоваяСтрокаТоваров.Цена = НоваяСтрокаТоваров.Сумма / ?(НоваяСтрокаТоваров.Количество=0,1,НоваяСтрокаТоваров.Количество);
			
			НоваяСтрокаТоваров.Сумма = ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_SUM").Value)-ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_NDS").Value);
			НоваяСтрокаТоваров.СуммаНДС = ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_NDS").Value);
			НоваяСтрокаТоваров.Цена = НоваяСтрокаТоваров.Сумма / ?(НоваяСтрокаТоваров.Количество=0,1,НоваяСтрокаТоваров.Количество);
			// 2014-10-16
			
			// 2011-07-13
			//////
			////// 2011-07-04
			////НоваяСтрокаТоваров.СуммаВРознице = ПолучитьВВидеЧисла(Recordset.Fields("SALE_SUM").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value);
			////НоваяСтрокаТоваров.СуммаВРозницеСНДС = ПолучитьВВидеЧисла(Recordset.Fields("SALE_SUM").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value);
			////НоваяСтрокаТоваров.СуммаВРознице = Окр(НоваяСтрокаТоваров.СуммаВРознице*100/(100 + НоваяСтрокаТоваров.НДС),2,1);
			//////////НоваяСтрокаТоваров.СуммаВРозницеСНДС = ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_R_SUM").Value);
			//////////НоваяСтрокаТоваров.СуммаВРознице = НоваяСтрокаТоваров.СуммаВРозницеСНДС - ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_R_NDS").Value);
			 
			НоваяСтрокаТоваров.СуммаВРознице = ПолучитьВВидеЧисла(Recordset.Fields("SALE_SUM").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value) * ПолучитьВВидеЧисла(Recordset.Fields("MEASURE_FACTOR").Value);
			НоваяСтрокаТоваров.СуммаВРознице = Окр(НоваяСтрокаТоваров.СуммаВРознице*100/(100 + НоваяСтрокаТоваров.НДС),2,1);
			НоваяСтрокаТоваров.СуммаВРозницеСНДС = ПолучитьВВидеЧисла(Recordset.Fields("SALE_SUM").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value) * ПолучитьВВидеЧисла(Recordset.Fields("MEASURE_FACTOR").Value);
			
			
			НоваяСтрокаТоваров.ЦенаВРознице = Окр(НоваяСтрокаТоваров.СуммаВРознице / ?(НоваяСтрокаТоваров.Количество=0,1,НоваяСтрокаТоваров.Количество),2,1);
			НоваяСтрокаТоваров.ЦенаВРозницеСНДС = Окр(НоваяСтрокаТоваров.СуммаВРозницеСНДС / ?(НоваяСтрокаТоваров.Количество=0,1,НоваяСтрокаТоваров.Количество),2,1);
															
			Recordset.MoveNext();	   
		КонецЦикла;
		
		Recordset.Close();
		Recordset = NULL;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;	
	
	// Заполнить поле Документ1С в таблице ТаблицаДокументов.Товар 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Список_Ид", СписокЗагружаемых);
	
	Если ЭтаФорма.ТипДокумента = 8 Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|   ТЧ_Ид.Ссылка КАК Ссылка,
		|	ТЧ_Ид.Ид_Документ,
		|   ТЧ_Ид.Ид_Номенклатура,
		|   ТЧ_Ид.Ключ,
		|	СУММА(ТЧ_Ид.Количество) КАК Количество
		|
		|ИЗ
		|	Документ.РеализацияТоваровУслуг._ТоварыМедиалога КАК ТЧ_Ид
		|ГДЕ
		|	(НЕ ТЧ_Ид.Ссылка.ПометкаУдаления)И(ТЧ_Ид.Ссылка._ТипГрупповогоДокумента=1)И	
		|   (ТЧ_Ид.Ид_Документ В (&Список_Ид))
		|СГРУППИРОВАТЬ ПО 
		|	ТЧ_Ид.Ссылка,ТЧ_Ид.Ид_Документ,ТЧ_Ид.Ид_Номенклатура,ТЧ_Ид.Ключ	
		|";	
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|   ТЧ_Ид.Ссылка КАК Ссылка,
		|	ТЧ_Ид.Ид_Документ,
		|   ТЧ_Ид.Ид_Номенклатура,
		|   ТЧ_Ид.Ключ,
		|	СУММА(ТЧ_Ид.Количество) КАК Количество
		|
		|ИЗ
		|	Документ.ТребованиеНакладная._МатериалыМедиалога КАК ТЧ_Ид
		|ГДЕ
		|	(НЕ ТЧ_Ид.Ссылка.ПометкаУдаления)И(ТЧ_Ид.Ссылка._ТипГрупповогоДокумента=1)И	
		|   (ТЧ_Ид.Ид_Документ В (&Список_Ид))
		|СГРУППИРОВАТЬ ПО 
		|	ТЧ_Ид.Ссылка,ТЧ_Ид.Ид_Документ,ТЧ_Ид.Ид_Номенклатура,ТЧ_Ид.Ключ	
		|";	
	КонецЕсли; 
		
	ТЗ_ИД = Запрос.Выполнить().Выгрузить();
	
	ЭтаФорма.ТЗ_ИД_Адрес=ПоместитьВоВременноеХранилище(ТЗ_ИД, ЭтаФорма.УникальныйИдентификатор);
	
	ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшКонтрагентовОбъект, "ТЗ_КэшКонтрагентов");
		
	//Сообщить("Окончание работы обработки");
	
КонецПроцедуры // РазобратьДокументыГрупповойЗагрузки()

&НаСервере
Процедура СвернутьТаблицуТоваров(ТЗ)

	Если ТипЗнч(ТЗ)<>Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ.Свернуть("Номенклатура,Ид_Номенклатура,НоменклатураНаименованиеМедиалог,ЕИ_Ид_Медиалог,ЕИ_НаименованиеМедиалог,ЕИ_Код_Медиалог,НДС,Папка_Ид_Медиалог,Папка_НаименованиеМедиалог,Папка,Цена,СчетУчета,Документ1С,СотрудникАкта,ФИО,ЦенаВРозницеСНДС","Сумма,СуммаНДС,Количество");	

КонецПроцедуры // СвернутьТаблицуТоваров(ТЗ)

&НаСервере
Функция ПолучитьВВидеЧисла(Значение_)
	
	Результат = 0;
	Если (Значение_<>NULL)И(Значение_<>Неопределено) Тогда
		Результат = Число(Значение_);
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции // ПолучитьВВидеЧисла()

&НаСервере
Функция ПолучитьНДСвВидеЧисла(СуммаБезНДС, НДС)
	
	Если СуммаБезНДС = 0 Тогда
		Возврат 0;
	КонецЕсли; 
	
	К = НДС * 100 / СуммаБезНДС;
	К = Макс(К,-К);
	Если К < 1  Тогда
		Результат = 0;
	ИначеЕсли К < 12 Тогда	
		Результат = 10;	
	Иначе
		Результат = 18;	
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьНДСвВидеЧисла()

&НаСервере
Функция ПолучитьСтруктуруТаблицыТоваров()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Ид_Номенклатура");
	Результат.Колонки.Добавить("НоменклатураНаименованиеМедиалог");
	
	Результат.Колонки.Добавить("ЕИ_Ид_Медиалог", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("ЕИ_НаименованиеМедиалог");
	Результат.Колонки.Добавить("ЕИ_Код_Медиалог");
	
	Результат.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2,0)));
	
	Результат.Колонки.Добавить("Папка_Ид_Медиалог");
	Результат.Колонки.Добавить("Папка_НаименованиеМедиалог");
	Результат.Колонки.Добавить("Папка", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Результат.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,5)));
	
	Результат.Колонки.Добавить("СчетУчета");
	
	Результат.Колонки.Добавить("Документ1С", ПолучитьОписаниеТиповДокументовЗагрузки());
	
	Результат.Колонки.Добавить("ЦенаВРознице", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаВРознице", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Результат.Колонки.Добавить("ЦенаВРозницеСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаВРозницеСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	//СО
	Результат.Колонки.Добавить("СотрудникАкта"); // Ид
	Результат.Колонки.Добавить("ФИО",Новый ОписаниеТипов("Строка"));
	
	//РА2
	Результат.Колонки.Добавить("DM_TRANSFERS_PAYMODE");
	
	Результат.Колонки.Добавить("CHECK_NUM", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтруктуруТаблицыТоваров()

&НаСервере
Функция ПолучитьОписаниеТиповДокументовЗагрузки()
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	Массив.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	Массив.Добавить(Тип("ДокументСсылка.ТребованиеНакладная"));
	Массив.Добавить(Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию"));

	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции // ПолучитьОписаниеТиповДокументовЗагрузки()

&НаСервере
Функция ПолучитьДоговорКонтрагента(Контрагент)
	
	Результат = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ДокументОбъект = Документы["ПоступлениеТоваровУслуг"].СоздатьДокумент();
	ДокументОбъект.Организация = Объект.Организация;
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, Пользователи.ТекущийПользователь(), Константы.ВалютаРегламентированногоУчета.Получить(), "Покупка", Неопределено);
	ЗаполнениеДокументов.Заполнить(ДокументОбъект);
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	ДокументОбъект.Контрагент = Контрагент;
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДокументОбъект,СписокВидовДоговоров);
	Если ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) И СписокВидовДоговоров.НайтиПоЗначению(ДокументОбъект.ДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
		ДокументОбъект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;

	Результат = ДокументОбъект.ДоговорКонтрагента; 	
	
	Возврат Результат;
	
КонецФункции // ПолучитьДоговорКонтрагента()

&НаСервере
Функция ЕстьВГрупповойЗагрузке(ИД_Документа)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИД_Документа", ИД_Документа);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	| 1 КАК Поле
	|ИЗ
	|	Документ.ТребованиеНакладная._МатериалыМедиалога КАК МатериалыМедиалога
	|ГДЕ
	|	МатериалыМедиалога.Ид_Документ = &ИД_Документа
	|";
	
	Результат = НЕ Запрос.Выполнить().Пустой();
	
	Возврат Результат;
	
КонецФункции // ЕстьВГрупповойЗагрузке()

&НаСервере
Функция ПолучитьСтруктуруТаблицыДокументов()
	
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("Ид_Медиалог");
	РезультатФункции.Колонки.Добавить("Номер_Медиалог");
	РезультатФункции.Колонки.Добавить("НомерНакладной_Медиалог");
	РезультатФункции.Колонки.Добавить("Ид_Вид");
	РезультатФункции.Колонки.Добавить("ДатаДок", Новый ОписаниеТипов("Дата"));
	//+Молдавская А.С. 2017.07.11  задача 7683
	РезультатФункции.Колонки.Добавить("ДатаНакладной_Медиалог", Новый ОписаниеТипов("Дата"));
	//-Молдавская А.С. 2017.07.11
	РезультатФункции.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	РезультатФункции.Колонки.Добавить("Ид_Контрагент");
	РезультатФункции.Колонки.Добавить("КонтрагентИННМедиалог");
	РезультатФункции.Колонки.Добавить("КонтрагентНаименованиеМедиалог");
	РезультатФункции.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	//
	РезультатФункции.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	РезультатФункции.Колонки.Добавить("Ид_Склад");
	РезультатФункции.Колонки.Добавить("СкладНаименованиеМедиалог");
	//
	РезультатФункции.Колонки.Добавить("СкладКуда", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	РезультатФункции.Колонки.Добавить("Ид_СкладКуда");
	РезультатФункции.Колонки.Добавить("СкладКудаНаименованиеМедиалог");
	//СО
	РезультатФункции.Колонки.Добавить("ТипАкта");
	РезультатФункции.Колонки.Добавить("ОтделениеАкта");
	РезультатФункции.Колонки.Добавить("ОтделениеАкта_Наименование");
	//РА
	РезультатФункции.Колонки.Добавить("ТипПлатежа", Новый ОписаниеТипов("Число"));
	РезультатФункции.Колонки.Добавить("СуммаПоКартам", Новый ОписаниеТипов("Число"));

	РезультатФункции.Колонки.Добавить("Документ1С", ПолучитьОписаниеТиповДокументовЗагрузки());
	РезультатФункции.Колонки.Добавить("СписокДокументов1С"); // Одному ИД из Медиалога могут соответствовать
															  // неск. документов 1С (разных типов)

	РезультатФункции.Колонки.Добавить("Товар");
	
	Возврат РезультатФункции;
	
КонецФункции // ПолучитьСтруктуруТаблицыДокументов()

&НаСервере
Функция ПолучитьСтруктуруТоварныхТаблиц()
	
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("ВидДокумента");
	РезультатФункции.Колонки.Добавить("Товар");
	
	Возврат РезультатФункции;
	
КонецФункции 

&НаСервере
Функция ВернутьСтрокуДаты(Д)
	
	Результат = "";
	
	Результат = Формат(Д , "ДФ='MM/dd/yyyy HH:mm'");	
	
	Возврат Результат;
	
КонецФункции // ВернутьСтрокуДаты()

&НаСервере
Процедура ЗаписатьНоменклатуруНаСервере()
	
	Если НЕ ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		Сообщить("Отсутствует таблица документов");
		Возврат;
	КонецЕсли;
	ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес) Тогда
		ТоварныеТаблицыОбъект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес);
		ТоварныеТаблицыОбъект.Очистить();
		ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.ТоварныеТаблицыАдрес);
	Иначе	
		ТоварныеТаблицыОбъект=ПолучитьСтруктуруТоварныхТаблиц();
		ЭтаФорма.ТоварныеТаблицыАдрес=ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	ТЗНоменклатурыОбъект=ЭтаФорма.РеквизитФормыВЗначение("ТЗНоменклатуры");
	
	// Тупо - в цикле, т.к. в устоявшемся режиме эти таблицы не будут большими
	
	Для каждого СтрокаТЗ из ТЗНоменклатурыОбъект Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(СтрокаТЗ.КодМедиалог)="" Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыСведений._СоответствиеНоменклатуры.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТЗ.Номенклатура);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура = СтрокаТЗ.Номенклатура;
		НоваяЗапись.Ид = СтрокаТЗ.КодМедиалог;		
		НаборЗаписей.Записать(Истина);
		
		// Обновить ТаблицаДокументов
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументовОбъект Цикл
			Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицыДокументов.Товар Цикл
				
				Если СтрокаТаблицыН.Ид_Номенклатура <> СтрокаТЗ.КодМедиалог Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыН.Номенклатура = СтрокаТЗ.Номенклатура;
				
			КонецЦикла;
		КонецЦикла;	
		
		// Обновить ТоварныеТаблицы
		Для каждого СтрокаТоварнойТаблицы из ТоварныеТаблицыОбъект Цикл
			Для каждого СтрокаТаблицыН ИЗ СтрокаТоварнойТаблицы.Товар Цикл
				
				Если СтрокаТаблицыН.Ид_Номенклатура <> СтрокаТЗ.КодМедиалог Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыН.Номенклатура = СтрокаТЗ.Номенклатура;
				
			КонецЦикла;	
		КонецЦикла;	
		
	КонецЦикла;
	
	ТЗНоменклатурыОбъект.Очистить();
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗНоменклатурыОбъект,"ТЗНоменклатуры"); 
	
	ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);
	ЭтаФорма.ТоварныеТаблицыАдрес=ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры // ЗаписатьНоменклатуруНаСервере()

&НаКлиенте
Процедура ЗаписатьНоменклатуру(Команда)
	НеПродолжать = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьНоменклатуруЗавершение", ЭтаФорма), "Таблица соответствия будет записана. Подтвердите?", РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНоменклатуруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НеПродолжать = РезультатВопроса <> КодВозвратаДиалога.Да;  
    Если НеПродолжать Тогда
        ВернутьсяНаСтраницу();
        Возврат;
    КонецЕсли;
    ЗаписатьНоменклатуруНаСервере();
	
	ВернутьсяНаСтраницу();
    
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСУчетомПапокНаСервере()
	
	ТЗНоменклатурыОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗНоменклатуры");
	ТЗ_КэшПапокОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшПапок");
	ТЗ_КэшЕдиницОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшЕдиниц");
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
	Иначе	
		ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
		ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);		
	КонецЕсли; 
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес) Тогда
		ТоварныеТаблицыОбъект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес);
	Иначе	
		ТоварныеТаблицыОбъект=ПолучитьСтруктуруТоварныхТаблиц();
		ЭтаФорма.ТоварныеТаблицыАдрес=ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли; 
	
		
	Для каждого СтрокаТЗ из ТЗНоменклатурыОбъект Цикл
		
		Попытка 
			ОбъектЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			//ОбъектЭлемент.Родитель = СтрокаТЗ.Папка;
			РезультатПоиска = ТЗ_КэшПапокОбъект.Найти(СтрокаТЗ.КодПапкиМедиалога, "Ид_Медиалог");
			Если РезультатПоиска <> Неопределено Тогда
				ОбъектЭлемент.Родитель = РезультатПоиска.Номенклатура;
			КонецЕсли;
			ОбъектЭлемент.Наименование = СтрокаТЗ.НаименованиеМедиалог;
			ОбъектЭлемент.НаименованиеПолное = СтрокаТЗ.НаименованиеМедиалог;
			РезультатПоиска = ТЗ_КэшЕдиницОбъект.Найти(СтрокаТЗ.ИД_ЕИ, "Ид_Медиалог");
			Если РезультатПоиска <> Неопределено Тогда
				ОбъектЭлемент.ЕдиницаИзмерения = РезультатПоиска.ЕИ;
			КонецЕсли;
			
			//
			Мета=ОбъектЭлемент.Метаданные();
			Если Мета.Реквизиты.Найти("ВидНоменклатуры")<>Неопределено Тогда		
				Родитель=ОбъектЭлемент.Родитель;
				Если ЗначениеЗаполнено(Родитель) Тогда
					Пока ЗначениеЗаполнено(Родитель.Родитель) Цикл			
						Родитель=Родитель.Родитель;
					КонецЦикла;				
				КонецЕсли; 
				Если ЗначениеЗаполнено(Родитель) Тогда			
					ОбъектЭлемент["ВидНоменклатуры"]=Справочники["ВидыНоменклатуры"].НайтиПоНаименованию(Родитель.Наименование);				
				КонецЕсли;  
			КонецЕсли;
			//
			
			СтруктураНДС = ПолучитьСтруктуруНДС(СтрокаТЗ.НДС);
			ОбъектЭлемент.УдалитьСтавкаНДС = СтруктураНДС.СтавкаНДС;
			ОбъектЭлемент.ВидСтавкиНДС = СтруктураНДС.ВидСтавкиНДС;
			
			ОбъектЭлемент.Записать();
			
			СтрокаТЗ.Номенклатура = ОбъектЭлемент.Ссылка;
			
			
			НаборЗаписей = РегистрыСведений._СоответствиеНоменклатуры.СоздатьНаборЗаписей();	
			НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТЗ.Номенклатура);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Номенклатура = СтрокаТЗ.Номенклатура;
			НоваяЗапись.Ид = СтрокаТЗ.КодМедиалог;		
			НаборЗаписей.Записать(Истина);
			
			// Обновить ТаблицаДокументов
			Для каждого СтрокаТаблицыДокументов из ТаблицаДокументовОбъект Цикл
				Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицыДокументов.Товар Цикл
					
					Если СтрокаТаблицыН.Ид_Номенклатура <> СтрокаТЗ.КодМедиалог Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицыН.Номенклатура = СтрокаТЗ.Номенклатура;
					
				КонецЦикла;
			КонецЦикла;	
			
			// Обновить ТоварныеТаблицы
			Для каждого СтрокаТоварнойТаблицы из ТоварныеТаблицыОбъект Цикл
				Для каждого СтрокаТаблицыН ИЗ СтрокаТоварнойТаблицы.Товар Цикл
					
					Если СтрокаТаблицыН.Ид_Номенклатура <> СтрокаТЗ.КодМедиалог Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицыН.Номенклатура = СтрокаТЗ.Номенклатура;
					
				КонецЦикла;	
			КонецЦикла;	
						
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;	
		
	КонецЦикла;	
	
	ТЗНоменклатурыОбъект.Очистить();
	
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗНоменклатурыОбъект, "ТЗНоменклатуры");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшПапокОбъект, "ТЗ_КэшПапок");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшЕдиницОбъект, "ТЗ_КэшЕдиниц");
	
	ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);		
	ЭтаФорма.ТоварныеТаблицыАдрес=ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.УникальныйИдентификатор);
			
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСУчетомПапок(Команда)
			
	ЗапомнитьСтраницуВСтеке("СтраницаСоответствиеНоменклатуры");	
	Если НЕ	ПроверитьПапки() Тогда	
		Возврат;
	КонецЕсли;	
	
	ЗапомнитьСтраницуВСтеке("СтраницаСоответствиеНоменклатуры");
	Если НЕ	ПроверитьЕдиницы() Тогда	
		Возврат;
	КонецЕсли;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьСУчетомПапокЗавершение", ЭтаФорма), "Будет загружена Номенклатура. Подтвердите?", РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСУчетомПапокЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НеПродолжать = РезультатВопроса <> КодВозвратаДиалога.Да;  
    Если НеПродолжать Тогда
        ВернутьсяНаСтраницу();
        Возврат;
    КонецЕсли;
    
    ЗагрузитьСУчетомПапокНаСервере();
	
	ВернутьсяНаСтраницу();

КонецПроцедуры

&НаСервере
Функция ПроверитьПапки()
				
	Результат = Истина;
	
	// 1. Заполнить ТЗ_КэшПапок
	
	ТЗ_КэшПапокОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшПапок");	
	ТЗ_КэшПапокОбъект.Очистить();
	ТЗПапокОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗПапок");
	ТЗПапокОбъект.Очистить();
	
	ТЗНоменклатурыОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗНоменклатуры");
	
	Для каждого СтрокаТаблицы из ТЗНоменклатурыОбъект Цикл
				
		Если ТЗ_КэшПапокОбъект.Найти(СтрокаТаблицы.КодПапкиМедиалога, "Ид_Медиалог")<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаКэша = ТЗ_КэшПапокОбъект.Добавить();
		НоваяСтрокаКэша.Ид_Медиалог = СтрокаТаблицы.КодПапкиМедиалога;
		НоваяСтрокаКэша.НаименованиеМедиалог = СтрокаТаблицы.ПапкаМедиалога;
				   
	КонецЦикла;
				
	// 2. В ТЗ_КэшПапок заполнить колонку Номенклатура
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшПапокОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Номенклатура КАК Номенклатура,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеПапок КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшПапокОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.Номенклатура = Выборка.Номенклатура;
		
	КонецЦикла;
	
	// 3. Оставшиеся незаполненными вывалить в ТЗПапок на форму
	
	МассивСтрок = ТЗ_КэшПапокОбъект.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если СокрЛП(ЭлементМассива.Ид_Медиалог)="" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТЗПапокОбъект.Добавить();
			НоваяСтрока.НаименованиеМедиалог = ЭлементМассива.НаименованиеМедиалог;
			НоваяСтрока.КодМедиалог = ЭлементМассива.Ид_Медиалог; 	
		КонецЦикла;
		
		Если ТЗПапокОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСоответствиеПапок;
			
			Сообщить("Имеются Папки номенклатора без соответствия в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшПапокОбъект, "ТЗ_КэшПапок");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗПапокОбъект, "ТЗПапок");
	
	Возврат Результат;
	
КонецФункции // ПроверитьПапки()

&НаСервере
Функция ПроверитьЕдиницы()
				
	Результат = Истина;
	
	// 1. Заполнить ТЗ_КэшЕдиниц
	
	ТЗ_КэшЕдиницОбъект=ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшЕдиниц");	
	ТЗ_КэшЕдиницОбъект.Очистить();
	ТЗЕдиницОбъект=ЭтаФорма.РеквизитФормыВЗначение("ТЗЕдиниц");
	ТЗЕдиницОбъект.Очистить();
	
	ТЗНоменклатурыОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗНоменклатуры");
	
	Для каждого СтрокаТаблицы из ТЗНоменклатурыОбъект Цикл
				
		Если ТЗ_КэшЕдиницОбъект.Найти(СтрокаТаблицы.ИД_ЕИ, "Ид_Медиалог")<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаКэша = ТЗ_КэшЕдиницОбъект.Добавить();
		НоваяСтрокаКэша.Ид_Медиалог = СтрокаТаблицы.ИД_ЕИ;
		НоваяСтрокаКэша.НаименованиеМедиалог = СтрокаТаблицы.ЕдИзмМедиалог;
				   
	КонецЦикла;
		
	// 2. В ТЗ_КэшЕдиниц заполнить колонку ЕИ
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшЕдиницОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.ЕИ КАК ЕИ,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеЕдиниц КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшЕдиницОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.ЕИ = Выборка.ЕИ;
		
	КонецЦикла;
	
	// 3. Оставшиеся незаполненными вывалить в ТЗЕдиниц на форму
	
	МассивСтрок = ТЗ_КэшЕдиницОбъект.НайтиСтроки(Новый Структура("ЕИ", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если СокрЛП(ЭлементМассива.Ид_Медиалог)="" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТЗЕдиницОбъект.Добавить();
			НоваяСтрока.ИДМедиалог = ЭлементМассива.Ид_Медиалог;
			НоваяСтрока.НаименованиеМедиалог = ЭлементМассива.НаименованиеМедиалог;
			НоваяСтрока.КодМедиалог = ЭлементМассива.Код_Медиалог; 	
		КонецЦикла;
		
		Если ТЗЕдиницОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСоответствиеЕдиниц;
			
			Сообщить("Имеются Единицы измерения без соответствия в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшЕдиницОбъект, "ТЗ_КэшЕдиниц");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗЕдиницОбъект, "ТЗЕдиниц");
	
	Возврат Результат;
	
КонецФункции // ПроверитьЕдиницы()

&НаСервере
Процедура ЗагрузитьВПапкуНаСервере()
	
	ТЗНоменклатурыОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗНоменклатуры");
	ТЗ_КэшЕдиницОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшЕдиниц");
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
	Иначе	
		ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
		ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);		
	КонецЕсли; 
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес) Тогда
		ТоварныеТаблицыОбъект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес);
	Иначе	
		ТоварныеТаблицыОбъект=ПолучитьСтруктуруТоварныхТаблиц();
		ЭтаФорма.ТоварныеТаблицыАдрес=ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли; 
	
	
	Для каждого СтрокаТЗ из ТЗНоменклатурыОбъект Цикл
		
		Попытка 
			ОбъектЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			ОбъектЭлемент.Родитель = Папка;
			ОбъектЭлемент.Наименование = СтрокаТЗ.НаименованиеМедиалог;
			ОбъектЭлемент.НаименованиеПолное = СтрокаТЗ.НаименованиеМедиалог;
			РезультатПоиска = ТЗ_КэшЕдиницОбъект.Найти(СтрокаТЗ.ИД_ЕИ, "Ид_Медиалог");
			Если РезультатПоиска <> Неопределено Тогда
				ОбъектЭлемент.БазоваяЕдиницаИзмерения = РезультатПоиска.ЕИ;
			КонецЕсли;
			
			//
			Мета=ОбъектЭлемент.Метаданные();
			Если Мета.Реквизиты.Найти("ВидНоменклатуры")<>Неопределено Тогда		
				Родитель=ОбъектЭлемент.Родитель;
				Если ЗначениеЗаполнено(Родитель) Тогда
					Пока ЗначениеЗаполнено(Родитель.Родитель) Цикл			
						Родитель=Родитель.Родитель;
					КонецЦикла;				
				КонецЕсли; 
				Если ЗначениеЗаполнено(Родитель) Тогда			
					ОбъектЭлемент["ВидНоменклатуры"]=Справочники["ВидыНоменклатуры"].НайтиПоНаименованию(Родитель.Наименование);				
				КонецЕсли;  
			КонецЕсли;
			//
			
			СтруктураНДС = ПолучитьСтруктуруНДС(СтрокаТЗ.НДС);
			ОбъектЭлемент.УдалитьСтавкаНДС = СтруктураНДС.СтавкаНДС;
			ОбъектЭлемент.ВидСтавкиНДС = СтруктураНДС.ВидСтавкиНДС;
			
			ОбъектЭлемент.Записать();
			
			СтрокаТЗ.Номенклатура = ОбъектЭлемент.Ссылка;
			
			
			НаборЗаписей = РегистрыСведений._СоответствиеНоменклатуры.СоздатьНаборЗаписей();	
			НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТЗ.Номенклатура);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Номенклатура = СтрокаТЗ.Номенклатура;
			НоваяЗапись.Ид = СтрокаТЗ.КодМедиалог;		
			НаборЗаписей.Записать(Истина);
			
			// Обновить ТаблицаДокументов
			Для каждого СтрокаТаблицыДокументов из ТаблицаДокументовОбъект Цикл
				Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицыДокументов.Товар Цикл
					
					Если СтрокаТаблицыН.Ид_Номенклатура <> СтрокаТЗ.КодМедиалог Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицыН.Номенклатура = СтрокаТЗ.Номенклатура;
					
				КонецЦикла;
			КонецЦикла;	

		    // Обновить ТоварныеТаблицы
			Для каждого СтрокаТоварнойТаблицы из ТоварныеТаблицыОбъект Цикл
				Для каждого СтрокаТаблицыН ИЗ СтрокаТоварнойТаблицы.Товар Цикл
					
					Если СтрокаТаблицыН.Ид_Номенклатура <> СтрокаТЗ.КодМедиалог Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицыН.Номенклатура = СтрокаТЗ.Номенклатура;
					
				КонецЦикла;	
			КонецЦикла;	
			
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;	
		
	КонецЦикла;
	
	ТЗНоменклатурыОбъект.Очистить();
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗНоменклатурыОбъект, "ТЗНоменклатуры");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшЕдиницОбъект, "ТЗ_КэшЕдиниц");
	
	ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);		
	ЭтаФорма.ТоварныеТаблицыАдрес=ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВПапку(Команда)
	
	// Папка должна быть заполнена
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Папка) Тогда
		Сообщить("Не заполнена Папка");
		ВернутьсяНаСтраницу();
		Возврат;
	КонецЕсли;	
		
	ЗапомнитьСтраницуВСтеке("СтраницаСоответствиеНоменклатуры");
	Если НЕ	ПроверитьЕдиницы() Тогда	
		Возврат;
	КонецЕсли;	
	
	ЗагрузитьВПапкуНаСервере();
	
	ВернутьсяНаСтраницу();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьЕдиницыНаСервере()
	
	ТЗЕдиницОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗЕдиниц");
	
	// Тупо - в цикле, т.к. в устоявшемся режиме эти таблицы не будут большими
	
	Для каждого СтрокаТЗ из ТЗЕдиницОбъект Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ЕИ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(СтрокаТЗ.ИДМедиалог)="" Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыСведений._СоответствиеЕдиниц.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.ЕИ.Установить(СтрокаТЗ.ЕИ);
		НаборЗаписей.Отбор.ЕИ.Использование = Истина;
		НаборЗаписей.Отбор.Ид.Установить(СтрокаТЗ.ИДМедиалог);
		НаборЗаписей.Отбор.Ид.Использование = Истина;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ЕИ = СтрокаТЗ.ЕИ;
		НоваяЗапись.Ид = СтрокаТЗ.ИДМедиалог;		
		НаборЗаписей.Записать(Истина);
				
	КонецЦикла;
	
	ТЗЕдиницОбъект.Очистить();
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗЕдиницОбъект, "ТЗЕдиниц");

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЕдиницы(Команда)
	
	НеПродолжать = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьЕдиницыЗавершение", ЭтаФорма), "Таблица соответствия будет записана. Подтвердите?", РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЕдиницыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НеПродолжать = РезультатВопроса <> КодВозвратаДиалога.Да;  
    Если НеПродолжать Тогда
        ВернутьсяНаСтраницу();
        Возврат;
    КонецЕсли;
    
    ЗаписатьЕдиницыНаСервере();
	
	ВернутьсяНаСтраницу();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПапкиНаСервере()
	
	ТЗПапокОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗПапок");
	
	ТЗНоменклатурыОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗНоменклатуры");

	
	Для каждого СтрокаТЗ из ТЗПапокОбъект Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(СтрокаТЗ.КодМедиалог)="" Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыСведений._СоответствиеПапок.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТЗ.Номенклатура);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура = СтрокаТЗ.Номенклатура;
		НоваяЗапись.Ид = СтрокаТЗ.КодМедиалог;		
		НаборЗаписей.Записать(Истина);
		
		Для каждого СтрокаТаблицы из ТЗНоменклатурыОбъект Цикл
			
			Если СтрокаТаблицы.КодПапкиМедиалога <> СтрокаТЗ.КодМедиалог Тогда
				Продолжить;
			КонецЕсли;	
							
			СтрокаТаблицы.Папка = СтрокаТЗ.Номенклатура;	
				
		КонецЦикла;
		
	КонецЦикла;
	
	ТЗПапокОбъект.Очистить();
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗПапокОбъект, "ТЗПапок");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗНоменклатурыОбъект, "ТЗНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПапки(Команда)
	
	РезультатПроверкиПапок = ПроверитьПапкиПередЗаписью();
	Если РезультатПроверкиПапок <> "" Тогда
		Сообщить(РезультатПроверкиПапок);
		ВернутьсяНаСтраницу();
		Возврат;
	КонецЕсли;	
		
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьПапкиЗавершение", ЭтаФорма), "Таблица соответствия будет записана. Подтвердите?", РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПапкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НеПродолжать = РезультатВопроса <> КодВозвратаДиалога.Да;  
    Если НеПродолжать Тогда
        ВернутьсяНаСтраницу();
        Возврат;
    КонецЕсли;
    
    ЗаписатьПапкиНаСервере();

	ВернутьсяНаСтраницу();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПапкиПередЗаписью()
	
	Результат = "";
	
	ТаблицаПроверки = Новый ТаблицаЗначений;
	ТаблицаПроверки.Колонки.Добавить("Ид");
	ТаблицаПроверки.Колонки.Добавить("Папка");
	
	Для каждого СтрокаТЗ из ТЗПапок Цикл
		
		РезультатПоиска = ТаблицаПроверки.Найти(СтрокаТЗ.Номенклатура, "Папка");
		Если РезультатПоиска=Неопределено Тогда
			НоваяСтрока = ТаблицаПроверки.Добавить();
			НоваяСтрока.Ид = СтрокаТЗ.КодМедиалог;
			НоваяСтрока.Папка = СтрокаТЗ.Номенклатура;
		Иначе
			Если РезультатПоиска.Ид <> СтрокаТЗ.КодМедиалог Тогда
				Результат = Результат+?(ПустаяСтрока(Результат),"Для папок Медиалога:
				| ", "
				|")+СтрокаТЗ.НаименованиеМедиалог;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		Результат = Результат+"
		| указана повторяющаяся папка 1С";
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции // ПроверитьПапкиПередЗаписью()

&НаСервере
Процедура ЗаписатьСкладыНаСервере()
	
	ТЗСкладовОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗСкладов");
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
	Иначе	
		ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
		ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);		
	КонецЕсли;
	
	Для каждого СтрокаТЗ из ТЗСкладов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Склад) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(СтрокаТЗ.КодМедиалог)="" Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыСведений._СоответствиеСкладов.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Склад.Установить(СтрокаТЗ.Склад);
		//Скл
		НаборЗаписей.Отбор.Ид.Установить(СтрокаТЗ.КодМедиалог);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Склад = СтрокаТЗ.Склад;
		НоваяЗапись.Ид = СтрокаТЗ.КодМедиалог;		
		НаборЗаписей.Записать(Истина);
		
		// Обновить ТаблицаДокументов
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументовОбъект Цикл
			
			Если СтрокаТаблицыДокументов.Ид_Склад <> СтрокаТЗ.КодМедиалог Тогда
				Продолжить;
			КонецЕсли;	
							
			СтрокаТаблицыДокументов.Склад = СтрокаТЗ.Склад;	
				
		КонецЦикла;
		
		// Отдельно - для перемещений
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументовОбъект Цикл
			Если СтрокаТаблицыДокументов.Ид_Вид <> 4 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыДокументов.Ид_СкладКуда <> СтрокаТЗ.КодМедиалог Тогда
				Продолжить;
			КонецЕсли;	
							
			СтрокаТаблицыДокументов.СкладКуда = СтрокаТЗ.Склад;	
				
		КонецЦикла;
		
	КонецЦикла;
	
	ТЗСкладовОбъект.Очистить();
	
	ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗСкладовОбъект, "ТЗСкладов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСклады(Команда)
	
		
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьСкладыЗавершение", ЭтаФорма), "Таблица соответствия будет записана. Подтвердите?", РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСкладыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НеПродолжать = РезультатВопроса <> КодВозвратаДиалога.Да;  
    Если НеПродолжать Тогда
        ВернутьсяНаСтраницу();
        Возврат;
    КонецЕсли;
    
    ЗаписатьСкладыНаСервере();
	
	ВернутьсяНаСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериод()
		
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТалоны Тогда
			
		Если Не ЗначениеЗаполнено(Объект.ДатаКон) Тогда
			Возврат;
		КонецЕсли; 
		
		Если Объект.Талоны = 0 Тогда  // Страховые компании
			// 1 раз в месяц
			Объект.ДатаКон = КонецМесяца(Объект.ДатаКон);
			Объект.ДатаНач = НачалоМесяца(Объект.ДатаКон);
		Иначе	// Физические лица
			// 1 раз в неделю
			Объект.ДатаКон = КонецНедели(Объект.ДатаКон);
			Объект.ДатаНач = НачалоНедели(Объект.ДатаКон);
		КонецЕсли; 
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСтраховыеКомпании Тогда
		
		//ЭлементыФормы.ДатаНач2.ТолькоПросмотр = Истина;
		//Если Направление = 3 Тогда
			Элементы.ДатаНач3.ТолькоПросмотр = Ложь;
		//КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Объект.ДатаКон) Тогда
			Возврат;
		КонецЕсли;	
		
		//Если Направление = 0 Тогда
		//	// Стоматология
		//	ДатаКон = КонецМесяца(ДатаКон);
		//	ДатаНач = НачалоМесяца(ДатаКон);
		//ИначеЕсли Направление = 1 Тогда	
		//	// Скорая помощь
		//	ДатаКон = КонецМесяца(ДатаКон);
		//	ДатаНач = НачалоМесяца(ДатаКон);
		//ИначеЕсли Направление = 2 Тогда	
		//	// Поликлиника
		//	ДатаКон = КонецМесяца(ДатаКон);
		//	ДатаНач = НачалоМесяца(ДатаКон);
		//Иначе
		//	// Госпитальное событие
		//	//ДатаКон = КонецНедели(ДатаКон);
		//	//ДатаНач = НачалоНедели(ДатаКон);
		//	
		//	//ДатаКон = КонецМесяца(ДатаКон);
		//	//ДатаНач = НачалоМесяца(ДатаКон);
		//	 
		//КонецЕсли;  
			
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаГрупповаяЗагрузка Тогда	
		
		Если ЗначениеЗаполнено(Объект.ДатаКон) Тогда
			
			ПериодГрупповойЗагрузки = ПолучитьПериодГрупповойЗагрузкиДляТипаДокумента(ЭтаФорма.ТипДокумента, Объект.ДатаКон);
			
			Если ПериодГрупповойЗагрузки = ПредопределенноеЗначение("Перечисление._ПериодЗагрузки.Произвольный") Тогда
				Элементы.ДатаНач.ТолькоПросмотр = Ложь;
			Иначе
				Элементы.ДатаНач.ТолькоПросмотр = Истина;
				Если ПериодГрупповойЗагрузки = ПредопределенноеЗначение("Перечисление._ПериодЗагрузки.День") Тогда
					Объект.ДатаКон = КонецДня(Объект.ДатаКон);
					Объект.ДатаНач = НачалоДня(Объект.ДатаКон);					
				ИначеЕсли ПериодГрупповойЗагрузки = ПредопределенноеЗначение("Перечисление._ПериодЗагрузки.Неделя") Тогда
					Объект.ДатаКон = КонецНедели(Объект.ДатаКон);
					Объект.ДатаНач = НачалоНедели(Объект.ДатаКон);
				ИначеЕсли ПериодГрупповойЗагрузки = ПредопределенноеЗначение("Перечисление._ПериодЗагрузки.Месяц") Тогда
					Объект.ДатаКон = КонецМесяца(Объект.ДатаКон);
					Объект.ДатаНач = НачалоМесяца(Объект.ДатаКон);	
				КонецЕсли;	
			КонецЕсли; 
					
		Иначе
			
			Элементы.ДатаНач.ТолькоПросмотр = Истина;
			Сообщить("Не заполнена конечная дата");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПериод()

&НаСервере
Функция ПолучитьПериодГрупповойЗагрузкиДляТипаДокумента(Т_Д, Д_кон)
	
	Результат = Перечисления._ПериодЗагрузки.Произвольный;
	
	ТипДокументаМедиалога = Неопределено;
	ПодТип = Неопределено;
	Если Т_Д = 2 Тогда // "Расход по акту списания"
		ТипДокументаМедиалога = Перечисления._ТипыДокументовМедиалога.РасходПоАктуСписания;
		ПодТип = Неопределено;
	ИначеЕсли Т_Д = 7 Тогда	// "Персонифицированная расходная накладная"
		ТипДокументаМедиалога = Перечисления._ТипыДокументовМедиалога.ПерсонифицированнаяРасходнаяНакладная;
		ПодТип = Неопределено;
	ИначеЕсли Т_Д = 8 Тогда // "Продажа в розницу"
		ТипДокументаМедиалога = Перечисления._ТипыДокументовМедиалога.ПродажаВРозницу;
		ПодТип = Перечисления._ПодТипЗагрузки.АптечныйКиоск;
	Иначе
		Сообщить("Не задана обработка для типа документа");
	КонецЕсли; 
	
	Если ТипДокументаМедиалога <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТипДокументаМедиалога", ТипДокументаМедиалога);
		Запрос.УстановитьПараметр("ПодТип", ПодТип);
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Рег.ПериодЗагрузки
		|ИЗ
		|	РегистрСведений._ПериодыГрупповойЗагрузки.СрезПоследних(&ДатаКон, (ТипДокументаМедиалога = &ТипДокументаМедиалога)"+
		?(ПодТип = Неопределено,"","И(ПодТип = &ПодТип)")
		+") КАК Рег
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.ПериодЗагрузки;
		Иначе	
			Сообщить("Не определен период загрузки для типа документа '"+СокрЛП(ТипДокументаМедиалога)+"'");
		КонецЕсли; 
	
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьПериодГрупповойЗагрузкиДляТипаДокумента()

&НаКлиенте
Процедура ДатаНачПриИзменении(Элемент)
	УстановитьПериод();
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонПриИзменении(Элемент)
	УстановитьПериод();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	СтрокиДерева = рдДеревоГрупповойЗагрузки.ПолучитьЭлементы();
	Для каждого СтрокаТаблицы из СтрокиДерева Цикл
		СтрокаТаблицы.Флаг = Истина;	
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	СтрокиДерева = рдДеревоГрупповойЗагрузки.ПолучитьЭлементы();
	Для каждого СтрокаТаблицы из СтрокиДерева Цикл
		СтрокаТаблицы.Флаг = Ложь;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки1(Команда)
	
	СтрокиДерева = рдДеревоДокументов.ПолучитьЭлементы();
	Для каждого СтрокаТаблицы из СтрокиДерева Цикл
		СтрокаТаблицы.Флаг = Истина;	
		Для каждого СтрокаТаблицыН из СтрокаТаблицы.ПолучитьЭлементы() Цикл
			СтрокаТаблицыН.Флаг = Истина;	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки1(Команда)
	
	СтрокиДерева = рдДеревоДокументов.ПолучитьЭлементы();
	Для каждого СтрокаТаблицы из СтрокиДерева Цикл
		СтрокаТаблицы.Флаг = Ложь;
		Для каждого СтрокаТаблицыН из СтрокаТаблицы.ПолучитьЭлементы() Цикл
			СтрокаТаблицыН.Флаг = Ложь;	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервере
// Возвращает ИСТИНА если все склады из документов есть в регистре
// _СоответствиеСкладов
// Если какой-то склад не найден, возвращается ЛОЖЬ, заполняется таблица
// ТЗСкладов на форме, выдается предупреждение, и открывается страница
// "СоответствиеСкладов" на форме
//
Функция ПроверитьСклады()
				
	Результат = Истина;
	
	// 1. Заполнить ТЗ_КэшСкладов
	
	ТЗ_КэшСкладовОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшСкладов");
	ТЗСкладовОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗСкладов");
		
	ТЗ_КэшСкладовОбъект.Очистить();
	ТЗСкладовОбъект.Очистить();
	
	Если НЕ ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		Сообщить("Отсутствует таблица документов");
		Возврат Ложь;
	КонецЕсли; 	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);
	
	рдДеревоДокументовОбъект=РеквизитФормыВЗначение("рдДеревоДокументов");
	
	
	// Сначала - склады откуда
	Для каждого СтрокаТаблицы из рдДеревоДокументовОбъект.Строки Цикл
		//Если НЕ СтрокаТаблицы.Флаг Тогда
		//	Продолжить;
		//КонецЕсли;		
		Если НЕ ФлагУСтрокиИлиУПодчиненных(СтрокаТаблицы) Тогда
			Продолжить;	
		КонецЕсли;	
		
		Если ТЗ_КэшСкладовОбъект.Найти(ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].ИД_Склад, "Ид_Медиалог")<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаКэша = ТЗ_КэшСкладовОбъект.Добавить();
		НоваяСтрокаКэша.Ид_Медиалог = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].ИД_Склад;
		НоваяСтрокаКэша.НаименованиеМедиалог = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].СкладНаименованиеМедиалог;
				   
	КонецЦикла;
	
	// Потом - склады куда
	Для каждого СтрокаТаблицы из рдДеревоДокументовОбъект.Строки Цикл
		//Если НЕ СтрокаТаблицы.Флаг Тогда
		//	Продолжить;
		//КонецЕсли;		
		Если НЕ ФлагУСтрокиИлиУПодчиненных(СтрокаТаблицы) Тогда
			Продолжить;	
		КонецЕсли;		
		
		Если ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид <> 4 Тогда  // Фильтруем перемещения
			Продолжить;
		КонецЕсли;
		
		Если ТЗ_КэшСкладовОбъект.Найти(ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].ИД_СкладКуда, "Ид_Медиалог")<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаКэша = ТЗ_КэшСкладовОбъект.Добавить();
		НоваяСтрокаКэша.Ид_Медиалог = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].ИД_СкладКуда;
		НоваяСтрокаКэша.НаименованиеМедиалог = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].СкладКудаНаименованиеМедиалог;
				   
	КонецЦикла;
			
	// 2. В ТЗ_КэшСкладов заполнить колонку Склад
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшСкладовОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Склад КАК Склад,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеСкладов КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшСкладовОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.Склад = Выборка.Склад;
		
	КонецЦикла;
	
	// 3. Оставшиеся незаполненными вывалить в ТЗСкладов на форму
	
	МассивСтрок = ТЗ_КэшСкладовОбъект.НайтиСтроки(Новый Структура("Склад", Справочники.Склады.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если СокрЛП(ЭлементМассива.Ид_Медиалог)="" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТЗСкладовОбъект.Добавить();
			НоваяСтрока.НаименованиеМедиалог = ЭлементМассива.НаименованиеМедиалог;
			НоваяСтрока.КодМедиалог = ЭлементМассива.Ид_Медиалог; 	
		КонецЦикла;
		
		Если ТЗСкладовОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСоответствиеСкладов;
			
			Сообщить("Имеются Склады без соответствия в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументов, ЭтаФорма.ТаблицаДокументовАдрес);
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшСкладовОбъект, "ТЗ_КэшСкладов");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗСкладовОбъект, "ТЗСкладов");
	
	ЭтаФорма.ЗначениеВРеквизитФормы(рдДеревоДокументовОбъект, "рдДеревоДокументов");
		
	Возврат Результат;
	
КонецФункции // ПроверитьСклады()

&НаСервере
// Возвращает ИСТИНА если все контрагенты из документов есть в регистре
// _СоответствиеКонтрагентов
// Если какой-то контрагент не найден, возвращается ЛОЖЬ, заполняется таблица
// ТЗКонтрагентов на форме, выдается предупреждение, и открывается страница
// "СоответствиеКонтрагентов" на форме
//
Функция ПроверитьКонтрагентов()
	
	Результат = Истина;
	
	// 1. Заполнить ТЗ_КэшКонтрагентов
	
	ТЗ_КэшКонтрагентовОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшКонтрагентов");
	ТЗКонтрагентовОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗКонтрагентов");
		
	ТЗ_КэшКонтрагентов.Очистить();
	ТЗКонтрагентов.Очистить();
	
	Если НЕ ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		Сообщить("Отсутствует таблица документов");
		Возврат Ложь;
	КонецЕсли; 	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);
	
	рдДеревоДокументовОбъект=РеквизитФормыВЗначение("рдДеревоДокументов");
	
	
	Для каждого СтрокаТаблицы из рдДеревоДокументовОбъект.Строки Цикл
		//Если НЕ СтрокаТаблицы.Флаг Тогда
		//	Продолжить;
		//КонецЕсли;		
		Если НЕ ФлагУСтрокиИлиУПодчиненных(СтрокаТаблицы) Тогда
			Продолжить;	
		КонецЕсли;	
		
		Если ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 4 Тогда   // Перемещение
			Продолжить;
		КонецЕсли;
				
		Если ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 2 Тогда   // Расход по акту списания
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 7 Тогда   // Персонифицированная расходная накладная
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 10 Тогда   // Массовое списание на основании оказанных услуг
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 11 Тогда   // Персонифицированное списание на основании оказанных услуг
			Продолжить;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
			Продолжить;	
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Контрагент) Тогда
			Продолжить;	
		КонецЕсли;	
		
		Если ТЗ_КэшКонтрагентовОбъект.Найти(ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Контрагент, "Ид_Медиалог")<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
				
		НоваяСтрокаКэша = ТЗ_КэшКонтрагентовОбъект.Добавить();
		НоваяСтрокаКэша.Ид_Медиалог = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Контрагент;
		НоваяСтрокаКэша.ИННМедиалог = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].КонтрагентИННМедиалог;
		НоваяСтрокаКэша.НаименованиеМедиалог = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].КонтрагентНаименованиеМедиалог;
						   
	КонецЦикла;

	// 2. В ТЗ_КэшКонтрагентов заполнить колонку Контрагент
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшКонтрагентовОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог,
	|	ВнешнийИсточник.ИННМедиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Контрагент КАК Контрагент,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеКонтрагентов КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшКонтрагентовОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.Контрагент = Выборка.Контрагент;
		
	КонецЦикла;
	
	// 3. Оставшиеся незаполненными вывалить в ТЗКонтрагентов на форму
	
	МассивСтрок = ТЗ_КэшКонтрагентовОбъект.НайтиСтроки(Новый Структура("Контрагент", Справочники.Контрагенты.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если СокрЛП(ЭлементМассива.Ид_Медиалог)="" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТЗКонтрагентовОбъект.Добавить();
			НоваяСтрока.НаименованиеМедиалог = ЭлементМассива.НаименованиеМедиалог;
			НоваяСтрока.ИННМедиалог = ЭлементМассива.ИННМедиалог;
			НоваяСтрока.КодМедиалог = ЭлементМассива.Ид_Медиалог; 
			Если СокрЛП(НоваяСтрока.ИННМедиалог)<>"" Тогда
				// Попытаться найти по ИНН
				НоваяСтрока.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СокрЛП(НоваяСтрока.ИННМедиалог));
			КонецЕсли;	
		КонецЦикла;
		
		Если ТЗКонтрагентовОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСоответствиеКонтрагентов;
			
			Сообщить("Имеются Контрагенты без соответствия в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшКонтрагентовОбъект, "ТЗ_КэшКонтрагентов");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗКонтрагентовОбъект, "ТЗКонтрагентов");
		
	ПоместитьВоВременноеХранилище(ТаблицаДокументов, ЭтаФорма.ТаблицаДокументовАдрес);
		
	ЭтаФорма.ЗначениеВРеквизитФормы(рдДеревоДокументовОбъект, "рдДеревоДокументов");
	
	
	Возврат Результат;
	
КонецФункции // ПроверитьКонтрагентов()	

&НаСервере
// Возвращает ИСТИНА если вся номенклатура из документов есть в регистре
// _СоответствиеНоменклатуры
// Если какая-то номенклатура не найдена, возвращается ЛОЖЬ, заполняется таблица
// ТЗНоменклатуры на форме, выдается предупреждение, и открывается страница
// "СоответствиеНоменклатуры" на форме
//
Функция ПроверитьНоменклатуру()
	
	Результат = Истина;
	
	// 1. Заполнить ТЗ_КэшНоменклатуры
	
	ТЗ_КэшНоменклатурыОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшНоменклатуры");
	ТЗНоменклатурыОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗНоменклатуры");
			
	ТЗ_КэшНоменклатурыОбъект.Очистить();
	ТЗНоменклатурыОбъект.Очистить();
	
	Если НЕ ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		Сообщить("Отсутствует таблица документов");
		Возврат Ложь;
	КонецЕсли; 	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);
	
	рдДеревоДокументовОбъект=РеквизитФормыВЗначение("рдДеревоДокументов");
	
	Для каждого СтрокаТаблицы из рдДеревоДокументовОбъект.Строки Цикл
		Если НЕ СтрокаТаблицы.Флаг Тогда
			Продолжить;
		КонецЕсли;	
		
		Для каждого СтрокаТаблицыН ИЗ ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Товар Цикл
			
			Если ТЗ_КэшНоменклатурыОбъект.Найти(СтрокаТаблицыН.Ид_Номенклатура, "Ид_Медиалог")<>Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрокаКэша = ТЗ_КэшНоменклатурыОбъект.Добавить();
		
			НоваяСтрокаКэша.Ид_Медиалог = СтрокаТаблицыН.Ид_Номенклатура;
			// + Граховский К.Н. 2016.04.19
			//НоваяСтрокаКэша.НаименованиеМедиалог = СтрокаТаблицыН.НоменклатураНаименованиеМедиалог;
			НоваяСтрокаКэша.НаименованиеМедиалог = ИсключитьНеЧитаемыеСимволыИзСтроки(СтрокаТаблицыН.НоменклатураНаименованиеМедиалог, Истина, " ");
			// - Граховский К.Н. 2016.04.19
			НоваяСтрокаКэша.ЕИ = СтрокаТаблицыН.ЕИ_НаименованиеМедиалог;
			НоваяСтрокаКэша.ИД_ЕИ = СтрокаТаблицыН.ЕИ_Ид_Медиалог;
			НоваяСтрокаКэша.Код_ЕИ = СтрокаТаблицыН.ЕИ_Код_Медиалог;
			НоваяСтрокаКэша.НДС = СтрокаТаблицыН.НДС;	
			НоваяСтрокаКэша.Папка_Ид_Медиалог = СтрокаТаблицыН.Папка_Ид_Медиалог;
						
		КонецЦикла;					   
	КонецЦикла;
	
	// 2. В ТЗ_КэшНоменклатуры заполнить колонку Номенклатура
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшНоменклатурыОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Номенклатура КАК Номенклатура,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеНоменклатуры КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшНоменклатурыОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.Номенклатура = Выборка.Номенклатура;
		
	КонецЦикла;
	
	// Заполнить Кэш папок
	
	ТЗ_КэшПапокОбъект=ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшПапок");
	ТЗПапокОбъект=ЭтаФорма.РеквизитФормыВЗначение("ТЗПапок");
	ТЗ_КэшПапокОбъект.Очистить();
	ТЗПапокОбъект.Очистить();
	
	//ТЗ_КэшПапок.Очистить();
	//ТЗПапок.Очистить();
	
	Для каждого СтрокаТаблицы из рдДеревоДокументовОбъект.Строки Цикл
		Если НЕ СтрокаТаблицы.Флаг Тогда
			Продолжить;
		КонецЕсли;	
		
		Для каждого СтрокаТаблицыН ИЗ ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Товар Цикл
			
			Если ТЗ_КэшПапокОбъект.Найти(СтрокаТаблицыН.Папка_Ид_Медиалог, "Ид_Медиалог")<>Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрокаКэша = ТЗ_КэшПапокОбъект.Добавить();
		
			НоваяСтрокаКэша.Ид_Медиалог = СтрокаТаблицыН.Папка_Ид_Медиалог;
			НоваяСтрокаКэша.НаименованиеМедиалог = СтрокаТаблицыН.Папка_НаименованиеМедиалог;
							
		КонецЦикла;					   
	КонецЦикла;
	
	// В ТЗ_КэшПапок заполнить колонку Папка
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшПапокОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Номенклатура КАК Номенклатура,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеПапок КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшПапокОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.Номенклатура = Выборка.Номенклатура;
		
	КонецЦикла;
	
		
	// 3. Оставшиеся незаполненными вывалить в ТЗНоменклатуры на форму
	
	МассивСтрок = ТЗ_КэшНоменклатурыОбъект.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если СокрЛП(ЭлементМассива.Ид_Медиалог)="" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТЗНоменклатурыОбъект.Добавить();
			НоваяСтрока.НаименованиеМедиалог = ЭлементМассива.НаименованиеМедиалог;
			НоваяСтрока.КодМедиалог = ЭлементМассива.Ид_Медиалог; 
			НоваяСтрока.ЕдИзмМедиалог = ЭлементМассива.ЕИ; 
			НоваяСтрока.ИД_ЕИ = ЭлементМассива.ИД_ЕИ;
			НоваяСтрока.Код_ЕИ = ЭлементМассива.Код_ЕИ;
			НоваяСтрока.НДС = ЭлементМассива.НДС;
			//
			НоваяСтрока.КодПапкиМедиалога = ЭлементМассива.Папка_Ид_Медиалог;
			РезультатПоиска = ТЗ_КэшПапок.Найти(ЭлементМассива.Папка_Ид_Медиалог, "Ид_Медиалог");
			Если РезультатПоиска <> Неопределено Тогда
				НоваяСтрока.ПапкаМедиалога = РезультатПоиска.НаименованиеМедиалог;
				НоваяСтрока.Папка = РезультатПоиска.Номенклатура;
			КонецЕсли;	
		    		
		КонецЦикла;
		
		Если ТЗНоменклатурыОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСоответствиеНоменклатуры;
			
			Сообщить("Имеется Номенклатура без соответствия в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументов, ЭтаФорма.ТаблицаДокументовАдрес); 
		
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшНоменклатурыОбъект, "ТЗ_КэшНоменклатуры");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗНоменклатурыОбъект, "ТЗНоменклатуры");
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшПапокОбъект, "ТЗ_КэшПапок");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗПапокОбъект, "ТЗПапок");
	
	Возврат Результат;
	
КонецФункции // ПроверитьНоменклатуру()

&НаСервере
Функция ВернутьТипДокумента(Док1С)
	
	Если ТипЗнч(Док1С) <> ТипЗнч("Строка") Тогда
		Если ЗначениеЗаполнено(Док1С) Тогда
			ВД = Док1С.Метаданные().Имя;
		Иначе	
			ВД = "";
		КонецЕсли; 
	Иначе	
		ВД = Док1С;
	КонецЕсли; 

	Возврат ВД;
	
КонецФункции // ВернутьТипДокумента()

&НаСервере
//////Функция ПолучитьСпособОтраженияАмортизации(Скл)

//////	Если НЕ ЗначениеЗаполнено(Скл) Тогда
//////		Возврат Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
//////	КонецЕсли; 
//////	
//////	Запрос = Новый Запрос;
//////	Запрос.УстановитьПараметр("Склад", Скл);
//////	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//////	|	Рег.СпособОтраженияАмортизации
//////	|ИЗ
//////	|	РегистрСведений._СоответствиеСкладовСпособамОтраженияАмортизации КАК Рег
//////	|ГДЕ
//////	|	Рег.Склад = &Склад
//////	|";
//////	Выборка = Запрос.Выполнить().Выбрать();
//////	Если Выборка.Следующий() Тогда
//////		Возврат Выборка.СпособОтраженияАмортизации;	
//////	Иначе	
//////		Возврат Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();	
//////	КонецЕсли; 
//////	
//////КонецФункции // ПолучитьСпособОтраженияАмортизации()

&НаСервере
Функция ПроверитьСпособыАмортизации()

	Результат = Истина;
	
	ТЗ_КэшСпособовАмортизацииОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшСпособовАмортизации");
	ТЗСпособовАмортизацииОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗСпособовАмортизации");
			
	ТЗ_КэшСпособовАмортизацииОбъект.Очистить();
	ТЗСпособовАмортизацииОбъект.Очистить();
	
	Если НЕ ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		Сообщить("Отсутствует таблица документов");
		Возврат Ложь;
	КонецЕсли; 	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);
	
	рдДеревоДокументовОбъект=РеквизитФормыВЗначение("рдДеревоДокументов");
	
	ТЗ_КэшСкладовОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшСкладов"); 
	
		
	Для каждого СтрокаТаблицы из рдДеревоДокументовОбъект.Строки Цикл
		ЕстьПередача = Ложь;
		Для каждого ПодчСтрока Из СтрокаТаблицы.Строки Цикл
			Если НЕ ПодчСтрока.Флаг Тогда
				Продолжить;
			КонецЕсли; 	
			ВД = ВернутьТипДокумента(ПодчСтрока.Документ1С);
			Если ВД <> "ПередачаМатериаловВЭксплуатацию" Тогда
				Продолжить;
			КонецЕсли;
			ЕстьПередача = Истина;
		КонецЦикла;
			
		Если СтрокаТаблицы.Флаг Тогда		
			ВД = ВернутьТипДокумента(СтрокаТаблицы.Документ1С);
			Если ВД = "ПередачаМатериаловВЭксплуатацию" Тогда
				ЕстьПередача = Истина;
			КонецЕсли; 			
		КонецЕсли;	
		
		Если НЕ ЕстьПередача Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].СкладКуда) Тогда			
			РезультатПоиска = ТЗ_КэшСкладовОбъект.Найти(ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_СкладКуда, "Ид_Медиалог"); 
			Если РезультатПоиска <> Неопределено Тогда
				ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].СкладКуда = РезультатПоиска.Склад;						
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].СкладКуда) Тогда
				Продолжить;	
			КонецЕсли; 
		КонецЕсли; 
		
		Если ТЗ_КэшСпособовАмортизацииОбъект.Найти(ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].СкладКуда, "Склад")<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаКэша = ТЗ_КэшСпособовАмортизацииОбъект.Добавить();
		НоваяСтрокаКэша.Склад = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].СкладКуда;
		НоваяСтрокаКэша.Способ = ПолучитьСпособОтраженияАмортизации(НоваяСтрокаКэша.Склад);
			   
	КонецЦикла;
	
	// 3. Оставшиеся незаполненными вывалить в ТЗСпособовАмортизации на форму
	
	МассивСтрок = ТЗ_КэшСпособовАмортизацииОбъект.НайтиСтроки(Новый Структура("Способ", Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если ЗначениеЗаполнено(ЭлементМассива.Способ) Тогда
				Продолжить;			
			КонецЕсли; 			
			НоваяСтрока = ТЗСпособовАмортизацииОбъект.Добавить();
			НоваяСтрока.Склад = ЭлементМассива.Склад; 	
		КонецЦикла;
		
		Если ТЗСпособовАмортизацииОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСпособыАмортизации;
			
			Сообщить("Имеются Склады без соответствия Способам амортизации в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументов, ЭтаФорма.ТаблицаДокументовАдрес); 
		
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшСпособовАмортизацииОбъект, "ТЗ_КэшСпособовАмортизации");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗСпособовАмортизацииОбъект, "ТЗСпособовАмортизации");
	
		
	Возврат Результат;

КонецФункции // ПроверитьСпособыАмортизации()

&НаСервере
Функция ПроверитьФИО()
	
	Результат = Истина;
	
	ТЗ_КэшФизЛицОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшФизЛиц");
	ТЗФизЛицОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗФизЛиц");
			
	ТЗ_КэшФизЛицОбъект.Очистить();
	ТЗФизЛицОбъект.Очистить();
	
	Если НЕ ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		Сообщить("Отсутствует таблица документов");
		Возврат Ложь;
	КонецЕсли; 	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);
	
	рдДеревоДокументовОбъект=РеквизитФормыВЗначение("рдДеревоДокументов");

	
	
	// Все имеет смысл только для "Расхода по акту списания", тип акта = 3 - списание спец.одежды
	Для каждого СтрокаТаблицы из рдДеревоДокументовОбъект.Строки Цикл
				
		Если НЕ ФлагУСтрокиИлиУПодчиненных(СтрокаТаблицы) Тогда
			Продолжить;	
		КонецЕсли;	
				
		Если ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид <> 2 Тогда   // Расход по акту списания
			Продолжить;
		КонецЕсли;
		Если ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].ТипАкта <> 3 Тогда
			Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаТаблицыН ИЗ ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Товар Цикл
			
			Если (СтрокаТаблицыН.СотрудникАкта = NULL)ИЛИ(НЕ ЗначениеЗаполнено(СтрокаТаблицыН.СотрудникАкта)) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ТЗ_КэшФизЛицОбъект.Найти(СтрокаТаблицыН.СотрудникАкта, "Ид_Медиалог")<>Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрокаКэша = ТЗ_КэшФизЛицОбъект.Добавить();
		
			НоваяСтрокаКэша.Ид_Медиалог = СтрокаТаблицыН.СотрудникАкта;
			НоваяСтрокаКэша.НаименованиеМедиалог = СтрокаТаблицыН.ФИО;
								
		КонецЦикла;
	КонецЦикла;
	
    Если ТЗ_КэшФизЛицОбъект.Количество()=0 Тогда
		Возврат Результат;
	КонецЕсли; 
	
	// 2. В ТЗ_КэшФизЛиц заполнить колонку ФизЛицо
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшФизЛицОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.ФизЛицо КАК ФизЛицо,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеФизЛиц КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшФизЛицОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.ФизЛицо = Выборка.ФизЛицо;
		
	КонецЦикла;

	// 3. Оставшиеся незаполненными вывалить в ТЗ_КэшФизЛиц на форму
	
	МассивСтрок = ТЗ_КэшФизЛицОбъект.НайтиСтроки(Новый Структура("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если СокрЛП(ЭлементМассива.Ид_Медиалог)="" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТЗФизЛицОбъект.Добавить();
			НоваяСтрока.НаименованиеМедиалог = ЭлементМассива.НаименованиеМедиалог;
			НоваяСтрока.КодМедиалог = ЭлементМассива.Ид_Медиалог; 	
		КонецЦикла;
		
		Если ТЗФизЛицОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСоответствиеФизЛиц;
			
			Сообщить("Имеются Физ.лица без соответствия в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументов, ЭтаФорма.ТаблицаДокументовАдрес); 
		
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшФизЛицОбъект, "ТЗ_КэшФизЛиц");
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗФизЛицОбъект, "ТЗФизЛиц");
	
		
	Возврат Результат;
	
КонецФункции // ПроверитьФИО()

&НаСервере
Функция ФлагУСтрокиИлиУПодчиненных(СтрокаТаблицы_)
	
	Результат = СтрокаТаблицы_.Флаг;
	
	Если НЕ Результат Тогда
		// Проверить подчиненных
		Для каждого ПодчСтрока Из СтрокаТаблицы_.Строки Цикл
			Если ПодчСтрока.Флаг Тогда
			
				Результат = Истина;
				Прервать;
			
			КонецЕсли; 		
		КонецЦикла; 	
	КонецЕсли; 
	
    Возврат Результат;
	
КонецФункции // ФлагУСтрокиИлиУПодчиненных()

&НаСервере
Функция ПроверитьПодразделенияМедиалога()
	
	Результат = Истина;
	
	// Пока - возврат
	Возврат Результат;
	
	//////////// 1. Заполнить ТЗ_КэшПодразделений
	//////////
	//////////ТЗ_КэшПодразделений.Очистить();
	//////////ТЗПодразделений1.Очистить();
	//////////
	//////////// Все имеет смысл только для "Расхода по акту списания", тип акта = 3 - списание спец.одежды
	//////////Для каждого СтрокаТаблицы из рдДеревоДокументов.Строки Цикл
	//////////			
	//////////	Если НЕ ФлагУСтрокиИлиУПодчиненных(СтрокаТаблицы) Тогда
	//////////		Продолжить;	
	//////////	КонецЕсли;	
	//////////			
	//////////	Если ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид <> 2 Тогда   // Расход по акту списания
	//////////		Продолжить;
	//////////	КонецЕсли;
	//////////	Если ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].ТипАкта <> 3 Тогда
	//////////		Продолжить;
	//////////	КонецЕсли; 
	//////////	
	//////////	Если НЕ ЗначениеЗаполнено(ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].ОтделениеАкта) Тогда
	//////////		Продолжить;	
	//////////	КонецЕсли;
	//////////	
	//////////	Если ТЗ_КэшПодразделений.Найти(ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].ОтделениеАкта, "Ид_Медиалог")<>Неопределено Тогда
	//////////		Продолжить;
	//////////	КонецЕсли;
	//////////	
	//////////	НоваяСтрокаКэша = ТЗ_КэшПодразделений.Добавить();
	//////////	НоваяСтрокаКэша.Ид_Медиалог = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].ОтделениеАкта;
	//////////	НоваяСтрокаКэша.НаименованиеМедиалог = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].ОтделениеАкта_Наименование;
	//////////	
	//////////КонецЦикла;
	//////////
	//////////// 2. В ТЗ_КэшПодразделений заполнить колонку Номенклатура	
	//////////Запрос = Новый Запрос;
	//////////Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//////////Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшПодразделений);
	//////////Запрос.Текст = "ВЫБРАТЬ
	//////////|	ВнешнийИсточник.Ид_Медиалог
	//////////|ПОМЕСТИТЬ Идентификаторы
	//////////|ИЗ
	//////////|	&ВнешнийИсточник КАК ВнешнийИсточник
	//////////|;//////////////////////////////////////////////////////
	//////////|ВЫБРАТЬ
	//////////|	Рег.Подразделение КАК Подразделение,
	//////////|	Рег.Ид КАК Ид
	//////////|ИЗ
	//////////|	РегистрСведений._СоответствиеПодразделений КАК Рег
	//////////|ГДЕ
	//////////|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	//////////|";
	//////////
	//////////РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	//////////Выборка = РезультатЗапроса.Выбрать();
	//////////Пока Выборка.Следующий() Цикл
	//////////	
	//////////	Ид = Выборка.Ид;
	//////////	РезультатПоиска = ТЗ_КэшПодразделений.Найти(Ид, "Ид_Медиалог");
	//////////	Если РезультатПоиска = Неопределено Тогда
	//////////		// Это приехал НУЛЛ от куда-то
	//////////		Продолжить;
	//////////	КонецЕсли;	
	//////////	
	//////////	РезультатПоиска.Подразделение = Выборка.Подразделение;
	//////////	
	//////////КонецЦикла;

	//////////
	//////////////ТЗ_КэшПодразделений = Новый ТаблицаЗначений;
	//////////////ТЗ_КэшПодразделений.Колонки.Добавить("Ид_Медиалог", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	//////////////ТЗ_КэшПодразделений.Колонки.Добавить("НаименованиеМедиалог");
	//////////////ТЗ_КэшПодразделений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов(

	//////////////
	//////////////СоответствиеПодразделений1
	
	Возврат Результат;
	
КонецФункции // ПроверитьПодразделенияМедиалога()

&НаСервере
Процедура СформироватьДокументыВ1СНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	
	рдДеревоДокументовОбъект=РеквизитФормыВЗначение("рдДеревоДокументов");
	
	// Снятие галочек у двойных документов, в случае, если двойные грузить нельзя
	Если НЕ Объект.РазрешатьЗагружатьОдинВНесколько Тогда
		Для каждого СтрокаТаблицы из рдДеревоДокументовОбъект.Строки Цикл
			Если СтрокаТаблицы.Строки.Количество()>0 Тогда
				СтрокаТаблицы.Флаг = Ложь;
				Для каждого СтрокаТаблицыН из СтрокаТаблицы.Строки Цикл
					СтрокаТаблицыН.Флаг = Ложь;	
				КонецЦикла;			
			Иначе	
				Продолжить;
			КонецЕсли; 
		КонецЦикла;	
	КонецЕсли; 
	
	//Если ТаблицаДокументов.Количество()=0 Тогда
	//	Сообщить("Нет документов для загрузки!");
	//	Возврат;
	//КонецЕсли;	
	
	COMОбъектConnection = ОбработкаОбъект.ПолучитьСоединение();
	Если COMОбъектConnection = Неопределено Тогда	
		Сообщить("Не удалось установить соединение");
		Возврат;
	КонецЕсли;
	
	Если НЕ	ПроверитьСклады() Тогда	
		ОбработкаОбъект.ЗакрытьСоединение();
		Возврат;
	КонецЕсли;
	
	ЗапомнитьПервуюСтраницуВСтеке("СтраницаЗагрузкаДокументов");
	
	Если НЕ	ПроверитьКонтрагентов() Тогда	
		ОбработкаОбъект.ЗакрытьСоединение();
		Возврат;
	КонецЕсли;	
		
	ЗапомнитьПервуюСтраницуВСтеке("СтраницаЗагрузкаДокументов");
	
	Если НЕ	ПроверитьНоменклатуру() Тогда	
		
		ОбработкаОбъект.ЗакрытьСоединение();
		Возврат;
	КонецЕсли;	
	
	ЗапомнитьПервуюСтраницуВСтеке("СтраницаЗагрузкаДокументов");
	
	Если НЕ	ПроверитьСпособыАмортизации() Тогда
				
		ОбработкаОбъект.ЗакрытьСоединение();
		Возврат;
	КонецЕсли;	
		
	ЗапомнитьПервуюСтраницуВСтеке("СтраницаЗагрузкаДокументов");
	
	Если НЕ	ПроверитьПодразделенияМедиалога() Тогда	
				
		ОбработкаОбъект.ЗакрытьСоединение();
		Возврат;
	КонецЕсли;
	
	ЗапомнитьПервуюСтраницуВСтеке("СтраницаЗагрузкаДокументов");
	
	Если НЕ	ПроверитьФИО() Тогда	
				
		ОбработкаОбъект.ЗакрытьСоединение();
		Возврат;
	КонецЕсли;

	ЭтаФорма.мСтекСтраниц.Очистить();
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
	Иначе	
		Сообщить("Не определена таблица документов");
		Возврат;
	КонецЕсли;
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес) Тогда
		ТоварныеТаблицыОбъект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес);
		//Попытка
		//	ТоварныеТаблицыОбъект.Очистить();
		//Исключение
		//	ТоварныеТаблицыОбъект = ПолучитьСтруктуруТоварныхТаблиц();
		//КонецПопытки;	
		ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.ТоварныеТаблицыАдрес);
	Иначе	
		ЭтаФорма.ТоварныеТаблицыАдрес=ПоместитьВоВременноеХранилище(ПолучитьСтруктуруТоварныхТаблиц(), ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	ТЗ_КэшКонтрагентовОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшКонтрагентов");
	ТЗ_КэшСкладовОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшСкладов"); 
	ТЗ_КэшНоменклатурыОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшНоменклатуры");
	
	// Обновить информацию из кэшей
	
	Для каждого СтрокаТаблицыДокументов из ТаблицаДокументовОбъект Цикл
			
		// Контрагенты	
		РезультатПоиска = ТЗ_КэшКонтрагентовОбъект.Найти(СтрокаТаблицыДокументов.Ид_Контрагент, "Ид_Медиалог"); 
		Если РезультатПоиска <> Неопределено Тогда
			СтрокаТаблицыДокументов.Контрагент = РезультатПоиска.Контрагент;						
			СтрокаТаблицыДокументов.Договор = ПолучитьОсновнойДоговорКонтрагента(РезультатПоиска.Контрагент);
		КонецЕсли;
		
		// Склад
		РезультатПоиска = ТЗ_КэшСкладовОбъект.Найти(СтрокаТаблицыДокументов.Ид_Склад, "Ид_Медиалог"); 
		Если РезультатПоиска <> Неопределено Тогда
			СтрокаТаблицыДокументов.Склад = РезультатПоиска.Склад;						
		КонецЕсли;
		Если СтрокаТаблицыДокументов.Ид_Вид = 4 Тогда // Для перемещений
			РезультатПоиска = ТЗ_КэшСкладовОбъект.Найти(СтрокаТаблицыДокументов.Ид_СкладКуда, "Ид_Медиалог");
			Если РезультатПоиска <> Неопределено Тогда
				СтрокаТаблицыДокументов.СкладКуда = РезультатПоиска.Склад;						
			КонецЕсли;
		КонецЕсли; 
		
		Для каждого СтрокаН из СтрокаТаблицыДокументов.Товар Цикл
			
			// Номенклатура
			РезультатПоиска = ТЗ_КэшНоменклатурыОбъект.Найти(СтрокаН.Ид_Номенклатура, "Ид_Медиалог"); 
			Если РезультатПоиска <> Неопределено Тогда
				СтрокаН.Номенклатура = РезультатПоиска.Номенклатура;						
			КонецЕсли;
			
			//////		// Единицы
			//////		РезультатПоиска = ТЗ_КэшЕдиниц.Найти(СтрокаН.ЕИ_Ид_Медиалог, "Ид_Медиалог"); 
			//////		Если РезультатПоиска <> Неопределено Тогда
			//////			СтрокаН.Номенклатура = РезультатПоиска.Номенклатура;						
			//////		КонецЕсли;
			//////		ТЗ_КэшЕдиниц.Колонки.Добавить("Ид_Медиалог", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
			//////		ТЗ_КэшЕдиниц.Колонки.Добавить("Код_Медиалог");
			//////		ТЗ_КэшЕдиниц.Колонки.Добавить("НаименованиеМедиалог");
			//////		ТЗ_КэшЕдиниц.Колонки.Добавить("ЕИ", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
			//////		Результат.Колонки.Добавить("ЕИ_Ид_Медиалог", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
			//////		Результат.Колонки.Добавить("ЕИ_НаименованиеМедиалог");
			//////		Результат.Колонки.Добавить("ЕИ_Код_Медиалог");
			//////		
			//////		ТЗ_КэшПапок.Колонки.Добавить("Ид_Медиалог", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
			//////		ТЗ_КэшПапок.Колонки.Добавить("НаименованиеМедиалог");
			//////		ТЗ_КэшПапок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			//////		Результат.Колонки.Добавить("Папка_Ид_Медиалог");
			//////		Результат.Колонки.Добавить("Папка_НаименованиеМедиалог");
			//////		Результат.Колонки.Добавить("Папка", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			//////
			
		КонецЦикла;	
		
		// То же самое в подчиненных строках
		Для каждого ПодСтрока Из ТоварныеТаблицыОбъект Цикл
			Для каждого СтрокаН из ПодСтрока.Товар Цикл	
				// Номенклатура
				РезультатПоиска = ТЗ_КэшНоменклатурыОбъект.Найти(СтрокаН.Ид_Номенклатура, "Ид_Медиалог"); 
				Если РезультатПоиска <> Неопределено Тогда
					СтрокаН.Номенклатура = РезультатПоиска.Номенклатура;						
				КонецЕсли;
            КонецЦикла;
		КонецЦикла; 
					
	КонецЦикла;	
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.ТаблицаДокументовАдрес);
	ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.ТоварныеТаблицыАдрес);
		
	СформироватьДокументы();
	
	Сообщить("Формирование документов в 1С завершено!");
	
	ОбработкаОбъект.ЗакрытьСоединение();
		
КонецПроцедуры

&НаСервере
// Функция возвращает массив вышестоящих групп указанного элемента.
// 
// Параметры:
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Массив вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника) Экспорт
	
	Результат = Новый Массив;		
	
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МетаданныеСправочника = ЭлементСправочника.Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
		
	ИмяСправочника = МетаданныеСправочника.Имя;	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";
	
	ТекущийЭлемент_ = ЭлементСправочника;
	
	Пока ЗначениеЗаполнено(ТекущийЭлемент_) Цикл		
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент_);
		Выборка = Запрос.Выполнить().Выбрать();
				
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				ТекущийЭлемент_ = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент_) Тогда
					Результат.Добавить(ТекущийЭлемент_);
				Иначе
					Прервать;
				КонецЕсли;				
			КонецЦикла;
		Иначе
			ТекущийЭлемент_ = Неопределено;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Склад		        - место хранения, по которому определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//  Дата                - дата, на которую определяются счета учета
//  ОсобыйПорядокНалогообложения - признак того, что необходимо получить счета для особого порядка налогообложения (Патент, ЕНВД)
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад = Неопределено, Дата = Неопределено, ОсобыйПорядокНалогообложения = Ложь) Экспорт

	СтруктураВозврата = Новый Структура("
	|СчетУчета, 
	|СчетУчетаНДС, 
	|СчетУчетаНДСПродажи, 
	|СчетНДСТаможни,
	|СчетУчетаДавСырья,
	|СчетПередачи, 
	|СчетУчетаДоп,   
	|СчетПередачиЗаб,
	|СчетДоходов, 
	|СчетРасходов,
	|Субконто1,
	|Субконто2,
	|Субконто3");

	МассивСклад			 = Новый Массив();
	МассивТипСклада		 = Новый Массив();
	МассивНоменклатура	 = Новый Массив();
	МассивОрганизация	 = Новый Массив();
	
	МассивСклад.Добавить(Справочники.Склады.ПустаяСсылка());
	МассивТипСклада.Добавить(Перечисления.ТипыСкладов.ПустаяСсылка());
	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());
		
	Если ЗначениеЗаполнено(Склад) Тогда
		МассивСклад.Добавить(Склад);
		МассивТипСклада.Добавить(?(Склад.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад, Перечисления.ТипыСкладов.ОптовыйСклад, Перечисления.ТипыСкладов.РозничныйМагазин));
	КонецЕсли;
	
	МассивНоменклатура.Добавить(Номенклатура);
	СписокГрупп = ПолучитьСписокВышестоящихГрупп(Номенклатура);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивНоменклатура.Добавить(Элемент);
	КонецЦикла;
	
	МассивОрганизация.Добавить(Организация);
	
	ТестЗапрос = Новый Запрос();
	
	ТестЗапрос.УстановитьПараметр("Организация",        МассивОрганизация);
	ТестЗапрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);
	ТестЗапрос.УстановитьПараметр("Склад",			    МассивСклад);
	ТестЗапрос.УстановитьПараметр("ТипСклада",			МассивТипСклада);
	
	ТестЗапрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	СчетаУчетаНоменклатуры.Организация КАК Организация,
	|	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СчетаУчетаНоменклатуры.Склад КАК Склад,
	|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
	|	СчетаУчетаНоменклатуры.СчетУчета КАК СчетУчета,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретеннымЦенностям КАК СчетУчетаНДСПоПриобретеннымЦенностям,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне КАК СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовый КАК СчетУчетаЗабалансовый,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачи КАК СчетУчетаПередачи,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиЗабалансовый КАК СчетУчетаПередачиЗабалансовый,
	|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализации КАК СчетДоходовОтРеализации,
	|	СчетаУчетаНоменклатуры.СчетРасходовОтРеализации КАК СчетРасходовОтРеализации,
	|	СчетаУчетаНоменклатуры.Субконто1 КАК Субконто1,
	|	СчетаУчетаНоменклатуры.Субконто2 КАК Субконто2,
	|	СчетаУчетаНоменклатуры.Субконто3 КАК Субконто3
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|	
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В (&Организация)
	|	И СчетаУчетаНоменклатуры.Номенклатура В (&Номенклатура)
	|	И СчетаУчетаНоменклатуры.Склад В (&Склад)
	|	И СчетаУчетаНоменклатуры.ТипСклада В (&ТипСклада)";
	
	ТаблицаЗапроса = ТестЗапрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, Склад Убыв, ТипСклада Убыв, Организация Убыв", Новый СравнениеЗначений);

	Если ТаблицаЗапроса.Количество() > 0 Тогда

		СведенияОСчетах = ТаблицаЗапроса[0];
		
		СтруктураВозврата.СчетУчета           = СведенияОСчетах.СчетУчета;
		СтруктураВозврата.СчетУчетаНДС        = СведенияОСчетах.СчетУчетаНДСПоПриобретеннымЦенностям;
		СтруктураВозврата.СчетУчетаНДСПродажи = СведенияОСчетах.СчетУчетаНДСПоРеализации;
		СтруктураВозврата.СчетНДСТаможни      = СведенияОСчетах.СчетУчетаНДСУплаченногоНаТаможне;
		СтруктураВозврата.СчетУчетаДоп        = СведенияОСчетах.СчетУчета;
		СтруктураВозврата.СчетУчетаДавСырья   = СведенияОСчетах.СчетУчетаЗабалансовый;
		СтруктураВозврата.СчетДоходов         = СведенияОСчетах.СчетДоходовОтРеализации;
		СтруктураВозврата.СчетПередачи        = СведенияОСчетах.СчетУчетаПередачи;
		СтруктураВозврата.СчетПередачиЗаб     = СведенияОСчетах.СчетУчетаПередачиЗабалансовый;
		СтруктураВозврата.СчетРасходов        = СведенияОСчетах.СчетРасходовОтРеализации;

		СтруктураВозврата.Субконто1      = СведенияОСчетах.Субконто1;
		СтруктураВозврата.Субконто2    	 = СведенияОСчетах.Субконто2;
		СтруктураВозврата.Субконто3    	 = СведенияОСчетах.Субконто3;

	КонецЕсли;
	
	ДатаУчетнойПолитики	= ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	//Если ОсобыйПорядокНалогообложения
	//	ИЛИ НалоговыйУчетУСН.ПрименениеОсобогоПорядкаНалогообложения(Организация, ДатаУчетнойПолитики) Тогда
		
		СтруктураВозврата.СчетДоходов	= ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;
		СтруктураВозврата.СчетРасходов	= ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;
		
	//КонецЕсли;

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСчетаУчетаНоменклатуры()

&НаСервере
Процедура ПолучитьДокумент(ПараметрыДокумента)
	
	СтрокаТаблицыДокументов = ПараметрыДокумента.СтрокаТаблицыДокументов;
	ВидДокумента = ПараметрыДокумента.ВидДокумента;
	
	ПараметрыДокумента.Вставить("ДокументОбъект", Неопределено);
	
	// 1. Поиск: м.б. документ уже есть
	РезультатПоиска = Неопределено;
	Если ТипЗнч(ПараметрыДокумента.ДокументСсылка)<>Тип("Строка") Тогда
		Если ЗначениеЗаполнено(ПараметрыДокумента.ДокументСсылка) Тогда
			РезультатПоиска = ПараметрыДокумента.ДокументСсылка;
		КонецЕсли;
	КонецЕсли;	
	
	Если РезультатПоиска = Неопределено Тогда
		
		ДокументОбъект = Документы[ВидДокумента].СоздатьДокумент();
		ДокументОбъект.Дата = СтрокаТаблицыДокументов.ДатаДок;
		ДокументОбъект.Организация = Объект.Организация;
		//ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект);
		ДокументОбъект.УстановитьНовыйНомер(ДокументОбъект.Организация.Префикс);

		ПараметрыДокумента.Вставить("Ид_Медиалог", СтрокаТаблицыДокументов.Ид_Медиалог);
	
	Иначе
		Попытка
			ПараметрыДокумента.Вставить("Ид_Медиалог", СтрокаТаблицыДокументов.Ид_Медиалог);
			ДокументОбъект = РезультатПоиска.ПолучитьОбъект();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;	
	КонецЕсли; 
	
	Если ДокументОбъект.ПометкаУдаления  Тогда
		ДокументОбъект.ПометкаУдаления = Ложь;
	КонецЕсли; 
	
	Если ПустаяСтрока(СокрЛП(ДокументОбъект.Комментарий)) Тогда
		ДокументОбъект.Комментарий = "№ " + СокрЛП(СтрокаТаблицыДокументов.Номер_Медиалог)+" от "+Формат(СтрокаТаблицыДокументов.ДатаДок,"ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	ПараметрыДокумента.Вставить("ДокументОбъект", ДокументОбъект);
		
КонецПроцедуры // ПолучитьДокумент()

&НаСервере
Функция ПолучитьСтруктуруНДС(НДС = 18)
	
	СтруктураНДС = Новый Структура;
	СтавкаНДС = Неопределено;
	ВидСтавкиНДС = Неопределено;
	
	
	Если НДС < 5 Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.БезНДС;
	ИначеЕсли НДС < 12 Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
		ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Пониженная;
	Иначе
		Если ТекущаяДата() < '20190101' Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;
		ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая;
	КонецЕсли;
	
	СтруктураНДС.Вставить("СтавкаНДС", СтавкаНДС);
	СтруктураНДС.Вставить("ВидСтавкиНДС", ВидСтавкиНДС);
	
	Возврат СтруктураНДС;
	
КонецФункции // ПолучитьСтруктуруНДС()	

&НаСервере
//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//		ВалютаРегламентированногоУчета 	- СправочникСсылка.Валюты
//
// Возвращаемое значение
//      ПеречислениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,ВалютаРегламентированногоУчета) Экспорт

	Если ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
	 ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;

	ИначеЕсли ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;

	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;

	Конецесли;

	Возврат ВидРасчетовПоДоговору;

КонецФункции

&НаСервере
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор, ВалютаРегламентированногоУчета = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;

	Результат = Новый Структура("СчетРасчетов, 
	                            |СчетАвансов,
	                            |СчетРасчетовПокупателя, 
	                            |СчетАвансовПокупателя, 
	                            |СчетРасчетовПоПретензиям,
	                            |СчетРасчетовСКомитентом,
	                            |СчетУчетаТары,
	                            |СчетУчетаТарыПокупателя,
	                            |СчетУчетаДоходовПоТаре,
	                            |СчетУчетаРасходовПоТаре");

	ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор, ВалютаРегламентированногоУчета);

	СписокГруппКонтрагентов = ПолучитьСписокВышестоящихГрупп(Контрагент);
	
	СписокГруппДоговоров = ПолучитьСписокВышестоящихГрупп(Договор);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	Индекс = 1;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	" + Индекс + " КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	УдалитьСчетУчетаДоходовПоТаре КАК СчетУчетаДоходовПоТаре,
	|	УдалитьСчетУчетаРасходовПоТаре КАК СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ  
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	УдалитьСчетУчетаДоходовПоТаре КАК СчетУчетаДоходовПоТаре,
		|	УдалитьСчетУчетаРасходовПоТаре КАК СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ  
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	УдалитьСчетУчетаДоходовПоТаре КАК СчетУчетаДоходовПоТаре,
	|	УдалитьСчетУчетаРасходовПоТаре КАК СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ  
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	УдалитьСчетУчетаДоходовПоТаре КАК СчетУчетаДоходовПоТаре,
		|	УдалитьСчетУчетаРасходовПоТаре КАК СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ  
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	УдалитьСчетУчетаДоходовПоТаре КАК СчетУчетаДоходовПоТаре,
	|	УдалитьСчетУчетаРасходовПоТаре КАК СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ  
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	УдалитьСчетУчетаДоходовПоТаре КАК СчетУчетаДоходовПоТаре,
		|	УдалитьСчетУчетаРасходовПоТаре КАК СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ  
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	УдалитьСчетУчетаДоходовПоТаре КАК СчетУчетаДоходовПоТаре,
	|	УдалитьСчетУчетаРасходовПоТаре КАК СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &ПустаяОрганизация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ  
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	УдалитьСчетУчетаДоходовПоТаре КАК СчетУчетаДоходовПоТаре,
		|	УдалитьСчетУчетаРасходовПоТаре КАК СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ  
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	УдалитьСчетУчетаДоходовПоТаре КАК СчетУчетаДоходовПоТаре,
	|	УдалитьСчетУчетаРасходовПоТаре КАК СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ  
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	УдалитьСчетУчетаДоходовПоТаре КАК СчетУчетаДоходовПоТаре,
	|	УдалитьСчетУчетаРасходовПоТаре КАК СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетРасчетов              = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов               = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя    = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя     = Выборка.СчетУчетаАвансовПолученных;
		Результат.СчетРасчетовПоПретензиям  = Выборка.СчетРасчетовПоПретензиям;
		Результат.СчетРасчетовСКомитентом   = Выборка.СчетУчетаРасчетовСКомитентом;
		Результат.СчетУчетаТары             = Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетУчетаТарыПокупателя   = Выборка.СчетУчетаРасчетовПоТареСПокупателем;

		Результат.СчетУчетаДоходовПоТаре  = Выборка.СчетУчетаДоходовПоТаре;
		Результат.СчетУчетаРасходовПоТаре = Выборка.СчетУчетаРасходовПоТаре;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

&НаСервере
Процедура СформироватьПоступление(СтрокаТаблицы, ТаблицаДокументов)
		
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Договор) тогда
		сообщить("Не заполнен договор в Поступлении № "+ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Номер_Медиалог+" !");
		Возврат;		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.Договор.ТипЦен) тогда
		сообщить("Не заполен тип цен в договоре в Поступлении № "+ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Номер_Медиалог+" !");
		Возврат;		
	//ИначеЕсли СтрокаТаблицы.Договор.ТипЦен.ЦенаВключаетНДС тогда	
	//	сообщить("Неправильный тип цен в договоре в Поступлении № "+ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Номер_Медиалог+" (цена не должна включать НДС) !");
	//	Возврат;		
	КонецЕсли;
	
	// Еще проверочка: Счета учета в табличной части должны быть ВСЕ - 08.4 (поступление оборудования) или
	// ВСЕ НЕ 08.4 (поступление товаров). Если хоть где-то не заполнен счет учета, то ругаться и не формировать
	СтрокаТаблицыДокументов = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы];
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДокументов.Склад) Тогда
		Сообщить("Не заполнен склад в Поступлении № "+ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Номер_Медиалог+" !");
		Возврат;	
	КонецЕсли;	
		
	ЭтоОборудование = Ложь;
	ЭтоТовары = Ложь;
	НоменклатураСНезаполненнымиСчетами = "";
		
	ТЧТекущегоДокумента = СтрокаТаблицыДокументов.Товар;
	Для каждого СтрокаТЧТекДокумента Из ТЧТекущегоДокумента Цикл
		
		Номенклатура_ = СтрокаТЧТекДокумента.Номенклатура;
		
		Если НЕ ЗначениеЗаполнено(Номенклатура_) Тогда
			Сообщить("Не заполнена номенклатура в Поступлении № "+ТаблицаДокументов[СтрокаТаблицы].Номер_Медиалог+" !");
			Возврат;
		КонецЕсли; 
		
		
		СчетаУчета = ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, Номенклатура_, СтрокаТаблицыДокументов.Склад);
		СчетУчетаБУ  = СчетаУчета.СчетУчета;
		
		Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
			НоменклатураСНезаполненнымиСчетами = ?(ПустаяСтрока(НоменклатураСНезаполненнымиСчетами),"",",
			|")+ СокрЛП(Номенклатура_);
		ИначеЕсли СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств
			ИЛИ СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств) Тогда
			ЭтоОборудование = Истина;	
		Иначе
			ЭтоТовары = Истина;	
		КонецЕсли; 
		
		СтрокаТЧТекДокумента.СчетУчета = СчетУчетаБУ;

	КонецЦикла;	
	

	Если Не ПустаяСтрока(НоменклатураСНезаполненнымиСчетами) Тогда
		Сообщить("В Поступлении № "+ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Номер_Медиалог+" имеется номенклатура с незаполненными счетами учета:
		|"+НоменклатураСНезаполненнымиСчетами);
		Возврат;
	КонецЕсли; 
	
	//Если ЭтоОборудование И ЭтоТовары Тогда
	//	Сообщить("В Поступлении № "+СтрокаТаблицы.Номер_Медиалог+" в табличной части товары вместе с оборудованием!");
	//	Возврат;
	//КонецЕсли; 
		
				
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	СтрокаТаблицыДокументов = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы];
	
	ПараметрыДокумента = Новый Структура;	
	ПараметрыДокумента.Вставить("СтрокаТаблицыДокументов", СтрокаТаблицыДокументов);
	ПараметрыДокумента.Вставить("ВидДокумента", "ПоступлениеТоваровУслуг");
	ПараметрыДокумента.Вставить("ДокументСсылка", СтрокаТаблицы.Документ1С);
	
	
	
	НачатьТранзакцию();
	ТранзакцияОк = Истина;
	
	ПолучитьДокумент(ПараметрыДокумента);
	
	
	
	ДокОбъект = ПараметрыДокумента.ДокументОбъект;
	Если ДокОбъект = Неопределено Тогда
		сообщить("Не удалось создать документ в 1С по Поступлению № "+ТаблицаДокументов[СтрокаТаблицы].Номер_Медиалог+" !");
		ОтменитьТранзакцию();
		Возврат;		
	КонецЕсли;
	
	Если ЭтоОборудование Тогда
		ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;	
		ДокОбъект.Товары.Очистить();
		ДокОбъект.Оборудование.Очистить();
	Иначе	
		ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		ДокОбъект.Товары.Очистить();
		ДокОбъект.Оборудование.Очистить();
	КонецЕсли; 	
	// Заполнить реквизиты значениями по умолчанию.
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка", Неопределено);
	ЗаполнениеДокументов.Заполнить(ДокОбъект);

	
	ДокОбъект.Контрагент = СтрокаТаблицы.Контрагент;
	ДокОбъект.ДоговорКонтрагента = СтрокаТаблицы.Договор;
	
	////////ДокОбъект.Контрагент = СтрокаТаблицыДокументов.Контрагент;
	//////////ДокОбъект.ДоговорКонтрагента = СтрокаТаблицыДокументов.Договор; 
	
	////////ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДокОбъект,СписокВидовДоговоров);
	////////	
	////////Если ЗначениеЗаполнено(ДокОбъект.ДоговорКонтрагента) И СписокВидовДоговоров.НайтиПоЗначению(ДокОбъект.ДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
	////////	ДокОбъект.ДоговорКонтрагента = Неопределено;
	////////КонецЕсли;
	
	
	ДокОбъект.НомерВходящегоДокумента = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].НомерНакладной_Медиалог; //.Номер_Медиалог;
	
	//+Молдавская А.С. 2017.07.11  задача 7683
	ДокОбъект.ДатаВходящегоДокумента = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].ДатаНакладной_Медиалог; 
	//-Молдавская А.С. 2017.07.11

	Если ЗначениеЗаполнено(ДокОбъект.ДоговорКонтрагента) Тогда
		
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам;
		// Зададим, какие реквизиты надо редактировать.
		СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокОбъект);

		//ПриИзмененииЗначенияДоговора(ДокОбъект, мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары");

		СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(ДокОбъект.Организация, ДокОбъект.Контрагент, ДокОбъект.ДоговорКонтрагента);
		
		//Проверим какие же счета будем изменять
		ЗаполнятьСчетаРасчета = Истина; //Заполнять ли счета расчетов
		
		//ЗаполнятьСчетаНУБУ    = Ложь; //Если заполнять надо, то Ложь - только Бу, Истина - Ну и Бу 
					
		СтруктураОбязательныхПолей = Новый Структура;
		СтруктураНеОбязательныхПолей = Новый Структура;	
			
		Если ДокОбъект.ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре", СчетаУчета.СчетУчетаТары);
		КонецЕсли;
					
		Если ДокОбъект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовСКомитентом);			
		Иначе
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетов);			
		КонецЕсли;  
		СтруктураНеОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам", СчетаУчета.СчетАвансов);
		
		//БухгалтерскийУчет.ПроверитьНеобходимостьПерезаполненияСчетовУчета(ДокОбъект, СтруктураОбязательныхПолей,СтруктураНеОбязательныхПолей, Ложь, ЗаполнятьСчетаРасчета);
		
		
		
		
		Если ЗаполнятьСчетаРасчета Тогда		
			//ДокОбъект.ЗаполнитьСчетаУчетаРасчетов(СчетаУчета);
			Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ДокОбъект);
		КонецЕсли;

		//Если НЕ (ДокОбъект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам) Тогда
		//	ДокОбъект.Сделка = Неопределено;
		//КонецЕсли;
		
	КонецЕсли;	
				
	
	ДокОбъект.УдалитьУчитыватьНДС = Истина;
	Если ЭтаФорма.ЭтоБазаПроф Тогда
		ДокОбъект.НДСВключенВСтоимость = Ложь;	
	Иначе
		ДокОбъект.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	Если ЭтаФорма.ЭтоБазаПроф Тогда
		ДокОбъект.СуммаВключаетНДС = Ложь;
	Иначе	
		// ДокОбъект.СуммаВключаетНДС = Истина;
	КонецЕсли; 
		
	ДокОбъект.Склад = СтрокаТаблицыДокументов.Склад;
	// Байдин 2017-12-26 /*
	Если ЗначениеЗаполнено(СтрокаТаблицыДокументов.Склад) Тогда
		ДокОбъект.ПодразделениеОрганизации = СтрокаТаблицыДокументов.Склад.ПодразделениеОрганизации;
	КонецЕсли; 
	// */ Байдин 2017-12-26 
	
	ЭтоРозничныйСклад = ДокОбъект.Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
		
	ТоварыТекущегоДокумента = СтрокаТаблицыДокументов.Товар;
		
	Для каждого СтрокаТоваровТекДокумента Из ТоварыТекущегоДокумента Цикл
		
		Если ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда	
			ИмяТЧ = "Оборудование";
			Если СтрокаТоваровТекДокумента.СчетУчета <> ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств
				И НЕ СтрокаТоваровТекДокумента.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств) Тогда
				ИмяТЧ = "Товары";	
			КонецЕсли; 
		Иначе
			ИмяТЧ = "Товары";
		КонецЕсли;
		
		НоваяСтрокаДокумента = ДокОбъект[ИмяТЧ].Добавить();
		
		Если ЭтоРозничныйСклад И (ИмяТЧ = "Товары") Тогда
			
			// Попытаться установить цены
			Попытка
			    // 0. Может быть, цены уже есть
				ЗапросПоЦенам = Новый Запрос;
				ЗапросПоЦенам.УстановитьПараметр("ДатаНач", ДокОбъект.Дата);
				ЗапросПоЦенам.УстановитьПараметр("ТипЦен", ДокОбъект.Склад.ТипЦенРозничнойТорговли); // ДокОбъект.ТипЦен
				ЗапросПоЦенам.УстановитьПараметр("Валюта", ДокОбъект.ВалютаДокумента);
				ЗапросПоЦенам.УстановитьПараметр("Номенклатура", СтрокаТоваровТекДокумента.Номенклатура);
				ЗапросПоЦенам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Рег.Цена
				|ИЗ
				|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаНач, (ТипЦен = &ТипЦен)И(Номенклатура = &Номенклатура)И(Валюта = &Валюта)) КАК Рег
				|";
				
				РознЦена = 0;
				ВыборкаПоЦенам = ЗапросПоЦенам.Выполнить().Выбрать();
				Если ВыборкаПоЦенам.Следующий() Тогда
					РознЦена = ВыборкаПоЦенам.Цена;
				КонецЕсли; 
				
				Если РознЦена <> СтрокаТоваровТекДокумента.ЦенаВРознице Тогда // Нужно устанавливать
				
					// 1. Есть ли такой документ
					ЗапросПоЦенам = Новый Запрос;
					ЗапросПоЦенам.УстановитьПараметр("ДатаНач", НачалоДня(ДокОбъект.Дата)); 
					ЗапросПоЦенам.УстановитьПараметр("ДатаКон", КонецДня(ДокОбъект.Дата));
					ЗапросПоЦенам.УстановитьПараметр("ТипЦен", ДокОбъект.Склад.ТипЦенРозничнойТорговли); // ДокОбъект.ТипЦен
					ЗапросПоЦенам.УстановитьПараметр("Валюта", ДокОбъект.ВалютаДокумента);
					//ЗапросПоЦенам.УстановитьПараметр("Номенклатура", СтрокаТоваровТекДокумента.Номенклатура);
					
				    ЗапросПоЦенам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	Док.Ссылка
					|ИЗ
					|	Документ.УстановкаЦенНоменклатуры.Товары КАК Док
					|ГДЕ
					|	(Док.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон)И
					|   (Док.Ссылка.ТипЦен = &ТипЦен)И
					|   (Док.Валюта = &Валюта)
					|   //И(Док.Номенклатура = &Номенклатура)
					|";
					
					СсылкаНаДокумент = Неопределено;
					ВыборкаПоЦенам = ЗапросПоЦенам.Выполнить().Выбрать();
					Если ВыборкаПоЦенам.Следующий() Тогда
						СсылкаНаДокумент = ВыборкаПоЦенам.Ссылка;
					КонецЕсли;
					
					Если СсылкаНаДокумент = Неопределено Тогда
						ДокументЦенОбъект = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
						ДокументЦенОбъект.Дата = НачалоДня(ДокОбъект.Дата);
						ДокументЦенОбъект.ТипЦен = ДокОбъект.Склад.ТипЦенРозничнойТорговли;					
					Иначе	
						ДокументЦенОбъект = СсылкаНаДокумент.ПолучитьОбъект();
					КонецЕсли; 
					
					РезПоиска = ДокументЦенОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура,Валюта",СтрокаТоваровТекДокумента.Номенклатура,ДокОбъект.ВалютаДокумента));
					Если РезПоиска.Количество()=0 Тогда
						СтрокаУстановкиЦен = ДокументЦенОбъект.Товары.Добавить();
						СтрокаУстановкиЦен.Номенклатура = СтрокаТоваровТекДокумента.Номенклатура;
						СтрокаУстановкиЦен.Валюта = ДокОбъект.ВалютаДокумента;
					Иначе	
						СтрокаУстановкиЦен = РезПоиска[0];
					КонецЕсли; 
					СтрокаУстановкиЦен.Цена = СтрокаТоваровТекДокумента.ЦенаВРознице;
					
					ДокументЦенОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
				КонецЕсли;
				
			Исключение
				Сообщить(ОписаниеОшибки());
				ТранзакцияОк=Ложь;
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки; 
						
			НоваяСтрокаДокумента.ЦенаВРознице = СтрокаТоваровТекДокумента.ЦенаВРознице;
			НоваяСтрокаДокумента.СуммаВРознице = СтрокаТоваровТекДокумента.СуммаВРознице;
		КонецЕсли;
		
		НоваяСтрокаДокумента.Номенклатура = СтрокаТоваровТекДокумента.Номенклатура;
		НоваяСтрокаДокумента.Цена = СтрокаТоваровТекДокумента.Цена; 
		//НоваяСтрокаДокумента.Сумма = СтрокаТоваровТекДокумента.Сумма;
		//НоваяСтрокаДокумента.СуммаНДС = СтрокаТоваровТекДокумента.СуммаНДС;
		НоваяСтрокаДокумента.Количество = СтрокаТоваровТекДокумента.Количество;
		
		
		ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|НомерГТД, СтранаПроисхождения,
		|СчетУчета, СчетУчетаНДС, СпособУчетаНДС,
		|ЦенаВРознице, СуммаВРознице, СтавкаНДСВРознице,
		|ОтражениеВУСН, ПродукцияМаркируемаяДляГИСМ");
		ДанныеСтрокиТаблицы.Количество=0;
		ДанныеСтрокиТаблицы.ЦенаВРознице=0;
		ДанныеСтрокиТаблицы.СуммаВРознице=0;
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрокаДокумента);	
		ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|РассчитыватьСуммаВРознице, ЗаполнятьСтавкуНДСВРознице, ЭтоКомиссия, ДоговорКонтрагента, ПрименяютсяСтавки4и2");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокОбъект);
		ДанныеОбъекта.РассчитыватьСуммаВРознице  = Ложь;
		ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице = Ложь;
		ДанныеОбъекта.ЭтоКомиссия                = Ложь;
		ДанныеОбъекта.ПрименяютсяСтавки4и2       = Ложь;
		Если ДокОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
			ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		КонецЕсли;
		ПараметрыОбработки = Новый Структура();
		ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
		ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
		
		ДанныеФормы=Новый Структура;
		ДанныеФормы.Вставить("Строка", ДанныеСтрокиТаблицы);
		ПараметрыОбработки.Вставить("ДанныеФормы", 		ДанныеФормы);
		
		//83
		//ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		//"Товары.Номенклатура", ДокОбъект, НоваяСтрокаДокумента, ДанныеОбъекта, ДанныеСтрокиТаблицы);
		ПараметрыЗаполненияСчетовУчета = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"РеализацияТоваровУслуг","Товары.Номенклатура",ДокОбъект, ДанныеСтрокиТаблицы, ДанныеОбъекта, ДанныеСтрокиТаблицы);				
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетРасходов");
							
		ПоступлениеТоваровУслугФормы.ТоварыНоменклатураПриИзменении(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению); //83
	    ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента, ПараметрыОбработки.ДанныеСтрокиТаблицы);
				
		//////// Кусок кода из ПоступленияТоваровУслуг	
		//////ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
		//////ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НоваяСтрокаДокумента);
		////////ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект); 
		//////НоваяСтрокаДокумента.СтавкаНДС = ПолучитьСтруктуруНДС(СтрокаТоваровТекДокумента.НДС);
		//////
		////////
		////////СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		////////                                   			Контрагент, ТипЦен, ДоговорКонтрагента, Дата,          ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС);
		////////ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТЧ, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 
		//////ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрокаДокумента);
		//////ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект.СуммаВключаетНДС);
		////////ДокОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрокаДокумента, ИмяТЧ, Истина, Истина);  //20
		//////Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокОбъект, ИмяТЧ);
		
		МД=ДокОбъект.Метаданные();
		ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НоваяСтрокаДокумента,ИмяТЧ, МД);
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрокаДокумента,ДокОбъект,ИмяТЧ, МД);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрокаДокумента);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект.СуммаВключаетНДС);
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокОбъект, ИмяТЧ);
		
		
		
		НоваяСтрокаДокумента.Цена = СтрокаТоваровТекДокумента.Цена; 
		НоваяСтрокаДокумента.Сумма = СтрокаТоваровТекДокумента.Сумма;
		НоваяСтрокаДокумента.СуммаНДС = СтрокаТоваровТекДокумента.СуммаНДС;
		
		Если СтрокаТоваровТекДокумента.Сумма<>0 Тогда
			НоваяСтрокаДокумента.Цена = СтрокаТоваровТекДокумента.Цена;
		    НоваяСтрокаДокумента.Сумма = СтрокаТоваровТекДокумента.Сумма;
			//ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
			НоваяСтрокаДокумента.СуммаНДС = СтрокаТоваровТекДокумента.СуммаНДС;
		    //ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
		КонецЕсли; 
		
		//////Если НЕ ДокОбъект.НДСВключенВСтоимость Тогда // Проф
		////Если ЭтаФорма.ЭтоБазаПроф Тогда
		////	НоваяСтрокаДокумента.Сумма=НоваяСтрокаДокумента.Сумма+НоваяСтрокаДокумента.СуммаНДС;	
		////КонецЕсли;
		
		Если ЭтоРозничныйСклад И (ИмяТЧ = "Товары") Тогда
			НоваяСтрокаДокумента.СтавкаНДСВРознице = НоваяСтрокаДокумента.СтавкаНДС;	
		КонецЕсли;	
			
 
	КонецЦикла;	
	
	
	Если ТранзакцияОк Тогда
	 
		Попытка 
			
			//1. Здесь - запись созданного документа
			Если ДокОбъект.Проведен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе	
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли; 
				
			//2. Здесь - запись в регистр соответствия ссылки на новый документ
			
			НаборЗаписей = РегистрыСведений._СоответствиеДокументов.СоздатьНаборЗаписей();	
			НаборЗаписей.Отбор.Документ.Установить(ДокОбъект.Ссылка);
		
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Документ = ДокОбъект.Ссылка;
			НоваяЗапись.Ид = СтрокаТаблицыДокументов.Ид_Медиалог;		
			НаборЗаписей.Записать(Истина);
			
			Сообщить("Записан документ "+ДокОбъект.Ссылка);
			
			СтрокаТаблицы.Документ1С = ДокОбъект.Ссылка;

		Исключение
			Сообщить(ОписаниеОшибки());
			ТранзакцияОк=Ложь;
		КонецПопытки;
		
	КонецЕсли;	
	
	Если ТранзакцияОк Тогда
		ЗафиксироватьТранзакцию();
	Иначе	
		ОтменитьТранзакцию();
	КонецЕсли; 
	
	
КонецПроцедуры // СформироватьПоступление()

&НаСервере
Процедура СформироватьРасходнуюНакладную(СтрокаТаблицы, ТаблицаДокументов, ТоварныеТаблицы, ПодчСтрока = Неопределено)  //РА2
	
	//РА2
	Если ПодчСтрока = Неопределено Тогда
		СТ = СтрокаТаблицы;
	Иначе
		СТ = ПодчСтрока;
	КонецЕсли;
	//РА2
	
	Если НЕ ЗначениеЗаполнено(СТ.Договор) тогда
		сообщить("Не заполнен договор в Реализации № "+ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Номер_Медиалог+" !");
		Возврат;		
	ИначеЕсли НЕ ЗначениеЗаполнено(СТ.Договор.ТипЦен) тогда
		сообщить("Не заполен тип цен в договоре в Реализации № "+ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Номер_Медиалог+" !");
		Возврат;		
	//ИначеЕсли СтрокаТаблицы.Договор.ТипЦен.ЦенаВключаетНДС тогда	
	//	сообщить("Неправильный тип цен в договоре в Реализации № "+ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Номер_Медиалог+" (цена не должна включать НДС) !");
	//	Возврат;		
	КонецЕсли;
	
	СтрокаТаблицыДокументов = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы];
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДокументов.Склад) Тогда
		Сообщить("Не заполнен склад в Реализации № "+ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Номер_Медиалог+" !");
		Возврат;	
	КонецЕсли;	
	
	НоменклатураСНезаполненнымиСчетами = "";
	
	ТЧТекущегоДокумента = СтрокаТаблицыДокументов.Товар;
	Для каждого СтрокаТЧТекДокумента Из ТЧТекущегоДокумента Цикл
		
		Номенклатура_ = СтрокаТЧТекДокумента.Номенклатура;
		
		Если НЕ ЗначениеЗаполнено(Номенклатура_) Тогда
			Сообщить("Не заполнена номенклатура в Реализации № "+ТаблицаДокументов[СтрокаТаблицы].Номер_Медиалог+" !");
			Возврат;
		КонецЕсли; 
		
		
		СчетаУчета = ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, Номенклатура_, СтрокаТаблицыДокументов.Склад);
		СчетУчетаБУ  = СчетаУчета.СчетУчета;
		
		Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
			НоменклатураСНезаполненнымиСчетами = ?(ПустаяСтрока(НоменклатураСНезаполненнымиСчетами),"",",
			|")+ СокрЛП(Номенклатура_);	
		КонецЕсли; 
		
		СтрокаТЧТекДокумента.СчетУчета = СчетУчетаБУ;

	КонецЦикла;	

	Если Не ПустаяСтрока(НоменклатураСНезаполненнымиСчетами) Тогда
		Сообщить("В Реализации № "+ТаблицаДокументов[СтрокаТаблицы].Номер_Медиалог+" имеется номенклатура с незаполненными счетами учета:
		|"+НоменклатураСНезаполненнымиСчетами);
		Возврат;
	КонецЕсли; 
	
				
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	СтрокаТаблицыДокументов = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы];
	
	ПараметрыДокумента = Новый Структура;	
	ПараметрыДокумента.Вставить("СтрокаТаблицыДокументов", СтрокаТаблицыДокументов);
	ПараметрыДокумента.Вставить("ВидДокумента", "РеализацияТоваровУслуг");
	//РА2
	//ПараметрыДокумента.Вставить("ДокументСсылка", СтрокаТаблицы.Документ1С);
	Если ПодчСтрока = Неопределено Тогда
		ПараметрыДокумента.Вставить("ДокументСсылка", СтрокаТаблицы.Документ1С);
	Иначе
		ПараметрыДокумента.Вставить("ДокументСсылка", ПодчСтрока.Документ1С);
	КонецЕсли;

	
	ПолучитьДокумент(ПараметрыДокумента);
	
	ДокОбъект = ПараметрыДокумента.ДокументОбъект;
	Если ДокОбъект = Неопределено Тогда
		Сообщить("Не удалось создать документ в 1С по Реализации № "+ТаблицаДокументов[СтрокаТаблицы].Номер_Медиалог+" !");
		Возврат;		
	КонецЕсли;
	
	ДокОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;	
	ДокОбъект.Товары.Очистить();
	 	
	// Заполнить реквизиты значениями по умолчанию.
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", Неопределено);
	ЗаполнениеДокументов.Заполнить(ДокОбъект);
	
	ДокОбъект.Контрагент = СТ.Контрагент;  //РА2
	ДокОбъект.ДоговорКонтрагента = СТ.Договор;  //РА2
	// Байдин 2017-12-26 /*
	Если ЗначениеЗаполнено(СтрокаТаблицыДокументов.Склад) Тогда
		ДокОбъект.Склад = СтрокаТаблицыДокументов.Склад;
		ДокОбъект.ПодразделениеОрганизации = СтрокаТаблицыДокументов.Склад.ПодразделениеОрганизации;
	КонецЕсли; 
	// */ Байдин 2017-12-26 
	
	
	////////ДокОбъект.Контрагент = СтрокаТаблицыДокументов.Контрагент;
	//////////ДокОбъект.ДоговорКонтрагента = СтрокаТаблицыДокументов.Договор; 
	
	////////ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДокОбъект,СписокВидовДоговоров);
	////////	
	////////Если ЗначениеЗаполнено(ДокОбъект.ДоговорКонтрагента) И СписокВидовДоговоров.НайтиПоЗначению(ДокОбъект.ДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
	////////	ДокОбъект.ДоговорКонтрагента = Неопределено;
	////////КонецЕсли;
	
	
	//ДокОбъект.НомерВходящегоДокумента = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Номер_Медиалог;

	Если ЗначениеЗаполнено(ДокОбъект.ДоговорКонтрагента) Тогда
		
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам;
		// Зададим, какие реквизиты надо редактировать.
		СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокОбъект);
		
		//ПриИзмененииЗначенияДоговора(ДокОбъект, мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары");

		СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(ДокОбъект.Организация, ДокОбъект.Контрагент, ДокОбъект.ДоговорКонтрагента);
		
		//Проверим какие же счета будем изменять
		ЗаполнятьСчетаРасчета = Истина; //Заполнять ли счета расчетов
		//ЗаполнятьСчетаНУБУ    = Ложь; //Если заполнять надо, то Ложь - только Бу, Истина - Ну и Бу 
					
		СтруктураОбязательныхПолей = Новый Структура;
		СтруктураНеОбязательныхПолей = Новый Структура;	
			
		Если ДокОбъект.ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре", СчетаУчета.СчетУчетаТары);
		КонецЕсли;
					
		Если ДокОбъект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовСКомитентом);			
		Иначе
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетов);			
		КонецЕсли;  
		СтруктураНеОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам", СчетаУчета.СчетАвансов);
		
		//БухгалтерскийУчет.ПроверитьНеобходимостьПерезаполненияСчетовУчета(ДокОбъект, СтруктураОбязательныхПолей,СтруктураНеОбязательныхПолей, Ложь, ЗаполнятьСчетаРасчета);
					
		Если ЗаполнятьСчетаРасчета Тогда		
			//ДокОбъект.ЗаполнитьСчетаУчетаРасчетов(СчетаУчета);
			Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ДокОбъект);
		КонецЕсли;

		//Если НЕ (ДокОбъект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам) Тогда
		//	ДокОбъект.Сделка = Неопределено;
		//КонецЕсли;		
		
	КонецЕсли;	
	
	ДокОбъект.УдалитьУчитыватьНДС = Истина;
	ДокОбъект.СуммаВключаетНДС = Истина;
	//ДокОбъект.СуммаВключаетНДС = Истина;
		
	ДокОбъект.Склад = СтрокаТаблицыДокументов.Склад;
	
	//РА2
	//ТоварыТекущегоДокумента = СтрокаТаблицыДокументов.Товар;
	Если ПодчСтрока = Неопределено Тогда
		ТоварыТекущегоДокумента = ТоварныеТаблицы[СтрокаТаблицы.СтрокаТаблицыН].Товар;
	Иначе
		ТоварыТекущегоДокумента = ТоварныеТаблицы[ПодчСтрока.СтрокаТаблицыН].Товар;
	КонецЕсли;
		
	Для каждого СтрокаТоваровТекДокумента Из ТоварыТекущегоДокумента Цикл
		
		ИмяТЧ = "Товары";
						
		НоваяСтрокаДокумента = ДокОбъект[ИмяТЧ].Добавить();
		НоваяСтрокаДокумента.Номенклатура = СтрокаТоваровТекДокумента.Номенклатура;
		Если СтрокаТаблицы.Вид = "Продажа в розницу" Тогда
			НоваяСтрокаДокумента.Цена = СтрокаТоваровТекДокумента.ЦенаВРозницеСНДС;
		Иначе	
			НоваяСтрокаДокумента.Цена = СтрокаТоваровТекДокумента.Цена;
		КонецЕсли; 
		//НоваяСтрокаДокумента.Сумма = СтрокаТоваровТекДокумента.Сумма;
		//НоваяСтрокаДокумента.СуммаНДС = СтрокаТоваровТекДокумента.СуммаНДС;
		НоваяСтрокаДокумента.Количество = СтрокаТоваровТекДокумента.Количество;
		
		// Кусок кода из ПоступленияТоваровУслуг	
		////ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
		////ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НоваяСтрокаДокумента, Ложь, Организация, ДокОбъект.Дата);
		//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект); 
		СтуктураНДС = ПолучитьСтруктуруНДС(СтрокаТоваровТекДокумента.НДС);
		НоваяСтрокаДокумента.СтавкаНДС = СтуктураНДС.СтавкаНДС;
		
		//////
		//////СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		//////                                   			Контрагент, ТипЦен, ДоговорКонтрагента, Дата,          ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС);
		//////ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТЧ, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 
		////ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
		////ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
		////ДокОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрокаДокумента, ИмяТЧ, Истина);
		
			
		// Текст из  Процедура ТоварыНоменклатураПриИзменении(Элемент)
		ТекущиеДанные = НоваяСтрокаДокумента;			
		ЭтоКомиссия = Ложь;
		ДанныеСтрокиТаблицы = Новый Структура(
			"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
			|Цена, Сумма, СтавкаНДС, СуммаНДС,
			|СчетУчета, ПереданныеСчетУчета,
			|СчетДоходов, Субконто, СчетУчетаНДСПоРеализации, СчетРасходов,
			|НомерГТД, СтранаПроисхождения, ПродукцияМаркируемаяДляГИСМ");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);	
		ДанныеОбъекта = Новый Структура(
			"Дата, ВидОперации, Организация, ДеятельностьНаПатенте,
			|Склад, ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
			|СуммаВключаетНДС, ДоговорКонтрагента,
			|ЭтоКомиссия, Реализация");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокОбъект);
		ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
		ДанныеОбъекта.Реализация  = Истина;	
		ПараметрыОбработки = Новый Структура();
		ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
		ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);	
		////// Получим общие параметры обработки для реквизитов документа
		////ПараметрыОбработки = РеализацияТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(
		////	ЭтаФорма, ТекущиеДанные);
		//
		// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
		////ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", 0);
		////ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ТекущиеДанные.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам);
		////ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетУчетаЗабалансовый", ТекущиеДанные.СчетУчетаЗабалансовый);

		//ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
		ПараметрыОбработки.ДанныеОбъекта.Вставить("СуммаВключаетНДС", 	ДокОбъект.СуммаВключаетНДС);
		ПараметрыОбработки.ДанныеОбъекта.Вставить("РеализацияВЕАЭС", 	Ложь);
		ПараметрыОбработки.ДанныеОбъекта.Вставить("ПокупательНалоговыйАгентПоНДС", 	Ложь);

		
		ДанныеФормы=Новый Структура;
		ДанныеФормы.Вставить("Строка", ДанныеСтрокиТаблицы);
		ПараметрыОбработки.Вставить("ДанныеФормы", 		ДанныеФормы);
		
		//83
		////ПараметрыЗаполненияСчетовУчета = РеализацияТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		////"Товары.Номенклатура", ДокОбъект, НоваяСтрокаДокумента, ДанныеОбъекта, ДанныеСтрокиТаблицы);		
		ПараметрыЗаполненияСчетовУчета = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"РеализацияТоваровУслуг","Товары.Номенклатура",ДокОбъект, ДанныеСтрокиТаблицы, ДанныеОбъекта, ДанныеСтрокиТаблицы);		
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетРасходов");
		
		//83
		//ТоварыНоменклатураПриИзмененииНаСервере(
		//	ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
        РеализацияТоваровУслугФормы.ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению); //83

		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

		МД=ДокОбъект.Метаданные();
		ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НоваяСтрокаДокумента,"Товары", МД);
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрокаДокумента,ДокОбъект,"Товары", МД);
		
		НоваяСтрокаДокумента.Цена = СтрокаТоваровТекДокумента.ЦенаВРозницеСНДС;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрокаДокумента);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект.СуммаВключаетНДС);
				

		
		Если СтрокаТоваровТекДокумента.Сумма<>0 Тогда
			Если СтрокаТаблицы.Вид = "Продажа в розницу" Тогда
				НоваяСтрокаДокумента.Сумма = СтрокаТоваровТекДокумента.СуммаВРозницеСНДС;
				//ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
				НоваяСтрокаДокумента.СуммаНДС = СтрокаТоваровТекДокумента.СуммаВРозницеСНДС - СтрокаТоваровТекДокумента.СуммаВРознице;
			Иначе	
			
			    НоваяСтрокаДокумента.Сумма = СтрокаТоваровТекДокумента.Сумма;
				//ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
				НоваяСтрокаДокумента.СуммаНДС = СтрокаТоваровТекДокумента.СуммаНДС;
			    //ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
			КонецЕсли;
		КонецЕсли;

		
	КонецЦикла;	
	
		
	Попытка 
		
		//1. Здесь - запись созданного документа
		Если ДокОбъект.Проведен Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе	
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	
		//2. Здесь - запись в регистр соответствия ссылки на новый документ
		
		НаборЗаписей = РегистрыСведений._СоответствиеДокументов.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Документ.Установить(ДокОбъект.Ссылка);
	
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = ДокОбъект.Ссылка;
		НоваяЗапись.Ид = СтрокаТаблицыДокументов.Ид_Медиалог;		
		НаборЗаписей.Записать(Истина);
		
		Сообщить("Записан документ "+ДокОбъект.Ссылка);
		
		//РА2
		//СтрокаТаблицы.Документ1С = ДокОбъект.Ссылка;
		Если ПодчСтрока = Неопределено Тогда
			СтрокаТаблицы.Документ1С = ДокОбъект.Ссылка;
		Иначе
			ПодчСтрока.Документ1С = ДокОбъект.Ссылка;	
		КонецЕсли;

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	

КонецПроцедуры // СформироватьРасходнуюНакладную()

&НаСервере
Процедура СформироватьОтчетОРозничныхПродажах(СтрокаТаблицы, ТаблицаДокументов, ТоварныеТаблицы, ПодчСтрока = Неопределено)  //РА2
		
	СтрокаТаблицыДокументов = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы];
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДокументов.Склад) Тогда
		Сообщить("Не заполнен склад в Отчете о розничных продажах № "+ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Номер_Медиалог+" !");
		Возврат;	
	КонецЕсли;	
		
	НоменклатураСНезаполненнымиСчетами = "";
	
	ТЧТекущегоДокумента = СтрокаТаблицыДокументов.Товар;
	Для каждого СтрокаТЧТекДокумента Из ТЧТекущегоДокумента Цикл
		
		Номенклатура_ = СтрокаТЧТекДокумента.Номенклатура;
		
		Если НЕ ЗначениеЗаполнено(Номенклатура_) Тогда
			Сообщить("Не заполнена номенклатура в Отчете о розничных продажах № "+ТаблицаДокументов[СтрокаТаблицы].Номер_Медиалог+" !");
			Возврат;
		КонецЕсли; 
				
		СчетаУчета = ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, Номенклатура_, СтрокаТаблицыДокументов.Склад);
		СчетУчетаБУ  = СчетаУчета.СчетУчета;
		
		Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
			НоменклатураСНезаполненнымиСчетами = ?(ПустаяСтрока(НоменклатураСНезаполненнымиСчетами),"",",
			|")+ СокрЛП(Номенклатура_);	
		КонецЕсли; 
		
		СтрокаТЧТекДокумента.СчетУчета = СчетУчетаБУ;

	КонецЦикла;	

	Если Не ПустаяСтрока(НоменклатураСНезаполненнымиСчетами) Тогда
		Сообщить("В Отчете о розничных продажах № "+ТаблицаДокументов[СтрокаТаблицы].Номер_Медиалог+" имеется номенклатура с незаполненными счетами учета:
		|"+НоменклатураСНезаполненнымиСчетами);
		Возврат;
	КонецЕсли; 
	
	СтрокаТаблицыДокументов = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы];
	
	ПараметрыДокумента = Новый Структура;	
	ПараметрыДокумента.Вставить("СтрокаТаблицыДокументов", СтрокаТаблицыДокументов);
	ПараметрыДокумента.Вставить("ВидДокумента", "ОтчетОРозничныхПродажах");
	//РА2
	//ПараметрыДокумента.Вставить("ДокументСсылка", СтрокаТаблицы.Документ1С);	
	Если ПодчСтрока = Неопределено Тогда
		ПараметрыДокумента.Вставить("ДокументСсылка", СтрокаТаблицы.Документ1С);
	Иначе
		ПараметрыДокумента.Вставить("ДокументСсылка", ПодчСтрока.Документ1С);
	КонецЕсли;
	
	ПолучитьДокумент(ПараметрыДокумента);
	
	ДокОбъект = ПараметрыДокумента.ДокументОбъект;
	Если ДокОбъект = Неопределено Тогда
		Сообщить("Не удалось создать документ в 1С по Отчету о розничных продажах № "+ТаблицаДокументов[СтрокаТаблицы].Номер_Медиалог+" !");
		Возврат;		
	КонецЕсли;
	
		
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа",Неопределено);
	ЗаполнениеДокументов.Заполнить(ДокОбъект);
	Если НЕ ЗначениеЗаполнено(ДокОбъект.СчетКасса) Тогда
		ДокОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	КонецЕсли;
	ДокОбъект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	
	ДокОбъект.Склад = СтрокаТаблицыДокументов.Склад;
	Если ЗначениеЗаполнено(ДокОбъект.Склад) Тогда 		
		// Байдин 2017-12-26 /*
		ДокОбъект.ПодразделениеОрганизации = СтрокаТаблицыДокументов.Склад.ПодразделениеОрганизации;
		// */ Байдин 2017-12-26 
		Если (НЕ ДокОбъект.Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин) Тогда
			ДокОбъект.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;		
	КонецЕсли;
	
	ДокОбъект.УдалитьУчитыватьНДС = Истина;
	ДокОбъект.СуммаВключаетНДС = Истина;
	
	Если ЗначениеЗаполнено(ДокОбъект.Склад) Тогда
		ДокОбъект.ТипЦен =  ДокОбъект.Склад.ТипЦенРозничнойТорговли;
	КонецЕсли;	
	
	ДокОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000006"); 
 
	ДокОбъект.Товары.Очистить();
	
	//РА2
	//ТоварыТекущегоДокумента = СтрокаТаблицыДокументов.Товар;
	Если ПодчСтрока = Неопределено Тогда
		//Сообщить("="+СтрокаТаблицы.СтрокаТаблицыН+"/"+ТоварныеТаблицы.Количество());
		ТоварыТекущегоДокумента = ТоварныеТаблицы[СтрокаТаблицы.СтрокаТаблицыН].Товар;
	Иначе
		ТоварыТекущегоДокумента = ТоварныеТаблицы[ПодчСтрока.СтрокаТаблицыН].Товар;
	КонецЕсли;
	
	ТоварыТекущегоДокумента.Сортировать("CHECK_NUM");
		
	Для каждого СтрокаТоваровТекДокумента Из ТоварыТекущегоДокумента Цикл
		
		ИмяТЧ = "Товары";
						
		НоваяСтрокаДокумента = ДокОбъект[ИмяТЧ].Добавить();
		НоваяСтрокаДокумента.Номенклатура = СтрокаТоваровТекДокумента.Номенклатура;
		НоваяСтрокаДокумента.Цена = СтрокаТоваровТекДокумента.ЦенаВРозницеСНДС; 
		//НоваяСтрокаДокумента.Сумма = СтрокаТоваровТекДокумента.Сумма;
		//НоваяСтрокаДокумента.СуммаНДС = СтрокаТоваровТекДокумента.СуммаНДС;
		НоваяСтрокаДокумента.Количество = СтрокаТоваровТекДокумента.Количество;
		
		//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
		СтуктураНДС = ПолучитьСтруктуруНДС(СтрокаТоваровТекДокумента.НДС);
		НоваяСтрокаДокумента.СтавкаНДС = СтуктураНДС.СтавкаНДС;
		
		//ДокОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрокаДокумента, Истина);
		//////ПараметрыОбъекта = Новый Структура;
		//////ПараметрыОбъекта.Вставить("Дата", ДокОбъект.Дата);
		//////ПараметрыОбъекта.Вставить("Организация", ДокОбъект.Организация);	
		//////ПараметрыОбъекта.Вставить("АТТПоПродажнойСтоимости", Ложь);
		//////Сведения=БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(НоваяСтрокаДокумента.Номенклатура, ПараметрыОбъекта);	
		//////Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ПараметрыОбъекта, НоваяСтрокаДокумента, "Товары",Сведения);
		
		//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
		//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрокаДокумента);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект.СуммаВключаетНДС);
		
		Если СтрокаТоваровТекДокумента.Сумма<>0 Тогда
		    //НоваяСтрокаДокумента.Сумма = СтрокаТоваровТекДокумента.Сумма;
			НоваяСтрокаДокумента.Сумма = СтрокаТоваровТекДокумента.СуммаВРозницеСНДС;
						
			//ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
			НоваяСтрокаДокумента.СуммаНДС = СтрокаТоваровТекДокумента.СуммаВРозницеСНДС - СтрокаТоваровТекДокумента.СуммаВРознице;
		    //ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
		КонецЕсли;
	КонецЦикла;	
	
	Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокОбъект, "Товары");
	
	// Заполнить если надо ТЧ Оплата
	ДокОбъект.Оплата.Очистить();
	Если СтрокаТаблицыДокументов.СуммаПоКартам > 0 Тогда
		НоваяСтрокаДокумента = ДокОбъект.Оплата.Добавить();
		ВидОплаты_ = Справочники.ВидыОплатОрганизаций.НайтиПоКоду("000000001");
		Если ВидОплаты_.Организация=ДокОбъект.Организация Тогда
			НоваяСтрокаДокумента.ВидОплаты = Справочники.ВидыОплатОрганизаций.НайтиПоКоду("000000001");
			НоваяСтрокаДокумента.УдалитьКонтрагент = НоваяСтрокаДокумента.ВидОплаты.Контрагент;
			НоваяСтрокаДокумента.УдалитьДоговорКонтрагента = НоваяСтрокаДокумента.ВидОплаты.ДоговорКонтрагента;
			НоваяСтрокаДокумента.УдалитьСчетУчетаРасчетов = НоваяСтрокаДокумента.ВидОплаты.СчетУчетаРасчетов;
		Иначе	
			Сообщить("Организация в 'Виде оплаты' не соответствует организации документа'");
		КонецЕсли; 
		НоваяСтрокаДокумента.СуммаОплаты = СтрокаТаблицыДокументов.СуммаПоКартам;	
	КонецЕсли;
	
	Попытка 
		
		//1. Здесь - запись созданного документа
		Если ДокОбъект.Проведен Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе	
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	
		//2. Здесь - запись в регистр соответствия ссылки на новый документ
		
		НаборЗаписей = РегистрыСведений._СоответствиеДокументов.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Документ.Установить(ДокОбъект.Ссылка);
	
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = ДокОбъект.Ссылка;
		НоваяЗапись.Ид = СтрокаТаблицыДокументов.Ид_Медиалог;		
		НаборЗаписей.Записать(Истина);
		
		Сообщить("Записан документ "+ДокОбъект.Ссылка);
		
		//РА2
		//СтрокаТаблицы.Документ1С = ДокОбъект.Ссылка;
		Если ПодчСтрока = Неопределено Тогда
			СтрокаТаблицы.Документ1С = ДокОбъект.Ссылка;
		Иначе
			ПодчСтрока.Документ1С = ДокОбъект.Ссылка;	
		КонецЕсли;

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры // СформироватьОтчетОРозничныхПродажах() 

&НаСервере
Процедура СформироватьПеремещение(СтрокаТаблицы, ТаблицаДокументов, ТоварныеТаблицы, ПодчСтрока = Неопределено)
	
	СтрокаТаблицыДокументов = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы];
	
	ПараметрыДокумента = Новый Структура;	
	ПараметрыДокумента.Вставить("СтрокаТаблицыДокументов", СтрокаТаблицыДокументов);
	ПараметрыДокумента.Вставить("ВидДокумента", "ПеремещениеТоваров");
	Если ПодчСтрока = Неопределено Тогда
		ПараметрыДокумента.Вставить("ДокументСсылка", СтрокаТаблицы.Документ1С);
	Иначе
		ПараметрыДокумента.Вставить("ДокументСсылка", ПодчСтрока.Документ1С);
	КонецЕсли;
	
	ПолучитьДокумент(ПараметрыДокумента);
	
	ДокОбъект = ПараметрыДокумента.ДокументОбъект;
	Если ДокОбъект = Неопределено Тогда
		сообщить("Не удалось создать документ");
		Возврат;		
	КонецЕсли;
	
	ДокОбъект.УдалитьВидОперации = Перечисления.УдалитьВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокОбъект, глЗначениеПеременной("глТекущийПользователь"),,,Неопределено);
	ЗаполнениеДокументов.Заполнить(ДокОбъект);

	ДокОбъект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	
	ДокОбъект.СкладОтправитель = СтрокаТаблицыДокументов.Склад;
	ДокОбъект.СкладПолучатель = СтрокаТаблицыДокументов.СкладКуда;
	
	// Байдин 2017-12-26 /*
	Если ЗначениеЗаполнено(ДокОбъект.СкладПолучатель) Тогда
		ДокОбъект.ПодразделениеПолучатель 	= ДокОбъект.СкладПолучатель.ПодразделениеОрганизации;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДокОбъект.СкладОтправитель) Тогда
		ДокОбъект.ПодразделениеОтправитель 	= ДокОбъект.СкладОтправитель.ПодразделениеОрганизации;
	КонецЕсли; 
	// */ Байдин 2017-12-26 
	
	ДокОбъект.Товары.Очистить();

	//Если ПодчСтрока = Неопределено Тогда
	//	ТоварыТекущегоДокумента = СтрокаТаблицыДокументов.Товар;
	//Иначе
	//	ТоварыТекущегоДокумента = ТоварныеТаблицы[СтрокаТаблицы.СтрокаТаблицыН].Товар;
	//КонецЕсли; 
	Если ПодчСтрока = Неопределено Тогда
		ТоварыТекущегоДокумента = ТоварныеТаблицы[СтрокаТаблицы.СтрокаТаблицыН].Товар;
	Иначе
		ТоварыТекущегоДокумента = ТоварныеТаблицы[ПодчСтрока.СтрокаТаблицыН].Товар;
	КонецЕсли;
 
		
	Для каждого СтрокаТоваровТекДокумента Из ТоварыТекущегоДокумента Цикл
		
		НоваяСтрокаДокумента = ДокОбъект.Товары.Добавить();
		НоваяСтрокаДокумента.Номенклатура = СтрокаТоваровТекДокумента.Номенклатура;
		НоваяСтрокаДокумента.Цена = СтрокаТоваровТекДокумента.Цена; 
		НоваяСтрокаДокумента.Количество = СтрокаТоваровТекДокумента.Количество;
		
		// Кусок кода из Документа	
		//ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
		
		НоваяСтрокаДокумента.ЕдиницаИзмерения = НоваяСтрокаДокумента.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрокаДокумента.Коэффициент      = 1;
		
		
		ДанныеНоменклатура = Новый Структура("СчетУчета, НовыйСчетУчета, ЕдиницаИзмерения, Коэффициент, СпособУчетаНДС,
			|СтавкаНДСВРознице, ЦенаВРознице, СуммаВРознице");
		ЗаполнитьЗначенияСвойств(ДанныеНоменклатура,НоваяСтрокаДокумента);
		ДанныеОбъекта = Новый Структура("Дата, Организация, Склад", ДокОбъект.Дата, ДокОбъект.Организация, );	
		ДанныеОбъекта.Склад	= ДокОбъект.СкладОтправитель;
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
			НоваяСтрокаДокумента.Номенклатура, ДанныеОбъекта);
	    ДанныеОбъекта.Склад	= ДокОбъект.СкладПолучатель;
		НовыеСведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
			НоваяСтрокаДокумента.Номенклатура, ДанныеОбъекта);	
		//Если СтруктураПараметров.УчетВПродажныхЦенах
		//		И СтруктураПараметров.ТипСкладаОтправитель <> Перечисления.ТипыСкладов.ОптовыйСклад Тогда
		//	Документы.ПеремещениеТоваров.ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(
		//		ДанныеНоменклатура.СчетУчета, СтруктураПараметров.ТипСкладаОтправитель);
		//	ДанныеНоменклатура.ЕдиницаИзмерения	= СведенияОНоменклатуре.ЕдиницаИзмерения;
		//	ДанныеНоменклатура.Коэффициент		= СведенияОНоменклатуре.Коэффициент;
		//ИначеЕсли СведенияОНоменклатуре <> Неопределено Тогда
			ДанныеНоменклатура.СчетУчета		= СведенияОНоменклатуре.СчетаУчета.СчетУчета;
			ДанныеНоменклатура.ЕдиницаИзмерения	= СведенияОНоменклатуре.ЕдиницаИзмерения;
			ДанныеНоменклатура.Коэффициент		= СведенияОНоменклатуре.Коэффициент;
		//КонецЕсли;	
		Если НовыеСведенияОНоменклатуре <> Неопределено Тогда
			ДанныеНоменклатура.СпособУчетаНДС	= НовыеСведенияОНоменклатуре.СчетаУчета.СпособУчетаНДС;
		КонецЕсли;	
		//Если СтруктураПараметров.УчетВПродажныхЦенах
		//		И СтруктураПараметров.ТипСкладаПолучатель <> Перечисления.ТипыСкладов.ОптовыйСклад Тогда
		//	Документы.ПеремещениеТоваров.ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(
		//		ДанныеНоменклатура.НовыйСчетУчета, СтруктураПараметров.ТипСкладаПолучатель);
		//Иначе
				Если НовыеСведенияОНоменклатуре <> Неопределено Тогда
			ДанныеНоменклатура.НовыйСчетУчета = НовыеСведенияОНоменклатуре.СчетаУчета.СчетУчета;
		КонецЕсли;	
		//Если СтруктураПараметров.ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда			
		//	Если СтруктураПараметров.РазделятьПоСтавкамНДС И СведенияОНоменклатуре <> Неопределено Тогда
		//		ДанныеНоменклатура.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
		//	КонецЕсли;		
		//	Если СтруктураПараметров.ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад И СведенияОНоменклатуре <> Неопределено Тогда
		//		ДанныеНоменклатура.ЦенаВРознице  = СведенияОНоменклатуре.ЦенаВРознице;
		//		ДанныеНоменклатура.СуммаВРознице = ДанныеНоменклатура.ЦенаВРознице * СтруктураПараметров.Количество;
		//	КонецЕсли;	
		//ИначеЕсли СтруктураПараметров.ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда	
		//	Если СтруктураПараметров.РазделятьПоСтавкамНДС И НовыеСведенияОНоменклатуре <> Неопределено Тогда
		//		ДанныеНоменклатура.СтавкаНДСВРознице = НовыеСведенияОНоменклатуре.СтавкаНДСВРознице;
		//	КонецЕсли;
		//	Если СтруктураПараметров.ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад И НовыеСведенияОНоменклатуре <> Неопределено Тогда
		//		ДанныеНоменклатура.ЦенаВРознице  = НовыеСведенияОНоменклатуре.ЦенаВРознице;
		//		ДанныеНоменклатура.СуммаВРознице = ДанныеНоменклатура.ЦенаВРознице * СтруктураПараметров.Количество;
		//	КонецЕсли;	
		//КонецЕсли;
				
	    ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента,ДанныеНоменклатура);

		//ДокОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрокаДокумента, "Товары", Истина);		
	КонецЦикла;	
	
	Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокОбъект,"Товары");

	Попытка 
		
		//1. Здесь - запись созданного документа
		Если ДокОбъект.Проведен Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе	
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	
		//2. Здесь - запись в регистр соответствия ссылки на новый документ
		
		НаборЗаписей = РегистрыСведений._СоответствиеДокументов.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Документ.Установить(ДокОбъект.Ссылка);
	
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = ДокОбъект.Ссылка;
		НоваяЗапись.Ид = СтрокаТаблицыДокументов.Ид_Медиалог;		
		НаборЗаписей.Записать(Истина);
		
		Сообщить("Записан документ "+ДокОбъект.Ссылка);
		
		Если ПодчСтрока = Неопределено Тогда
			СтрокаТаблицы.Документ1С = ДокОбъект.Ссылка;
		Иначе
			ПодчСтрока.Документ1С = ДокОбъект.Ссылка;	
		КонецЕсли;	

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры // СформироватьПеремещение()	

&НаСервере
Процедура СформироватьТрНакладную(СтрокаТаблицы, ТаблицаДокументов, ТоварныеТаблицы, ПодчСтрока = Неопределено)
	
	СтрокаТаблицыДокументов = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы];
	
	ПараметрыДокумента = Новый Структура;	
	ПараметрыДокумента.Вставить("СтрокаТаблицыДокументов", СтрокаТаблицыДокументов);
	ПараметрыДокумента.Вставить("ВидДокумента", "ТребованиеНакладная");
	Если ПодчСтрока = Неопределено Тогда
		ПараметрыДокумента.Вставить("ДокументСсылка", СтрокаТаблицы.Документ1С);
	Иначе
		ПараметрыДокумента.Вставить("ДокументСсылка", ПодчСтрока.Документ1С);
	КонецЕсли;
	
	ПолучитьДокумент(ПараметрыДокумента);
	
	ДокОбъект = ПараметрыДокумента.ДокументОбъект;
	Если ДокОбъект = Неопределено Тогда
		Сообщить("Не удалось создать документ");
		Возврат;		
	КонецЕсли;
	
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокОбъект, глЗначениеПеременной("глТекущийПользователь"),,,Неопределено);
	ЗаполнениеДокументов.Заполнить(ДокОбъект);

	ДокОбъект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	ДокОбъект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = Истина;
	ДокОбъект.Склад = СтрокаТаблицыДокументов.Склад;
	
	// Байдин 2017-12-26 /*
	Если ЗначениеЗаполнено(ДокОбъект.Склад) Тогда
		ДокОбъект.ПодразделениеОрганизации = ДокОбъект.Склад.ПодразделениеОрганизации;
	КонецЕсли; 
	// */ Байдин 2017-12-26 
		
	ДокОбъект.Материалы.Очистить();

	//Если ПодчСтрока = Неопределено Тогда
	//	ТоварыТекущегоДокумента = СтрокаТаблицыДокументов.Товар;
	//Иначе
	//	ТоварыТекущегоДокумента = ТоварныеТаблицы[СтрокаТаблицы.СтрокаТаблицыН].Товар;
	//КонецЕсли;
	Если ПодчСтрока = Неопределено Тогда
		ТоварыТекущегоДокумента = ТоварныеТаблицы[СтрокаТаблицы.СтрокаТаблицыН].Товар;
	Иначе
		ТоварыТекущегоДокумента = ТоварныеТаблицы[ПодчСтрока.СтрокаТаблицыН].Товар;
	КонецЕсли;

	
	Для каждого СтрокаТоваровТекДокумента Из ТоварыТекущегоДокумента Цикл
		
		НоваяСтрокаДокумента = ДокОбъект.Материалы.Добавить();
		НоваяСтрокаДокумента.Номенклатура = СтрокаТоваровТекДокумента.Номенклатура; 
		НоваяСтрокаДокумента.Количество = СтрокаТоваровТекДокумента.Количество;
		
		НоваяСтрокаДокумента.ЕдиницаИзмерения = НоваяСтрокаДокумента.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрокаДокумента.Коэффициент      = 1;
		НоваяСтрокаДокумента.ОтражениеВУСН 	  = Перечисления.ОтражениеВУСН.Принимаются;

		//ДокОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрокаДокумента, "Материалы", Истина);
		
	КонецЦикла;	
	
	Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокОбъект,"Материалы");

	Попытка 
		
		//1. Здесь - запись созданного документа
		Если ДокОбъект.Проведен Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе	
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
			
		//2. Здесь - запись в регистр соответствия ссылки на новый документ
		
		НаборЗаписей = РегистрыСведений._СоответствиеДокументов.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Документ.Установить(ДокОбъект.Ссылка);
	
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = ДокОбъект.Ссылка;
		НоваяЗапись.Ид = СтрокаТаблицыДокументов.Ид_Медиалог;		
		НаборЗаписей.Записать(Истина);
		
		Сообщить("Записан документ "+ДокОбъект.Ссылка);
		
		Если ПодчСтрока = Неопределено Тогда
			СтрокаТаблицы.Документ1С = ДокОбъект.Ссылка;
		Иначе
			ПодчСтрока.Документ1С = ДокОбъект.Ссылка;	
		КонецЕсли;

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры // СформироватьТрНакладную()

&НаСервере
Процедура СформироватьПередачуМатериаловВЭксплуатацию(СтрокаТаблицы, ТаблицаДокументов, ТоварныеТаблицы, ПодчСтрока = Неопределено)
		
	СтрокаТаблицыДокументов = ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы];
	
	ПараметрыДокумента = Новый Структура;	
	ПараметрыДокумента.Вставить("СтрокаТаблицыДокументов", СтрокаТаблицыДокументов);
	ПараметрыДокумента.Вставить("ВидДокумента", "ПередачаМатериаловВЭксплуатацию");
	Если ПодчСтрока = Неопределено Тогда
		ПараметрыДокумента.Вставить("ДокументСсылка", СтрокаТаблицы.Документ1С);
	Иначе
		ПараметрыДокумента.Вставить("ДокументСсылка", ПодчСтрока.Документ1С);
	КонецЕсли;	
	
	ПолучитьДокумент(ПараметрыДокумента);
	
	ДокОбъект = ПараметрыДокумента.ДокументОбъект;
	Если ДокОбъект = Неопределено Тогда
		Сообщить("Не удалось создать документ");
		Возврат;		
	КонецЕсли;
	
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокОбъект, глЗначениеПеременной("глТекущийПользователь"),,,Неопределено);
	ЗаполнениеДокументов.Заполнить(ДокОбъект);
	
	ДокОбъект.Склад = СтрокаТаблицыДокументов.Склад;
	// Байдин 2017-12-26 /*
	Если ЗначениеЗаполнено(ДокОбъект.Склад) Тогда
		ДокОбъект.ПодразделениеОрганизации = ДокОбъект.Склад.ПодразделениеОрганизации;
	КонецЕсли; 
	// */ Байдин 2017-12-26 
		
	Если СтрокаТаблицыДокументов.Ид_Вид = 4 Тогда
		СпособОтраженияАмортизации = ПолучитьСпособОтраженияАмортизации(СтрокаТаблицыДокументов.СкладКуда);  	
	Иначе	
		СпособОтраженияАмортизации = ПолучитьСпособОтраженияАмортизации(СтрокаТаблицыДокументов.Склад);  // СтрокаТаблицыДокументов.СкладКуда
	КонецЕсли;
	
	ДокОбъект.ИнвентарьИХозяйственныеПринадлежности.Очистить();
	//СО
	ДокОбъект.Спецодежда.Очистить();
	Если СтрокаТаблицыДокументов.ТипАкта = 3 Тогда
		ПодрОрг = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000072");
		Если ЗначениеЗаполнено(ПодрОрг) Тогда
			Если ПодрОрг.Владелец = ДокОбъект.Организация Тогда
				ДокОбъект.Местонахождение = ПодрОрг;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	//СО

	Если ПодчСтрока = Неопределено Тогда
		ТоварыТекущегоДокумента = ТоварныеТаблицы[СтрокаТаблицы.СтрокаТаблицыН].Товар;
	Иначе
		ТоварыТекущегоДокумента = ТоварныеТаблицы[ПодчСтрока.СтрокаТаблицыН].Товар;
	КонецЕсли;
	
	
	Для каждого СтрокаТоваровТекДокумента Из ТоварыТекущегоДокумента Цикл
		//СО
		Если СтрокаТаблицыДокументов.ТипАкта = 3 Тогда
			
			НоваяСтрокаДокумента = ДокОбъект.Спецодежда.Добавить();
			НоваяСтрокаДокумента.Номенклатура = СтрокаТоваровТекДокумента.Номенклатура;
			НоваяСтрокаДокумента.Количество = СтрокаТоваровТекДокумента.Количество;
			
			Если (СтрокаТоваровТекДокумента.СотрудникАкта <> NULL)И(ЗначениеЗаполнено(СтрокаТоваровТекДокумента.СотрудникАкта)) Тогда
				РезультатПоиска_ = ТЗ_КэшФизЛиц.Найти(СтрокаТоваровТекДокумента.СотрудникАкта, "Ид_Медиалог");	
				Если РезультатПоиска_<>Неопределено Тогда					
					НоваяСтрокаДокумента.ФизЛицо = РезультатПоиска_.ФизЛицо;						
				КонецЕсли;
			КонецЕсли; 
						
			// Заполнение Назначения использования
			НазнИсп = Неопределено;
			// Имеет смысл только, если заполнена Номенклатура и СпособОтраженияАмортизации
			Если ЗначениеЗаполнено(НоваяСтрокаДокумента.Номенклатура)И ЗначениеЗаполнено(СпособОтраженияАмортизации) Тогда
				СпрВыборка = Справочники.НазначенияИспользования.Выбрать( ,НоваяСтрокаДокумента.Номенклатура);
				Пока СпрВыборка.Следующий() Цикл				
					Если СпрВыборка.ЭтоГруппа Тогда
						Продолжить;					
					КонецЕсли; 				
					Если СпрВыборка.СпособОтраженияРасходов = СпособОтраженияАмортизации Тогда
						// Нашли
						НазнИсп = СпрВыборка.Ссылка;					
					КонецЕсли; 			
				КонецЦикла; 
				Если НазнИсп = Неопределено Тогда
					// Создать;
					Попытка
						СпрДляЗаписи = Справочники.НазначенияИспользования.СоздатьЭлемент();
						СпрДляЗаписи.УстановитьНовыйКод();
					    СпрДляЗаписи.Наименование = СпособОтраженияАмортизации.Наименование;
						СпрДляЗаписи.Владелец = НоваяСтрокаДокумента.Номенклатура;
						СпрДляЗаписи.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию;
						СпрДляЗаписи.СрокПолезногоИспользования = 11;
						СпрДляЗаписи.Количество = 1;
						СпрДляЗаписи.СпособОтраженияРасходов = СпособОтраженияАмортизации;
						//
						СпрДляЗаписи.Записать();
						НазнИсп = СпрДляЗаписи.Ссылка;
					Исключение
						Сообщить("Создание 'Назначения использования': "+ОписаниеОшибки());
					КонецПопытки;				
				КонецЕсли; 				
			КонецЕсли; 
			НоваяСтрокаДокумента.НазначениеИспользования = НазнИсп;
			
			// Кусок кода из обработчика Табличной части
			//
			// Если в поле "Назначение использования" выбран элемент,
			// не подчиненный выбранной номенклатуре, это поле нужно очистить.
			////Если НЕ (СтрокаТабличнойЧасти.НазначениеИспользования.Владелец = СтрокаТабличнойЧасти.Номенклатура) Тогда
			////	СтрокаТабличнойЧасти.НазначениеИспользования = Справочники.НазначенияИспользования.ПустаяСсылка();
			////КонецЕсли;
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			//ДокОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрокаДокумента);
			
			//ОтражатьВНалоговомУчетеУСН = (НалоговыйУчетУСН.ПрименениеУСН(ДокОбъект.Организация, ДокОбъект.Дата)  
			//                           И (НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(ДокОбъект.Организация, ДокОбъект.Дата)));			
			//Если ОтражатьВНалоговомУчетеУСН Тогда
				НоваяСтрокаДокумента.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			//КонецЕсли;
			
		Иначе	//СО
			НоваяСтрокаДокумента = ДокОбъект.ИнвентарьИХозяйственныеПринадлежности.Добавить();
			НоваяСтрокаДокумента.Номенклатура = СтрокаТоваровТекДокумента.Номенклатура; 
			НоваяСтрокаДокумента.СпособОтраженияРасходов = СпособОтраженияАмортизации;
			НоваяСтрокаДокумента.Количество = СтрокаТоваровТекДокумента.Количество;
			
			//// Кусок кода из Документа	
			//ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрокаДокумента, ДокОбъект);
			
			НоваяСтрокаДокумента.ОтражениеВУСН 	  = Перечисления.ОтражениеВУСН.Принимаются;

			//ДокОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрокаДокумента);
		КОнецЕсли;	//СО
					
	КонецЦикла;	
	
	Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокОбъект, "Спецодежда");
	Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокОбъект, "ИнвентарьИХозяйственныеПринадлежности");

	Попытка 
		
		//1. Здесь - запись созданного документа
		Если ДокОбъект.Проведен Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе	
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	
		//2. Здесь - запись в регистр соответствия ссылки на новый документ
		
		НаборЗаписей = РегистрыСведений._СоответствиеДокументов.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Документ.Установить(ДокОбъект.Ссылка);
	
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = ДокОбъект.Ссылка;
		НоваяЗапись.Ид = СтрокаТаблицыДокументов.Ид_Медиалог;		
		НаборЗаписей.Записать(Истина);
		
		Сообщить("Записан документ "+ДокОбъект.Ссылка);
		
		Если ПодчСтрока = Неопределено Тогда
			СтрокаТаблицы.Документ1С = ДокОбъект.Ссылка;
		Иначе
			ПодчСтрока.Документ1С = ДокОбъект.Ссылка;	
		КонецЕсли;

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;


КонецПроцедуры // СформироватьПередачуМатериаловВЭксплуатацию()

&НаСервере
Процедура СформироватьДокументы()
	
	рдДеревоДокументовОбъект=РеквизитФормыВЗначение("рдДеревоДокументов");
	
	ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
	ТоварныеТаблицыОбъект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес);
		
	
	Для каждого СтрокаТаблицы из рдДеревоДокументовОбъект.Строки Цикл
			
		Если ТаблицаДокументовОбъект[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 1 Тогда  // Поступление
			Если НЕ СтрокаТаблицы.Флаг Тогда
				Продолжить;
			КонецЕсли;
			СформироватьПоступление(СтрокаТаблицы, ТаблицаДокументовОбъект);
			// подчиненных строк не может быть
			Продолжить;
		ИначеЕсли ТаблицаДокументовОбъект[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 8 Тогда // "Продажа в розницу"
			Если СтрокаТаблицы.Флаг Тогда
				
				Если ТипЗнч(СтрокаТаблицы.Документ1С) <> ТипЗнч("Строка") Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицы.Документ1С) Тогда
						ВД = СтрокаТаблицы.Документ1С.Метаданные().Имя;
					Иначе	
						Продолжить;
					КонецЕсли; 
				Иначе	
					ВД = СтрокаТаблицы.Документ1С;
				КонецЕсли; 

				Если ВД = "РеализацияТоваровУслуг" Тогда
					СформироватьРасходнуюНакладную(СтрокаТаблицы, ТаблицаДокументовОбъект, ТоварныеТаблицыОбъект);
				Иначе	
					СформироватьОтчетОРозничныхПродажах(СтрокаТаблицы, ТаблицаДокументовОбъект, ТоварныеТаблицыОбъект);
				КонецЕсли; 
				
			КонецЕсли;	
					
			//РА2
			// подчиненных строк не может быть
			//Продолжить;	
			// Могут быть подчиненные строки
			Для каждого ПодчСтрока Из СтрокаТаблицы.Строки Цикл
				Если НЕ ПодчСтрока.Флаг Тогда
					Продолжить;
				КонецЕсли;
				
			    Если ТипЗнч(ПодчСтрока.Документ1С) <> ТипЗнч("Строка") Тогда
					Если ЗначениеЗаполнено(ПодчСтрока.Документ1С) Тогда
						ВД = ПодчСтрока.Документ1С.Метаданные().Имя;
					Иначе	
						Продолжить;
					КонецЕсли; 
				Иначе	
					ВД = ПодчСтрока.Документ1С;
				КонецЕсли;
				
				Если ВД = "РеализацияТоваровУслуг" Тогда
					СформироватьРасходнуюНакладную(СтрокаТаблицы, ТаблицаДокументовОбъект, ТоварныеТаблицыОбъект,ПодчСтрока);
				Иначе	
					СформироватьОтчетОРозничныхПродажах(СтрокаТаблицы, ТаблицаДокументовОбъект, ТоварныеТаблицыОбъект, ПодчСтрока);
				КонецЕсли;
			КонецЦикла;	
		ИначеЕсли (ТаблицаДокументовОбъект[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 4)ИЛИ  // Перемещение
			      (ТаблицаДокументовОбъект[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 2)ИЛИ  // "Расход по акту списания"
					(ТаблицаДокументовОбъект[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 7)ИЛИ   // "Персонифицированная расходная накладная"
			        (ТаблицаДокументовОбъект[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 10)ИЛИ  // Массовое списание на основании оказанных услуг
					(ТаблицаДокументовОбъект[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 11)     // Персонифицированное списание на основании оказанных услуг
			Тогда
			
			Если СтрокаТаблицы.Флаг Тогда
				Если ТипЗнч(СтрокаТаблицы.Документ1С) <> ТипЗнч("Строка") Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицы.Документ1С) Тогда
						ВД = СтрокаТаблицы.Документ1С.Метаданные().Имя;
					Иначе	
						Продолжить;
					КонецЕсли; 
				Иначе	
					ВД = СтрокаТаблицы.Документ1С;
				КонецЕсли; 
				
				Если ВД = "ПеремещениеТоваров" Тогда
					СформироватьПеремещение(СтрокаТаблицы, ТаблицаДокументовОбъект, ТоварныеТаблицыОбъект);
				ИначеЕсли ВД = "ТребованиеНакладная" Тогда
					СформироватьТрНакладную(СтрокаТаблицы, ТаблицаДокументовОбъект, ТоварныеТаблицыОбъект);	
				ИначеЕсли ВД = "ПередачаМатериаловВЭксплуатацию" Тогда	
					СформироватьПередачуМатериаловВЭксплуатацию(СтрокаТаблицы, ТаблицаДокументовОбъект, ТоварныеТаблицыОбъект);
				Иначе // Это "НеГрузить"
					
				КонецЕсли; 	
			КонецЕсли;	
				
			// Могут быть подчиненные строки
			Для каждого ПодчСтрока Из СтрокаТаблицы.Строки Цикл
				Если НЕ ПодчСтрока.Флаг Тогда
					Продолжить;
				КонецЕсли;
				
			    Если ТипЗнч(ПодчСтрока.Документ1С) <> ТипЗнч("Строка") Тогда
					Если ЗначениеЗаполнено(ПодчСтрока.Документ1С) Тогда
						ВД = ПодчСтрока.Документ1С.Метаданные().Имя;
					Иначе	
						Продолжить;
					КонецЕсли; 
				Иначе	
					ВД = ПодчСтрока.Документ1С;
				КонецЕсли;
				
				Если ВД = "ПеремещениеТоваров" Тогда
					СформироватьПеремещение(СтрокаТаблицы, ТаблицаДокументовОбъект, ТоварныеТаблицыОбъект, ПодчСтрока);
				ИначеЕсли ВД = "ТребованиеНакладная" Тогда
					СформироватьТрНакладную(СтрокаТаблицы, ТаблицаДокументовОбъект, ТоварныеТаблицыОбъект, ПодчСтрока);	
				ИначеЕсли ВД = "ПередачаМатериаловВЭксплуатацию" Тогда	
					СформироватьПередачуМатериаловВЭксплуатацию(СтрокаТаблицы, ТаблицаДокументовОбъект, ТоварныеТаблицыОбъект, ПодчСтрока);
				Иначе // Это "НеГрузить"
					
				КонецЕсли; 
			КонецЦикла; 
		//ИначеЕсли (ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 2)ИЛИ  // "Расход по акту списания"
		//	(ТаблицаДокументов[СтрокаТаблицы.СтрокаТаблицы].Ид_Вид = 7) Тогда     // "Персонифицированная расходная накладная"
			                 
		КонецЕсли;			
	КонецЦикла;		
	
	ЭтаФорма.ЗначениеВРеквизитФормы(рдДеревоДокументовОбъект, "рдДеревоДокументов");
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.ТаблицаДокументовАдрес);
	ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.ТоварныеТаблицыАдрес);
	
КонецПроцедуры // СформироватьДокументы()

&НаКлиенте
Процедура СформироватьДокументыВ1С(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТалоны Тогда
		// Талоны
		СформироватьДокументыРеализации();
		Возврат;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаГрупповаяЗагрузка Тогда
		СформироватьДокументыГрупповойЗагрузки();
		Возврат;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСтраховыеКомпании Тогда
		СформироватьДокументыСтраховыхКомпаний();
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыВ1СНаСервере();
	
КонецПроцедуры

&НаСервере
// Возвращает ИСТИНА если все контрагенты из документов есть в регистре
// _СоответствиеКонтрагентов
// Если какой-то контрагент не найден, возвращается ЛОЖЬ, заполняется таблица
// ТЗКонтрагентов на форме, выдается предупреждение, и открывается страница
// "СоответствиеКонтрагентов" на форме
//
Функция ПроверитьКонтрагентов1()
	
	Результат = Истина;
	
	// 1. Заполнить ТЗ_КэшКонтрагентов
	
	ТЗ_КэшКонтрагентовОбъект = РеквизитФормыВЗначение("ТЗ_КэшКонтрагентов");	
	ТЗКонтрагентовОбъект = РеквизитФормыВЗначение("ТЗКонтрагентов");
	ТЗ_КэшКонтрагентовОбъект.Очистить();
	ТЗКонтрагентовОбъект.Очистить();
	
	рдДеревоДокументовРеализацииОбъект = РеквизитФормыВЗначение("рдДеревоДокументовРеализации");
	
	ТаблицаДокументовРеализацииОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес);
	
	
	Для каждого СтрокаТаблицы из рдДеревоДокументовРеализацииОбъект.Строки Цикл
		Если НЕ СтрокаТаблицы.Флаг Тогда
			Продолжить;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент)И
			(ТипЗнч(СтрокаТаблицы.Контрагент)=Тип("СправочникСсылка.Контрагенты")) Тогда
			Продолжить;	
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ТаблицаДокументовРеализацииОбъект[СтрокаТаблицы.СтрокаТаблицы].Ид_Контрагент) Тогда
			Продолжить;	
		КонецЕсли;	
		
		Если ТЗ_КэшКонтрагентовОбъект.Найти(ТаблицаДокументовРеализацииОбъект[СтрокаТаблицы.СтрокаТаблицы].Ид_Контрагент, "Ид_Медиалог")<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
				
		НоваяСтрокаКэша = ТЗ_КэшКонтрагентовОбъект.Добавить();
		НоваяСтрокаКэша.Ид_Медиалог = ТаблицаДокументовРеализацииОбъект[СтрокаТаблицы.СтрокаТаблицы].Ид_Контрагент;
		НоваяСтрокаКэша.ИННМедиалог = ТаблицаДокументовРеализацииОбъект[СтрокаТаблицы.СтрокаТаблицы].КонтрагентИННМедиалог;
		НоваяСтрокаКэша.НаименованиеМедиалог = ТаблицаДокументовРеализацииОбъект[СтрокаТаблицы.СтрокаТаблицы].КонтрагентНаименованиеМедиалог;
						   
	КонецЦикла;

	// 2. В ТЗ_КэшКонтрагентов заполнить колонку Контрагент
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшКонтрагентовОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог,
	|	ВнешнийИсточник.ИННМедиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Контрагент КАК Контрагент,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеКонтрагентов КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшКонтрагентовОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.Контрагент = Выборка.Контрагент;
		
	КонецЦикла;
	
	// 3. Оставшиеся незаполненными вывалить в ТЗКонтрагентов на форму
	
	МассивСтрок = ТЗ_КэшКонтрагентовОбъект.НайтиСтроки(Новый Структура("Контрагент", Справочники.Контрагенты.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если СокрЛП(ЭлементМассива.Ид_Медиалог)="" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТЗКонтрагентовОбъект.Добавить();
			НоваяСтрока.НаименованиеМедиалог = ЭлементМассива.НаименованиеМедиалог;
			НоваяСтрока.ИННМедиалог = ЭлементМассива.ИННМедиалог;
			НоваяСтрока.КодМедиалог = ЭлементМассива.Ид_Медиалог; 
			Если СокрЛП(НоваяСтрока.ИННМедиалог)<>"" Тогда
				// Попытаться найти по ИНН
				НоваяСтрока.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СокрЛП(НоваяСтрока.ИННМедиалог));
			КонецЕсли;	
		КонецЦикла;
		
		Если ТЗКонтрагентовОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСоответствиеКонтрагентов;
			
			Сообщить("Имеются Контрагенты без соответствия в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТЗ_КэшКонтрагентовОбъект,"ТЗ_КэшКонтрагентов");
	ЗначениеВРеквизитФормы(ТЗКонтрагентовОбъект,"ТЗКонтрагентов");
	ЗначениеВРеквизитФормы(рдДеревоДокументовРеализацииОбъект,"рдДеревоДокументовРеализации");	
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализацииОбъект, ЭтаФорма.ТаблицаДокументовРеализацииАдрес);
		
	Возврат Результат;
	
КонецФункции // ПроверитьКонтрагентов1()

&НаСервере
Функция ПроверитьПодразделения()

	Результат = Истина;
	
	// 1. Заполнить ТЗ_КэшПодразделениеНоменклатура
	
	ТЗ_КэшПодразделениеНоменклатураОбъект = РеквизитФормыВЗначение("ТЗ_КэшПодразделениеНоменклатура");	
	ТЗПодразделенийОбъект = РеквизитФормыВЗначение("ТЗПодразделений");
	ТЗ_КэшПодразделениеНоменклатураОбъект.Очистить();
	ТЗПодразделенийОбъект.Очистить();
	
	рдДеревоДокументовРеализацииОбъект = РеквизитФормыВЗначение("рдДеревоДокументовРеализации");
	
	ТаблицаДокументовРеализацииОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес);
	
	ТЗ_КэшПодразделениеНоменклатураОбъект = РеквизитФормыВЗначение("ТЗ_КэшПодразделениеНоменклатура");
		
	Для каждого СтрокаТаблицы из рдДеревоДокументовРеализацииОбъект.Строки Цикл
		Если НЕ СтрокаТаблицы.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаТаблицыУ Из ТаблицаДокументовРеализацииОбъект[СтрокаТаблицы.СтрокаТаблицы].Услуги Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыУ.ИдОтделения) Тогда
				Продолжить;	
			КонецЕсли;
			
			Если ТЗ_КэшПодразделениеНоменклатураОбъект.Найти(СтрокаТаблицыУ.ИдОтделения, "Ид_Медиалог")<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаКэша = ТЗ_КэшПодразделениеНоменклатураОбъект.Добавить();
			НоваяСтрокаКэша.Ид_Медиалог = СтрокаТаблицыУ.ИдОтделения;
			НоваяСтрокаКэша.НаименованиеМедиалог = СтрокаТаблицыУ.ОтделениеНаименованиеМедиалог;
			//НоваяСтрокаКэша.Номенклатура = ;
			
		КонецЦикла; 
	КонецЦикла;

	// 2. В ТЗ_КэшПодразделениеНоменклатура заполнить колонку Номенклатура
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшПодразделениеНоменклатураОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Номенклатура КАК Номенклатура,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеПодразделенийНоменклатуре КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшПодразделениеНоменклатураОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.Номенклатура = Выборка.Номенклатура;
		
	КонецЦикла;
	
	// 3. Оставшиеся незаполненными вывалить в ТЗПодразделений на форму
	
	МассивСтрок = ТЗ_КэшПодразделениеНоменклатураОбъект.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если СокрЛП(ЭлементМассива.Ид_Медиалог)="" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТЗПодразделенийОбъект.Добавить();
			НоваяСтрока.НаименованиеМедиалог = ЭлементМассива.НаименованиеМедиалог;
			НоваяСтрока.КодМедиалог = ЭлементМассива.Ид_Медиалог; 	
		КонецЦикла;
		
		Если ТЗПодразделенийОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСоответствиеПодразделений;
			
			Сообщить("Имеются Подразделения без соответствия в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(ТЗ_КэшПодразделениеНоменклатураОбъект, "ТЗ_КэшПодразделениеНоменклатура");
	ЗначениеВРеквизитФормы(ТЗПодразделенийОбъект, "ТЗПодразделений");
	ЗначениеВРеквизитФормы(рдДеревоДокументовРеализацииОбъект, "рдДеревоДокументовРеализации");
	
	ЭтаФорма.ТаблицаДокументовРеализацииАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализацииОбъект, ЭтаФорма.УникальныйИдентификатор);		
		
	Возврат Результат;

КонецФункции // ПроверитьПодразделения()

//  Байдин 2018-01-09 
&НаСервере
Функция ПолучитьПодразделениеДляТалонов()

	ТекПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	СтрокиТаблицыОрганизаций = мТаблицаОрганизаций.НайтиСтроки(Новый Структура("Организация", Объект.Организация));
	Если НЕ СтрокиТаблицыОрганизаций.Количество() = 0 Тогда
		ТекПодразделение = СтрокиТаблицыОрганизаций[0].ПодразделениеДляТалонов;
	КонецЕсли; 
	
	Возврат ТекПодразделение;
	
КонецФункции // ПолучитьПодразделениеДляТалонов()
// */ Байдин 2018-01-09 
 
&НаСервере
Процедура СформироватьРеализацию()
	
	ТекПодразделение = ПолучитьПодразделениеДляТалонов();
	
	рдДеревоДокументовРеализацииОбъект = РеквизитФормыВЗначение("рдДеревоДокументовРеализации");
	
	ТаблицаДокументовРеализацииОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес);
		
	
	// Загрузка должна осуществляться в документ 1с «Реализация товаров и услуг», вид операции «Продажа, комиссия». 
	
	Для каждого СтрокаДерева Из рдДеревоДокументовРеализацииОбъект.Строки Цикл
		
		Если Не СтрокаДерева.Флаг Тогда
			Продолжить;	
		КонецЕсли; 
		
		СсылкаНаДокумент = Неопределено;
		Если (ТипЗнч(СтрокаДерева.Документ1С)=Тип("ДокументСсылка.РеализацияТоваровУслуг"))И
			(ЗначениеЗаполнено(СтрокаДерева.Документ1С)) Тогда
		
			СсылкаНаДокумент = СтрокаДерева.Документ1С;		
		КонецЕсли;
		
		СтрокаТаблицыДокументов = ТаблицаДокументовРеализацииОбъект[СтрокаДерева.СтрокаТаблицы];
		Если ЗначениеЗаполнено(СтрокаДерева.Договор) Тогда
			СтрокаТаблицыДокументов.Договор = СтрокаДерева.Договор;
		КонецЕсли; 
		
		Если СсылкаНаДокумент = Неопределено Тогда
			ДокументОбъект = Документы["РеализацияТоваровУслуг"].СоздатьДокумент();
			ДокументОбъект.Дата = СтрокаТаблицыДокументов.ДатаДок;
			ДокументОбъект.Организация = Объект.Организация;
			//ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект);
			ДокументОбъект.УстановитьНовыйНомер(ДокументОбъект.Организация.Префикс);
		Иначе	
			Попытка
				ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
		КонецЕсли; 
		
		Если ДокументОбъект.ПометкаУдаления  Тогда
			ДокументОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", Неопределено);
		ЗаполнениеДокументов.Заполнить(ДокументОбъект);
		
		ДокументОбъект.Контрагент = СтрокаТаблицыДокументов.Контрагент;
		ДокументОбъект.ДоговорКонтрагента = СтрокаТаблицыДокументов.Договор;
		
		// Байдин 2018-01-09 /*
		ДокументОбъект.ПодразделениеОрганизации = ТекПодразделение;
		//Если ЗначениеЗаполнено(СтрокаТаблицыДокументов.Склад) Тогда
		//	ДокументОбъект.Склад = СтрокаТаблицыДокументов.Склад;
		//	ДокументОбъект.ПодразделениеОрганизации = СтрокаТаблицыДокументов.Склад.ПодразделениеОрганизации;
		//КонецЕсли; 
		//// */ Байдин 2018-01-09
		
		//ДокументОбъект.ОтражатьВНалоговомУчете = Истина;
		ДокументОбъект.УдалитьСтатьяДоходовИРасходовПоТаре = Справочники.ПрочиеДоходыИРасходы.РазницыЗалоговойИФактическойСтоимостиТары;
		//ДокументОбъект.ЗаполнитьСчетаУчетаРасчетов();
		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ДокументОбъект);
		
		ДокументОбъект.СуммаВключаетНДС = Истина;
		ДокументОбъект.УдалитьУчитыватьНДС = Истина;
		
		ДокументОбъект.Товары.Очистить();
		ДокументОбъект.Услуги.Очистить();

		УслугиТекущегоДокумента = СтрокаТаблицыДокументов.Услуги;
		
		Для каждого СтрокаУслуг Из УслугиТекущегоДокумента Цикл
			
			Если СтрокаУслуг.Сумма = 0 Тогда
				Продолжить;		
			КонецЕсли; 
			
			НоваяСтрокаДокумента = ДокументОбъект["Услуги"].Добавить();	
			НоваяСтрокаДокумента.Номенклатура = СтрокаУслуг.Номенклатура;
			НоваяСтрокаДокумента.Содержание = НоваяСтрокаДокумента.Номенклатура.Наименование;
			НоваяСтрокаДокумента.Количество = 1;
			
			// Сумма, Цена, НДС, Ставка
			НоваяСтрокаДокумента.Цена = СтрокаУслуг.Сумма;
			
			СтруктураНДС = ПолучитьСтруктуруНДС(СтрокаУслуг.СтавкаНДС);
			НоваяСтрокаДокумента.СтавкаНДС = СтруктураНДС.СтавкаНДС; 
			
			НоваяСтрокаДокумента.СуммаНДС = СтрокаУслуг.СуммаНДС;
			НоваяСтрокаДокумента.Сумма = СтрокаУслуг.Сумма;
			
			// Заполняем реквизиты табличной части.
			//ДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(НоваяСтрокаДокумента, ИСТИНА);
	
			//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрокаДокумента, ДокументОбъект);
			//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			//ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//// Рассчитываем реквизиты табличной части.
			//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
			//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЦикла; 
		
		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект,"Услуги");
		
		Попытка 
		
			//1. Здесь - запись созданного документа
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе	
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		
			//2. Здесь - запись в регистр соответствия ссылки на новый документ
			
			НаборЗаписей = РегистрыСведений._СоответствиеДокументовУслуги.СоздатьНаборЗаписей();	
			НаборЗаписей.Отбор.Контрагент.Установить(СтрокаТаблицыДокументов.Контрагент);
			НаборЗаписей.Отбор.ДатаДок.Установить(НачалоДня(СтрокаТаблицыДокументов.ДатаДок));
			Если ЭтаФорма.ЭтоБазаПроф Тогда
				НаборЗаписей.Отбор.ИдОрганизации.Установить(СтрокаТаблицыДокументов.ИдОрганизации);
			КонецЕсли; 
			
		
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Документ = ДокументОбъект.Ссылка;
			НоваяЗапись.ДатаДок = НачалоДня(СтрокаТаблицыДокументов.ДатаДок);	
			НоваяЗапись.Контрагент = СтрокаТаблицыДокументов.Контрагент;
			Если ЭтаФорма.ЭтоБазаПроф Тогда
				НоваяЗапись.ИдОрганизации = СтрокаТаблицыДокументов.ИдОрганизации;
			КонецЕсли;
			НаборЗаписей.Записать(Истина);
			
			Сообщить("Записан документ "+ДокументОбъект.Ссылка);
			
			СтрокаДерева.Документ1С = ДокументОбъект.Ссылка;

		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

		
	
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(рдДеревоДокументовРеализацииОбъект, "рдДеревоДокументовРеализации"); 
	
	ЭтаФорма.ТаблицаДокументовРеализацииАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализацииОбъект, ЭтаФорма.УникальныйИдентификатор);		
			
КонецПроцедуры // СформироватьРеализацию()

&НаСервере
Процедура СформироватьДокументыРеализацииНаСервере()
	
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	
			
	СформироватьРеализацию();
		
	
КонецПроцедуры // СформироватьДокументыРеализацииНаСервере()

&НаКлиенте
Процедура СформироватьДокументыРеализации()
	
	мСтекСтраниц.Очистить();
		
	Если рдДеревоДокументовРеализации.ПолучитьЭлементы().Количество()=0 Тогда
		Сообщить("Нет документов для загрузки!");
		Возврат;
	КонецЕсли;
	
	ЕстьДокументыДляЗагрузки = Ложь;
	Для каждого СтрокаДерева Из рдДеревоДокументовРеализации.ПолучитьЭлементы() Цикл
		Если НЕ СтрокаДерева.Флаг Тогда
			Продолжить;
		КонецЕсли;
		ЕстьДокументыДляЗагрузки = Истина;
		Прервать;
	КонецЦикла; 
	
	Если НЕ ЕстьДокументыДляЗагрузки Тогда
		Сообщить("Нет документов для загрузки!");
		Возврат;	
	КонецЕсли; 
		
	НоваяСтраницаСтека = мСтекСтраниц.Добавить();
	НоваяСтраницаСтека.Страница = "СтраницаТалоны";
		
	Если НЕ	ПроверитьКонтрагентов1() Тогда
		Возврат;
	КонецЕсли;
	
	мСтекСтраниц.Очистить();
	
	НоваяСтраницаСтека = мСтекСтраниц.Добавить();
	НоваяСтраницаСтека.Страница = "СтраницаТалоны";
	
	Если НЕ	ПроверитьПодразделения() Тогда	
		Возврат;
	КонецЕсли;
	
	// Проверка заполненности договоров
	СписокКонтрагентовБезДоговоров = Новый СписокЗначений;
	ЗапомненнаяТекущаяСтрока = Неопределено;
	Для каждого СтрокаДерева Из рдДеревоДокументовРеализации.ПолучитьЭлементы() Цикл
		
		Если Не СтрокаДерева.Флаг Тогда
			Продолжить;	
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.Договор) Тогда
			Если ЗапомненнаяТекущаяСтрока = Неопределено Тогда
				ЗапомненнаяТекущаяСтрока = СтрокаДерева;
			КонецЕсли; 
			Если СписокКонтрагентовБезДоговоров.НайтиПоЗначению(СтрокаДерева.Контрагент)=Неопределено Тогда
				СписокКонтрагентовБезДоговоров.Добавить(СтрокаДерева.Контрагент);
			КонецЕсли; 		
		КонецЕсли; 
				
	КонецЦикла;	
	
	Если СписокКонтрагентовБезДоговоров.Количество()>0 Тогда		
		Сообщить("У следующих контрагентов не заполнены договора:");
		Для каждого ЭлементСписка Из СписокКонтрагентовБезДоговоров Цикл
		
			Сообщить(СокрЛП(ЭлементСписка.Значение));	
		
		КонецЦикла; 
		
		Если ЗапомненнаяТекущаяСтрока<>Неопределено Тогда
			Элементы.рдДеревоДокументовРеализации.ТекущаяСтрока = ЗапомненнаяТекущаяСтрока;
		КонецЕсли; 
		
		Возврат;
		
	КонецЕсли;	

	
	СформироватьДокументыРеализацииНаСервере();
		
	мСтекСтраниц.Очистить();
	
	Сообщить("Формирование документов в 1С завершено!");
		
КонецПроцедуры // СформироватьДокументыРеализации()

&НаКлиенте
Процедура СформироватьДокументыГрупповойЗагрузки()
	
	Если ЭтаФорма.ТипДокумента = 8 Тогда // "Продажа в розницу"
		ГрупповаяЗагрузка_РасхНакладная();
	Иначе	
		ГрупповаяЗагрузка_ТрНакладная(); 
		ГрупповаяЗагрузка_ПередачаМатериаловВЭксплуатацию();  
		Сообщить("Запись документов завершена");
	КонецЕсли; 
	
	// Заполним теперь СписокДокументов1Сгр
	ЗаполнитьСписокДокументов1Сгр();
	//Для каждого СтрокаСклада Из рдДеревоГрупповойЗагрузки.Строки Цикл
	//	//
	//	Для каждого СтрокаДокумента Из СтрокаСклада.Строки Цикл
	//		Для каждого СтрокаНоменклатуры Из СтрокаДокумента.Строки Цикл				
	//			Если ТипЗнч(СтрокаНоменклатуры.Документ1С)<>Тип("Строка") Тогда
	//				Если ЗначениеЗаполнено(СтрокаНоменклатуры.Документ1С) Тогда
	//					СтрокаСклада.СписокДокументов1С.Добавить(СтрокаНоменклатуры.Документ1С);
	//					Если СписокДокументов1Сгр.НайтиПоЗначению(СтрокаНоменклатуры.Документ1С)=Неопределено Тогда
	//					
	//						СписокДокументов1Сгр.Добавить(СтрокаНоменклатуры.Документ1С);	
	//					
	//					КонецЕсли; 
	//				КонецЕсли; 				
	//			КонецЕсли; 
	//	    КонецЦикла;
	//	КонецЦикла; 
	//КонецЦикла; 
		
КонецПроцедуры // СформироватьДокументыГрупповойЗагрузки()

&НаСервере
Процедура СформироватьДокументыСтраховыхКомпанийНаСервере()
	
	рдДеревоДляСтраховыхКомпанийОбъект = РеквизитФормыВЗначение("рдДеревоДляСтраховыхКомпаний");
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес) Тогда
		ТаблицаДокументовРеализации2Объект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	Иначе
		ТаблицаДокументовРеализации2Объект=ПолучитьСтруктуруТаблицыДокументовРеализации2();
		ЭтаФорма.ТаблицаДокументовРеализации2Адрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	// Найти документ для обновления
	
	СсылкаНаДокумент = Неопределено;
	
	Для каждого СтрокаДерева_Услуги Из рдДеревоДляСтраховыхКомпанийОбъект.Строки Цикл	
		Для каждого СтрокаДерева Из СтрокаДерева_Услуги.Строки Цикл			
			Если (ТипЗнч(СтрокаДерева.Документ1С)=Тип("ДокументСсылка.РеализацияТоваровУслуг"))И
			(ЗначениеЗаполнено(СтрокаДерева.Документ1С)) Тогда
		
				СсылкаНаДокумент = СтрокаДерева.Документ1С;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		Если СсылкаНаДокумент <> Неопределено Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
		
	Если СсылкаНаДокумент = Неопределено Тогда
		ДокументОбъект = Документы["РеализацияТоваровУслуг"].СоздатьДокумент();
		ДокументОбъект.Дата = КонецДня(Объект.ДатаКон);
		ДокументОбъект.Организация = Объект.Организация;
		//ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект);
		ДокументОбъект.УстановитьНовыйНомер(ДокументОбъект.Организация.Префикс);
		//ДокументОбъект._ТипГрупповогоДокумента = 2;
	ИначеЕсли НачалоДня(СсылкаНаДокумент.Дата) <> Объект.ДатаКон Тогда
		Сообщить("Попытка перезаполнить документ от другой даты: "+СсылкаНаДокумент);
		Возврат;
	Иначе	
		Попытка
			ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли; 
	
	// Байдин 2018-01-09 /*
	ТекПодразделение = ПолучитьПодразделениеДляТалонов();
	ДокументОбъект.ПодразделениеОрганизации = ТекПодразделение;
	// */ Байдин 2018-01-09 
	
	ДокументОбъект._ТипГрупповогоДокумента = Направление+3;
	Направление_ = "";
	Если Направление = 0 Тогда
		Направление_ = "Стоматология: ";
	ИначеЕсли Направление = 1 Тогда	
		Направление_ = "Скорая помощь: ";
	ИначеЕсли Направление = 2 Тогда	
		Направление_ = "Поликлиника: ";
	ИначеЕсли Направление = 3 Тогда	
		Направление_ = "Госпитальное отделение: ";	
	КонецЕсли; 
	
	// Пока - перенакрываем все
	////МассивКлючей = ДокументОбъект.Товары.ВыгрузитьКолонку("_Ключ");
	Ключ = 0;
	////Для каждого ЗначениеКлюча Из МассивКлючей Цикл
	////	Если ЗначениеКлюча>Ключ Тогда
	////		Ключ = ЗначениеКлюча;
	////	КонецЕсли; 	
	////КонецЦикла;
		
	Если ДокументОбъект.ПометкаУдаления  Тогда
		ДокументОбъект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(ДокументОбъект.Комментарий)) Тогда
		ДокументОбъект.Комментарий = Направление_+"Загружено из Медиалога за период " + Формат(Объект.ДатаНач,"ДФ=dd.MM.yyyy")+" - "+Формат(Объект.ДатаКон,"ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", Неопределено);
	ЗаполнениеДокументов.Заполнить(ДокументОбъект);
	
	ДокументОбъект.Контрагент = Объект.СтраховаяКомпания;
	ДокументОбъект.ДоговорКонтрагента = ПолучитьОсновнойДоговорКонтрагента(Объект.СтраховаяКомпания);
		
	// Байдин 2017-12-26 /*
	Если ЗначениеЗаполнено(ДокументОбъект.Склад) Тогда
		ДокументОбъект.ПодразделениеОрганизации = ДокументОбъект.Склад.ПодразделениеОрганизации;
	КонецЕсли; 
	// */ Байдин 2017-12-26 
		
	ДокументОбъект.УдалитьСтатьяДоходовИРасходовПоТаре = Справочники.ПрочиеДоходыИРасходы.РазницыЗалоговойИФактическойСтоимостиТары;
	//ДокументОбъект.ЗаполнитьСчетаУчетаРасчетов();
	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ДокументОбъект);
		
	ДокументОбъект.СуммаВключаетНДС = Истина;

	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Услуги.Очистить();
    ДокументОбъект._ТоварыМедиалога.Очистить();
	ДокументОбъект._УслугиМедиалога.Очистить();
	
	СписокЗаполненныхСтрок = Новый СписокЗначений;
	
	Для каждого СтрокаДерева_Услуги Из рдДеревоДляСтраховыхКомпанийОбъект.Строки Цикл
		
		Если СтрокаДерева_Услуги.Сумма = 0 Тогда
			Продолжить;		
		КонецЕсли;
		
		НоваяСтрокаДокумента = ДокументОбъект["Услуги"].Добавить();	
		НоваяСтрокаДокумента.Номенклатура = СтрокаДерева_Услуги.Услуга;
		НоваяСтрокаДокумента.Содержание = НоваяСтрокаДокумента.Номенклатура.Наименование;
		НоваяСтрокаДокумента.Количество = 1;
		
		// Сумма, Цена, НДС, Ставка
		НоваяСтрокаДокумента.Цена = СтрокаДерева_Услуги.Сумма;
		
		СтрокаТаблицыДокументовРеализации2 = ТаблицаДокументовРеализации2Объект[СтрокаДерева_Услуги.СтрокаТаблицы];
		
		СтруктураНДС = ПолучитьСтруктуруНДС(СтрокаТаблицыДокументовРеализации2.СтавкаНДС);
		НоваяСтрокаДокумента.СтавкаНДС = СтруктураНДС.СтавкаНДС;
		
		НоваяСтрокаДокумента.СуммаНДС = СтрокаТаблицыДокументовРеализации2.Услуги.Итог("СуммаНДС");   
		
		НоваяСтрокаДокумента.Сумма = СтрокаДерева_Услуги.Сумма;
			
		// Заполняем реквизиты табличной части.
		//ДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(НоваяСтрокаДокумента, ИСТИНА);
	
        Ключ = Ключ + 1;
		НоваяСтрокаДокумента._Ключ = Ключ;
		
		Для каждого СтрокаТалонов Из СтрокаДерева_Услуги.Строки Цикл
			
			_НоваяСтрокаДокумента = ДокументОбъект._УслугиМедиалога.Добавить();
			_НоваяСтрокаДокумента.Ид_Документ = Число(СтрокаТалонов.Документ);
			_НоваяСтрокаДокумента.Сумма = СтрокаТалонов.Сумма;
			_НоваяСтрокаДокумента.Ключ = Ключ;
			
			СписокЗаполненныхСтрок.Добавить(СтрокаТалонов);
		
		КонецЦикла; 
		
	КонецЦикла;	
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект,"Услуги");
	
	Попытка 
			
		Если ДокументОбъект.Услуги.Количество()>0 Тогда
					
			//1. Здесь - запись созданного документа
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе	
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
							
			Сообщить("Записан документ "+ДокументОбъект.Ссылка);
			
			// Отрисовать на форме заполненные документы
			Для каждого ЭлементСписка Из СписокЗаполненныхСтрок Цикл
				ЭлементСписка.Значение.Документ1С = ДокументОбъект.Ссылка;
			КонецЦикла;
			
		КонецЕсли;	
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	ЗначениеВРеквизитФормы(рдДеревоДляСтраховыхКомпанийОбъект, "рдДеревоДляСтраховыхКомпаний");	
	ЭтаФорма.ТаблицаДокументовРеализации2Адрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.УникальныйИдентификатор);
	
	
КонецПроцедуры // СформироватьДокументыСтраховыхКомпанийНаСервере()

&НаКлиенте
Процедура СформироватьДокументыСтраховыхКомпаний()
	
	СформироватьДокументыСтраховыхКомпанийНаСервере();
	
	Сообщить("Запись документов завершена");	
	
КонецПроцедуры // СформироватьДокументыСтраховыхКомпаний()

&НаСервере
Функция ПолучитьСпособОтраженияАмортизации(Скл)

	Если НЕ ЗначениеЗаполнено(Скл) Тогда
		Возврат Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Скл);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Рег.СпособОтраженияАмортизации
	|ИЗ
	|	РегистрСведений._СоответствиеСкладовСпособамОтраженияАмортизации КАК Рег
	|ГДЕ
	|	Рег.Склад = &Склад
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СпособОтраженияАмортизации;	
	Иначе	
		Возврат Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();	
	КонецЕсли; 
	
КонецФункции // ПолучитьСпособОтраженияАмортизации()

&НаСервере
Процедура ГрупповаяЗагрузка_ПередачаМатериаловВЭксплуатацию()
	
	ЭтаФорма.мСтекСтраниц.Очистить();
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
	Иначе	
		Сообщить("Не определена таблица документов");
		Возврат;
	КонецЕсли;
	
	рдДеревоГрупповойЗагрузкиОбъект = ЭтаФорма.РеквизитФормыВЗначение("рдДеревоГрупповойЗагрузки");
	
	ТЗ_КэшФизЛицОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗ_КэшФизЛиц");
	
	
	Для каждого СтрокаДерева Из рдДеревоГрупповойЗагрузкиОбъект.Строки Цикл
		
		Если Не СтрокаДерева.Флаг Тогда
			Продолжить;	
		КонецЕсли;
		
		СтрокаТаблицыДокументов = ТаблицаДокументовОбъект[СтрокаДерева.СтрокаТаблицы];
		
		ДокументОбъект = Неопределено;
		//СписокСпособовГрЗагрузки.Добавить(1, "обновлять");
		//СписокСпособовГрЗагрузки.Добавить(2, "в новый документ");
		Если СпособЗагрузки = 1 Тогда  // "добавлять в существующий"
			// Попытаемся найти первый существующий документ
			ДокументДляЗагрузки = Неопределено;
			
				Если Объект.СкрыватьЗагруженные Тогда
					Для каждого ЭлементСписка Из СтрокаДерева.СписокДокументов1С Цикл
						Если ТипЗнч(ЭлементСписка.Значение)<>Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
							Продолжить;	
						КонецЕсли; 
						ДокументДляЗагрузки = ЭлементСписка.Значение;
						Прервать;				
					КонецЦикла; 
				Иначе
		
					Для каждого СтрокаСДокументом Из СтрокаДерева.Строки Цикл
						Для каждого СтрокаСНоменклатурой Из СтрокаСДокументом.Строки Цикл
							Если ТипЗнч(СтрокаСНоменклатурой.Документ1С)=Тип("Строка") Тогда
								Продолжить;
							ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСНоменклатурой.Документ1С)	Тогда
								Продолжить;
							ИначеЕсли ТипЗнч(СтрокаСНоменклатурой.Документ1С)<>Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
								Продолжить;	
							КонецЕсли; 
							
						    ДокументДляЗагрузки = СтрокаСНоменклатурой.Документ1С;
							Прервать;
						КонецЦикла; 
						
						Если ЗначениеЗаполнено(ДокументДляЗагрузки)	Тогда
							Прервать;					
						КонецЕсли;					
					КонецЦикла;
			    КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументДляЗагрузки) Тогда
				Попытка
					ДокументОбъект = ДокументДляЗагрузки.ПолучитьОбъект();
					Если НЕ Объект.СкрыватьЗагруженные Тогда
						ДокументОбъект.Спецодежда.Очистить();
						ДокументОбъект._СпецодеждаМедиалога.Очистить();
					КонецЕсли;	
				Исключение
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;			
			КонецЕсли; 			
		Иначе // "в новый документ"
			
		КонецЕсли;	
		
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = Документы["ПередачаМатериаловВЭксплуатацию"].СоздатьДокумент();
			ДокументОбъект.Дата = КонецДня(Объект.ДатаКон);
			ДокументОбъект.Организация = Объект.Организация;
			//ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект);
			ДокументОбъект.УстановитьНовыйНомер(ДокументОбъект.Организация.Префикс);
			ДокументОбъект._ТипГрупповогоДокумента = 1;
		КонецЕсли; 
		
		МассивКлючей = ДокументОбъект.Спецодежда.ВыгрузитьКолонку("_Ключ");
		Ключ = 0;
		Для каждого ЗначениеКлюча Из МассивКлючей Цикл
			Если ЗначениеКлюча>Ключ Тогда
				Ключ = ЗначениеКлюча;
			КонецЕсли; 	
		КонецЦикла; 
												
		Если ДокументОбъект.ПометкаУдаления  Тогда
			ДокументОбъект.ПометкаУдаления = Ложь;
		КонецЕсли; 
			
		Если ПустаяСтрока(СокрЛП(ДокументОбъект.Комментарий)) Тогда
			ДокументОбъект.Комментарий = "Загружено из Медиалога за период " + Формат(Объект.ДатаНач,"ДФ=dd.MM.yyyy")+" - "+Формат(Объект.ДатаКон,"ДФ=dd.MM.yyyy");
		КонецЕсли;
			
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"),,,Неопределено);
		ЗаполнениеДокументов.Заполнить(ДокументОбъект);
		
		// Байдин 2017-12-26 /*
		//ДокументОбъект.Склад = СтрокаТаблицыДокументов.Склад;
		Если ЗначениеЗаполнено(СтрокаТаблицыДокументов.Склад) Тогда
			ДокументОбъект.Склад = СтрокаТаблицыДокументов.Склад;
			ДокументОбъект.ПодразделениеОрганизации = СтрокаТаблицыДокументов.Склад.ПодразделениеОрганизации;
		КонецЕсли; 
		// */ Байдин 2017-12-26 
		
		СпособОтраженияАмортизации = ПолучитьСпособОтраженияАмортизации(ДокументОбъект.Склад); 
		
		ПодрОрг = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000072");  //?ПМ
		Если ЗначениеЗаполнено(ПодрОрг) Тогда
			Если ПодрОрг.Владелец = ДокументОбъект.Организация Тогда
				ДокументОбъект.Местонахождение = ПодрОрг;
			КонецЕсли; 
		КонецЕсли; 
		
		СписокЗаполненныхСтрок = Новый СписокЗначений;
		
		Для каждого СтрокаДокументов Из СтрокаДерева.Строки Цикл
			СтрокаТаблицыДокументов1 = ТаблицаДокументовОбъект[СтрокаДокументов.СтрокаТаблицы];
			 
			Для каждого СтрокаНоменклатуры Из СтрокаДокументов.Строки Цикл
				
				// Обрабатываем только ПередачаМатериаловВЭксплуатацию
				Если ТипЗнч(СтрокаНоменклатуры.Документ1С)=Тип("Строка") Тогда
					Если СтрокаНоменклатуры.Документ1С <> "ПередачаМатериаловВЭксплуатацию" Тогда
						Продолжить;
					КонецЕсли;	
				ИначеЕсли ТипЗнч(СтрокаНоменклатуры.Документ1С)<>Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
					Продолжить;	
				КонецЕсли; 

				Если СпособЗагрузки = 1 Тогда // "добавлять в существующий"
					Если (ТипЗнч(СтрокаНоменклатуры.Документ1С)<>Тип("Строка"))И
						(ЗначениеЗаполнено(СтрокаНоменклатуры.Документ1С)) Тогда
						Если ДокументОбъект.ЭтоНовый() Тогда
						
						ИначеЕсли СтрокаНоменклатуры.Документ1С = ДокументОбъект.Ссылка Тогда	
							
						Иначе
							// Этот уже подобран в другой
							Продолжить;	
						КонецЕсли; 
					КонецЕсли;
				Иначе // в новый
					Если (ТипЗнч(СтрокаНоменклатуры.Документ1С)<>Тип("Строка"))И
						(ЗначениеЗаполнено(СтрокаНоменклатуры.Документ1С)) Тогда
						Продолжить;
					ИначеЕсли (ТипЗнч(СтрокаНоменклатуры.Документ1С)=Тип("Строка"))И
						(СтрокаНоменклатуры.Документ1С <> "ПередачаМатериаловВЭксплуатацию") Тогда
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				
				СписокЗаполненныхСтрок.Добавить(СтрокаНоменклатуры);
				
				СтрокаТоваровТекДокумента = СтрокаТаблицыДокументов1.Товар[СтрокаНоменклатуры.СтрокаТаблицыН];
				//СтрокаТоваровТекДокумента = ТоварныеТаблицы[СтрокаНоменклатуры.СтрокаТаблицыН];
			
				НоваяСтрокаДокумента = ДокументОбъект.Спецодежда.Добавить();
				Ключ = Ключ + 1;
				НоваяСтрокаДокумента._Ключ = Ключ;
				НоваяСтрокаДокумента.Номенклатура = СтрокаТоваровТекДокумента.Номенклатура; 
				НоваяСтрокаДокумента.Количество = СтрокаТоваровТекДокумента.Количество;
				
				ТекущиеДанные = НоваяСтрокаДокумента;
	            ДанныеСтрокиТаблицы = Новый Структура(
					"Номенклатура, НазначениеИспользования, Количество,
					|СчетУчета, СчетПередачи, ОтражениеВУСН");
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	            ДанныеОбъекта = Новый Структура(
					"Дата, Организация, Склад, ОтражатьВУСН");
				ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
				ДанныеОбъекта.ОтражатьВУСН = Ложь; //ПрименениеУСН И НЕ ПрименениеУСНДоходы;
	
				//СпецодеждаНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
				СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
				ДанныеСтрокиТаблицы.Номенклатура, ДанныеОбъекта);
				Если СведенияОНоменклатуре <> Неопределено Тогда
		
				
	
					Если ДанныеОбъекта.ОтражатьВУСН Тогда
						ДанныеСтрокиТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					КонецЕсли;
	
					Если ДанныеСтрокиТаблицы.Количество = 0 Тогда
						
						Если ЗначениеЗаполнено(ДанныеСтрокиТаблицы.НазначениеИспользования) Тогда
							ДанныеСтрокиТаблицы.Количество = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								ДанныеСтрокиТаблицы.НазначениеИспользования, "Количество");
						КонецЕсли;
						
					КонецЕсли;
	
					Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
						ДанныеОбъекта, ДанныеСтрокиТаблицы, "Спецодежда", СведенияОНоменклатуре);

				КонецЕсли;
					
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
					
				Если (СтрокаТоваровТекДокумента.СотрудникАкта <> NULL)И(ЗначениеЗаполнено(СтрокаТоваровТекДокумента.СотрудникАкта)) Тогда
					РезультатПоиска_ = ТЗ_КэшФизЛицОбъект.Найти(СтрокаТоваровТекДокумента.СотрудникАкта, "Ид_Медиалог");	
					Если РезультатПоиска_<>Неопределено Тогда					
						НоваяСтрокаДокумента.ФизЛицо = РезультатПоиска_.ФизЛицо;						
					КонецЕсли;
				КонецЕсли; 
				
				// Заполнение Назначения использования
				НазнИсп = Неопределено;
				// Имеет смысл только, если заполнена Номенклатура и СпособОтраженияАмортизации
				Если ЗначениеЗаполнено(НоваяСтрокаДокумента.Номенклатура)И ЗначениеЗаполнено(СпособОтраженияАмортизации) Тогда
					СпрВыборка = Справочники.НазначенияИспользования.Выбрать( ,НоваяСтрокаДокумента.Номенклатура);
					Пока СпрВыборка.Следующий() Цикл				
						Если СпрВыборка.ЭтоГруппа Тогда
							Продолжить;					
						КонецЕсли; 				
						Если СпрВыборка.СпособОтраженияРасходов = СпособОтраженияАмортизации Тогда
							// Нашли
							НазнИсп = СпрВыборка.Ссылка;					
						КонецЕсли; 			
					КонецЦикла; 
					Если НазнИсп = Неопределено Тогда
						// Создать;
						Попытка
							СпрДляЗаписи = Справочники.НазначенияИспользования.СоздатьЭлемент();
							СпрДляЗаписи.УстановитьНовыйКод();
						    СпрДляЗаписи.Наименование = СпособОтраженияАмортизации.Наименование;
							СпрДляЗаписи.Владелец = НоваяСтрокаДокумента.Номенклатура;
							СпрДляЗаписи.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию;
							СпрДляЗаписи.СрокПолезногоИспользования = 11;
							СпрДляЗаписи.Количество = 1;
							СпрДляЗаписи.СпособОтраженияРасходов = СпособОтраженияАмортизации;
							//
							СпрДляЗаписи.Записать();
							НазнИсп = СпрДляЗаписи.Ссылка;
						Исключение
							Сообщить("Создание 'Назначения использования': "+ОписаниеОшибки());
						КонецПопытки;				
					КонецЕсли; 				
				КонецЕсли; 
				НоваяСтрокаДокумента.НазначениеИспользования = НазнИсп;
				
				// Выполнить общие действия для всех документов при изменении номенклатуры.
				//ДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрокаДокумента);
				
				ОтражатьВНалоговомУчетеУСН = (НалоговыйУчетУСН.ПрименениеУСН(ДокументОбъект.Организация, ДокументОбъект.Дата)  
				                           И (НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(ДокументОбъект.Организация, ДокументОбъект.Дата)));			
				Если ОтражатьВНалоговомУчетеУСН Тогда
					НоваяСтрокаДокумента.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				КонецЕсли;
								
				НоваяСтрокаТЧМедиалога = ДокументОбъект._СпецодеждаМедиалога.Добавить();
				НоваяСтрокаТЧМедиалога.Ид_Документ = СтрокаТаблицыДокументов1.Ид_Медиалог;
				НоваяСтрокаТЧМедиалога.Ид_Номенклатура = СтрокаТоваровТекДокумента.Ид_Номенклатура;
				НоваяСтрокаТЧМедиалога.Количество = СтрокаНоменклатуры.Количество;
				НоваяСтрокаТЧМедиалога.Ключ = Ключ;
					
			КонецЦикла;	
			
		КонецЦикла;	

		Попытка 
			
			Если ДокументОбъект.Спецодежда.Количество()=0 Тогда
				Продолжить;
			КонецЕсли; 
			
			//1. Здесь - запись созданного документа
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе	
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
							
			Сообщить("Записан документ "+ДокументОбъект.Ссылка);
			
			// Отрисовать на форме заполненные документы
			Для каждого ЭлементСписка Из СписокЗаполненныхСтрок Цикл
				ЭлементСписка.Значение.Документ1С = ДокументОбъект.Ссылка;
			КонецЦикла; 
			
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	ЭтаФорма.мСтекСтраниц.Очистить();
		
	
КонецПроцедуры // ГрупповаяЗагрузка_ПередачаМатериаловВЭксплуатацию()	

&НаСервере
Процедура ГрупповаяЗагрузка_ТрНакладная()
	
	ЭтаФорма.мСтекСтраниц.Очистить();
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
	Иначе	
		Сообщить("Не определена таблица документов");
		Возврат;
	КонецЕсли;
	
	рдДеревоГрупповойЗагрузкиОбъект = ЭтаФорма.РеквизитФормыВЗначение("рдДеревоГрупповойЗагрузки");
	
	
	Для каждого СтрокаДерева Из рдДеревоГрупповойЗагрузкиОбъект.Строки Цикл
		
		Если Не СтрокаДерева.Флаг Тогда
			Продолжить;	
		КонецЕсли;
		
		СтрокаТаблицыДокументов = ТаблицаДокументовОбъект[СтрокаДерева.СтрокаТаблицы];
		
		ДокументОбъект = Неопределено;
		//СписокСпособовГрЗагрузки.Добавить(1, "обновлять");
		//СписокСпособовГрЗагрузки.Добавить(2, "в новый документ");
		Если СпособЗагрузки = 1 Тогда  // "добавлять в существующий"
			// Попытаемся найти первый существующий документ
			ДокументДляЗагрузки = Неопределено;
			
				Если Объект.СкрыватьЗагруженные Тогда
					Для каждого ЭлементСписка Из СтрокаДерева.СписокДокументов1С Цикл
						Если ТипЗнч(ЭлементСписка.Значение)<>Тип("ДокументСсылка.ТребованиеНакладная") Тогда
							Продолжить;	
						КонецЕсли; 
						ДокументДляЗагрузки = ЭлементСписка.Значение;
						Прервать;				
					КонецЦикла; 
				Иначе
					Для каждого СтрокаСДокументом Из СтрокаДерева.Строки Цикл
						Для каждого СтрокаСНоменклатурой Из СтрокаСДокументом.Строки Цикл
							Если ТипЗнч(СтрокаСНоменклатурой.Документ1С)=Тип("Строка") Тогда
								Продолжить;
							ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСНоменклатурой.Документ1С)	Тогда
								Продолжить;
							ИначеЕсли ТипЗнч(СтрокаСНоменклатурой.Документ1С)<>Тип("ДокументСсылка.ТребованиеНакладная") Тогда
								Продолжить;	
							КонецЕсли; 
							
						    ДокументДляЗагрузки = СтрокаСНоменклатурой.Документ1С;
							Прервать;
						КонецЦикла; 
						
						Если ЗначениеЗаполнено(ДокументДляЗагрузки)	Тогда
							Прервать;					
						КонецЕсли;					
					КонецЦикла;
				КонецЕсли;	
			
			Если ЗначениеЗаполнено(ДокументДляЗагрузки) Тогда
				Попытка
					ДокументОбъект = ДокументДляЗагрузки.ПолучитьОбъект();
					Если НЕ Объект.СкрыватьЗагруженные Тогда
						ДокументОбъект.Материалы.Очистить();
						ДокументОбъект._МатериалыМедиалога.Очистить();
					КонецЕсли;	
				Исключение
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;			
			КонецЕсли; 			
		Иначе // "в новый документ"
			
		КонецЕсли;	
		
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = Документы["ТребованиеНакладная"].СоздатьДокумент();
			ДокументОбъект.Дата = КонецДня(Объект.ДатаКон);
			ДокументОбъект.Организация = Объект.Организация;
			//ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект);
			ДокументОбъект.УстановитьНовыйНомер(ДокументОбъект.Организация.Префикс);
			ДокументОбъект._ТипГрупповогоДокумента = 1;
		КонецЕсли; 
		
		МассивКлючей = ДокументОбъект.Материалы.ВыгрузитьКолонку("_Ключ");
		Ключ = 0;
		Для каждого ЗначениеКлюча Из МассивКлючей Цикл
			Если ЗначениеКлюча>Ключ Тогда
				Ключ = ЗначениеКлюча;
			КонецЕсли; 	
		КонецЦикла; 
												
		Если ДокументОбъект.ПометкаУдаления  Тогда
			ДокументОбъект.ПометкаУдаления = Ложь;
		КонецЕсли; 
			
		Если ПустаяСтрока(СокрЛП(ДокументОбъект.Комментарий)) Тогда
			ДокументОбъект.Комментарий = "Загружено из Медиалога за период " + Формат(Объект.ДатаНач,"ДФ=dd.MM.yyyy")+" - "+Формат(Объект.ДатаКон,"ДФ=dd.MM.yyyy");
		КонецЕсли;
			
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"),,,Неопределено);
		ЗаполнениеДокументов.Заполнить(ДокументОбъект);
		
		ДокументОбъект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		ДокументОбъект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = Истина;
		// Байдин 2017-12-26 /*
		//ДокументОбъект.Склад = СтрокаТаблицыДокументов.Склад;
		Если ЗначениеЗаполнено(СтрокаТаблицыДокументов.Склад) Тогда
			ДокументОбъект.Склад = СтрокаТаблицыДокументов.Склад;
			ДокументОбъект.ПодразделениеОрганизации = СтрокаТаблицыДокументов.Склад.ПодразделениеОрганизации;
		КонецЕсли; 
		// */ Байдин 2017-12-26 
		
		СписокЗаполненныхСтрок = Новый СписокЗначений;
		
		Для каждого СтрокаДокументов Из СтрокаДерева.Строки Цикл
			СтрокаТаблицыДокументов1 = ТаблицаДокументовОбъект[СтрокаДокументов.СтрокаТаблицы];
			 
			Для каждого СтрокаНоменклатуры Из СтрокаДокументов.Строки Цикл
				
				// Обрабатываем только Требования-Накладные
				Если ТипЗнч(СтрокаНоменклатуры.Документ1С)=Тип("Строка") Тогда
					Если СтрокаНоменклатуры.Документ1С <> "ТребованиеНакладная" Тогда
						Продолжить;
					КонецЕсли;	
				ИначеЕсли ТипЗнч(СтрокаСНоменклатурой.Документ1С)<>Тип("ДокументСсылка.ТребованиеНакладная") Тогда
					Продолжить;	
				КонецЕсли; 

				Если СпособЗагрузки = 1 Тогда // "добавлять в существующий"
					Если (ТипЗнч(СтрокаНоменклатуры.Документ1С)<>Тип("Строка"))И
						(ЗначениеЗаполнено(СтрокаНоменклатуры.Документ1С)) Тогда
						Если ДокументОбъект.ЭтоНовый() Тогда
						
						ИначеЕсли СтрокаНоменклатуры.Документ1С = ДокументОбъект.Ссылка Тогда	
							
						Иначе
							// Этот уже подобран в другой
							Продолжить;	
						КонецЕсли; 
					КонецЕсли;
				Иначе // в новый
					Если (ТипЗнч(СтрокаНоменклатуры.Документ1С)<>Тип("Строка"))И
						(ЗначениеЗаполнено(СтрокаНоменклатуры.Документ1С)) Тогда
						Продолжить;
					ИначеЕсли (ТипЗнч(СтрокаНоменклатуры.Документ1С)=Тип("Строка"))И
						(СтрокаНоменклатуры.Документ1С <> "ТребованиеНакладная") Тогда
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				
				СписокЗаполненныхСтрок.Добавить(СтрокаНоменклатуры);
				
				СтрокаТоваровТекДокумента = СтрокаТаблицыДокументов1.Товар[СтрокаНоменклатуры.СтрокаТаблицыН];
				//СтрокаТоваровТекДокумента = ТоварныеТаблицы[СтрокаНоменклатуры.СтрокаТаблицыН];
			
				НоваяСтрокаДокумента = ДокументОбъект.Материалы.Добавить();
				Ключ = Ключ + 1;
				НоваяСтрокаДокумента._Ключ = Ключ;
				НоваяСтрокаДокумента.Номенклатура = СтрокаТоваровТекДокумента.Номенклатура; 
				НоваяСтрокаДокумента.Количество = СтрокаТоваровТекДокумента.Количество;
				
				НоваяСтрокаДокумента.ЕдиницаИзмерения = НоваяСтрокаДокумента.Номенклатура.ЕдиницаИзмерения;
				НоваяСтрокаДокумента.Коэффициент      = 1;
				НоваяСтрокаДокумента.ОтражениеВУСН 	  = Перечисления.ОтражениеВУСН.Принимаются;
				
				ТекущиеДанные = НоваяСтрокаДокумента;	
				ДанныеСтрокиТаблицы = Новый Структура(
					"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
					|Счет, ОтражениеВУСН, СпособУчетаНДС,
					|НомерГТД, СтранаПроисхождения,
					|НоменклатурнаяГруппа, СчетЗатрат, СтатьяЗатрат, ПодразделениеЗатрат,
					|ПодразделениеЗатратДоступность, НоменклатурнаяГруппаВыделятьНезаполненное");				
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);	
				ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ПодразделениеОрганизации, СчетаУчетаЗатратВТаблице");
				ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
	
				//МатериалПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	            СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
					ДанныеСтрокиТаблицы.Номенклатура, ДанныеОбъекта);
				Если СведенияОНоменклатуре <> Неопределено Тогда
					
				
	
					ДанныеСтрокиТаблицы.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
					ДанныеСтрокиТаблицы.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
					ДанныеСтрокиТаблицы.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
					ДанныеСтрокиТаблицы.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
					ДанныеСтрокиТаблицы.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
					ДанныеСтрокиТаблицы.СпособУчетаНДС			= СведенияОНоменклатуре.СпособУчетаНДС;
					ДанныеСтрокиТаблицы.СтатьяЗатрат			= ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
																		СведенияОНоменклатуре.СтатьяЗатрат,
																		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
				
					Если ДанныеОбъекта.СчетаУчетаЗатратВТаблице Тогда
						
						Если НЕ ЗначениеЗаполнено(ДанныеСтрокиТаблицы.СчетЗатрат) Тогда
							ДанныеСтрокиТаблицы.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ПодразделениеЗатрат) Тогда
							ДанныеСтрокиТаблицы.ПодразделениеЗатрат = БухгалтерскийУчет.ПолучитьПодразделениеПоСчету(
								ДанныеОбъекта.ПодразделениеОрганизации, ДанныеСтрокиТаблицы.СчетЗатрат, ДанныеОбъекта.Организация);
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ОтражениеВУСН) Тогда
						ДанныеСтрокиТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					КонецЕсли;
					
					Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
						ДанныеОбъекта, ДанныеСтрокиТаблицы, "Материалы", СведенияОНоменклатуре);
		
	         	КонецЕсли;
	
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
				

				//ДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрокаДокумента, "Материалы", Истина);
				
				НоваяСтрокаТЧМедиалога = ДокументОбъект._МатериалыМедиалога.Добавить();
				НоваяСтрокаТЧМедиалога.Ид_Документ = СтрокаТаблицыДокументов1.Ид_Медиалог;
				НоваяСтрокаТЧМедиалога.Ид_Номенклатура = СтрокаТоваровТекДокумента.Ид_Номенклатура;
				НоваяСтрокаТЧМедиалога.Количество = СтрокаНоменклатуры.Количество;
				НоваяСтрокаТЧМедиалога.Ключ = Ключ;
					
			КонецЦикла;	
			
		КонецЦикла;	

		Попытка 
			
			Если ДокументОбъект.Материалы.Количество()=0 Тогда
				Продолжить;
			КонецЕсли; 
			
			//1. Здесь - запись созданного документа
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе	
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
							
			Сообщить("Записан документ "+ДокументОбъект.Ссылка);
			
			// Отрисовать на форме заполненные документы
			Для каждого ЭлементСписка Из СписокЗаполненныхСтрок Цикл
				ЭлементСписка.Значение.Документ1С = ДокументОбъект.Ссылка;
			КонецЦикла; 
			
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	ЭтаФорма.мСтекСтраниц.Очистить();
	
КонецПроцедуры // ГрупповаяЗагрузка_ТрНакладная()

&НаСервере
Процедура ГрупповаяЗагрузка_РасхНакладная()

	ЭтаФорма.мСтекСтраниц.Очистить();
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
	Иначе	
		Сообщить("Не определена таблица документов");
		Возврат;
	КонецЕсли;
	
	рдДеревоГрупповойЗагрузкиОбъект = ЭтаФорма.РеквизитФормыВЗначение("рдДеревоГрупповойЗагрузки");
	
	Для каждого СтрокаДерева Из рдДеревоГрупповойЗагрузкиОбъект.Строки Цикл
		
		Если Не СтрокаДерева.Флаг Тогда
			Продолжить;	
		КонецЕсли;
		
		СтрокаТаблицыДокументов = ТаблицаДокументовОбъект[СтрокаДерева.СтрокаТаблицы];
		
		ДокументОбъект = Неопределено;
		//СписокСпособовГрЗагрузки.Добавить(1, "обновлять");
		//СписокСпособовГрЗагрузки.Добавить(2, "в новый документ");
		Если ЭтаФорма.СпособЗагрузки = 1 Тогда  // "добавлять в существующий"
			// Попытаемся найти первый существующий документ
			ДокументДляЗагрузки = Неопределено;
			
				Если Объект.СкрыватьЗагруженные Тогда
					Для каждого ЭлементСписка Из СтрокаДерева.СписокДокументов1С Цикл
						ДокументДляЗагрузки = ЭлементСписка.Значение;
						Прервать;				
					КонецЦикла; 
				Иначе	
					Для каждого СтрокаСДокументом Из СтрокаДерева.Строки Цикл
						Для каждого СтрокаСНоменклатурой Из СтрокаСДокументом.Строки Цикл
							Если ТипЗнч(СтрокаСНоменклатурой.Документ1С)=Тип("Строка") Тогда
								Продолжить;
							ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСНоменклатурой.Документ1С)	Тогда
								Продолжить;
							КонецЕсли; 
							
						    ДокументДляЗагрузки = СтрокаСНоменклатурой.Документ1С;
							Прервать;
						КонецЦикла; 
						
						Если ЗначениеЗаполнено(ДокументДляЗагрузки)	Тогда
							Прервать;					
						КонецЕсли;					
					КонецЦикла;
				КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументДляЗагрузки) Тогда
				Попытка
					ДокументОбъект = ДокументДляЗагрузки.ПолучитьОбъект();
					Если НЕ Объект.СкрыватьЗагруженные Тогда
						ДокументОбъект.Товары.Очистить();
						ДокументОбъект._ТоварыМедиалога.Очистить();
					КонецЕсли;	
				Исключение
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;			
			КонецЕсли; 			
		Иначе // "в новый документ"
			
		КонецЕсли;	
		
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = Документы["РеализацияТоваровУслуг"].СоздатьДокумент();
			ДокументОбъект.Дата = КонецДня(Объект.ДатаКон);
			ДокументОбъект.Организация = Объект.Организация;
			//ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект);
			ДокументОбъект.УстановитьНовыйНомер(ДокументОбъект.Организация.Префикс);
			ДокументОбъект._ТипГрупповогоДокумента = 1;
		КонецЕсли; 
		
		МассивКлючей = ДокументОбъект.Товары.ВыгрузитьКолонку("_Ключ");
		Ключ = 0;
		Для каждого ЗначениеКлюча Из МассивКлючей Цикл
			Если ЗначениеКлюча>Ключ Тогда
				Ключ = ЗначениеКлюча;
			КонецЕсли; 	
		КонецЦикла; 
												
		Если ДокументОбъект.ПометкаУдаления  Тогда
			ДокументОбъект.ПометкаУдаления = Ложь;
		КонецЕсли; 
			
		Если ПустаяСтрока(СокрЛП(ДокументОбъект.Комментарий)) Тогда
			ДокументОбъект.Комментарий = "Загружено из Медиалога за период " + Формат(Объект.ДатаНач,"ДФ=dd.MM.yyyy")+" - "+Формат(Объект.ДатаКон,"ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;	
		ДокументОбъект.Товары.Очистить();
			
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"),мВалютаРегламентированногоУчета,"Продажа",Неопределено);
		ЗаполнениеДокументов.Заполнить(ДокументОбъект);
		
		////ДокОбъект.Контрагент = СТ.Контрагент;  
		////ДокОбъект.ДоговорКонтрагента = СТ.Договор;  

	
		ДокументОбъект.УдалитьУчитыватьНДС = Истина;
		ДокументОбъект.СуммаВключаетНДС = Истина;
		// Байдин 2017-12-26 /*
		//ДокументОбъект.Склад = СтрокаТаблицыДокументов.Склад;
		Если ЗначениеЗаполнено(СтрокаТаблицыДокументов.Склад) Тогда
			ДокументОбъект.Склад = СтрокаТаблицыДокументов.Склад;
			ДокументОбъект.ПодразделениеОрганизации = СтрокаТаблицыДокументов.Склад.ПодразделениеОрганизации;
		КонецЕсли; 
		// */ Байдин 2017-12-26 
		
		СписокЗаполненныхСтрок = Новый СписокЗначений;
		
		Для каждого СтрокаДокументов Из СтрокаДерева.Строки Цикл
			СтрокаТаблицыДокументов1 = ТаблицаДокументовОбъект[СтрокаДокументов.СтрокаТаблицы];
			 
			Для каждого СтрокаНоменклатуры Из СтрокаДокументов.Строки Цикл
				
				Если СпособЗагрузки = 1 Тогда // "добавлять в существующий"
					Если (ТипЗнч(СтрокаНоменклатуры.Документ1С)<>Тип("Строка"))И
						(ЗначениеЗаполнено(СтрокаНоменклатуры.Документ1С)) Тогда
						Если ДокументОбъект.ЭтоНовый() Тогда
						
						ИначеЕсли СтрокаНоменклатуры.Документ1С = ДокументОбъект.Ссылка Тогда	
							
						Иначе
							// Этот уже подобран в другой
							Продолжить;	
						КонецЕсли; 
					КонецЕсли;
				Иначе // в новый
					Если (ТипЗнч(СтрокаНоменклатуры.Документ1С)<>Тип("Строка"))И
						(ЗначениеЗаполнено(СтрокаНоменклатуры.Документ1С)) Тогда
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				
				СписокЗаполненныхСтрок.Добавить(СтрокаНоменклатуры);
				
				СтрокаТоваровТекДокумента = СтрокаТаблицыДокументов1.Товар[СтрокаНоменклатуры.СтрокаТаблицыН];
				//СтрокаТоваровТекДокумента = ТоварныеТаблицы[СтрокаНоменклатуры.СтрокаТаблицыН];
			
				НоваяСтрокаДокумента = ДокументОбъект.Товары.Добавить();
				Ключ = Ключ + 1;
				НоваяСтрокаДокумента._Ключ = Ключ;
				НоваяСтрокаДокумента.Номенклатура = СтрокаТоваровТекДокумента.Номенклатура; 
				НоваяСтрокаДокумента.Количество = СтрокаТоваровТекДокумента.Количество;
				
				
				////ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрокаДокумента, ДокументОбъект);
				////ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НоваяСтрокаДокумента, Ложь, Организация, ДокументОбъект.Дата);
				////ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрокаДокумента, ДокументОбъект); 
				////
				////ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаДокумента, ДокументОбъект);
				////ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаДокумента, ДокументОбъект);
				////ДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрокаДокумента, "Товары", Истина);
				
				// Текст из  Процедура ТоварыНоменклатураПриИзменении(Элемент)
				ТекущиеДанные = НоваяСтрокаДокумента;			
				ЭтоКомиссия = Ложь;
				ДанныеСтрокиТаблицы = Новый Структура(
					"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
					|Цена, Сумма, СтавкаНДС, СуммаНДС,
					|СчетУчета, ПереданныеСчетУчета,
					|СчетДоходов, Субконто, СчетУчетаНДСПоРеализации, СчетРасходов,
					|НомерГТД, СтранаПроисхождения");
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);	
				ДанныеОбъекта = Новый Структура(
					"Дата, ВидОперации, Организация, ДеятельностьНаПатенте,
					|Склад, ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
					|СуммаВключаетНДС, ДоговорКонтрагента,
					|ЭтоКомиссия, Реализация");
				ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
				ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
				ДанныеОбъекта.Реализация  = Истина;	
				ПараметрыОбработки = Новый Структура();
				ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
				ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);	
				
				ДанныеФормы=Новый Структура;
				ДанныеФормы.Вставить("Строка", ДанныеСтрокиТаблицы);
				ПараметрыОбработки.Вставить("ДанныеФормы", 		ДанныеФормы);
				
				////// Получим общие параметры обработки для реквизитов документа
				////ПараметрыОбработки = РеализацияТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(
				////	ЭтаФорма, ТекущиеДанные);
				//
				// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
				////ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", 0);
				////ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ТекущиеДанные.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам);
				////ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетУчетаЗабалансовый", ТекущиеДанные.СчетУчетаЗабалансовый);
	
				//ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
				ПараметрыОбработки.ДанныеОбъекта.Вставить("СуммаВключаетНДС", 	ДокументОбъект.СуммаВключаетНДС);
				
				//83
				////ПараметрыЗаполненияСчетовУчета = РеализацияТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
				////"Товары.Номенклатура", ДокОбъект, НоваяСтрокаДокумента, ДанныеОбъекта, ДанныеСтрокиТаблицы);				
				ПараметрыЗаполненияСчетовУчета = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
				"РеализацияТоваровУслуг","Товары.Номенклатура",ДокументОбъект, ДанныеСтрокиТаблицы, ДанныеОбъекта, ДанныеСтрокиТаблицы);				
				СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетУчета");
				СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.ПереданныеСчетУчета");
				СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетДоходов");
				СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.Субконто");
				СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетУчетаНДСПоРеализации");
				СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполненияСчетовУчета, "Товары.СчетРасходов");
				
				//83
				//ТоварыНоменклатураПриИзмененииНаСервере(
				//	ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	            РеализацияТоваровУслугФормы.ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению); //83

				ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

				МД=ДокументОбъект.Метаданные();
				ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НоваяСтрокаДокумента,"Товары", МД);
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрокаДокумента,ДокументОбъект,"Товары", МД);
				
				НоваяСтрокаДокумента.Цена = СтрокаТоваровТекДокумента.ЦенаВРозницеСНДС;
				
				//Сообщить("="+СтрокаТоваровТекДокумента.ЦенаВРозницеСНДС);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрокаДокумента);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаДокумента, ДокументОбъект.СуммаВключаетНДС);
				
				
				НоваяСтрокаТЧМедиалога = ДокументОбъект._ТоварыМедиалога.Добавить();
				НоваяСтрокаТЧМедиалога.Ид_Документ = СтрокаТаблицыДокументов1.Ид_Медиалог;
				НоваяСтрокаТЧМедиалога.Ид_Номенклатура = СтрокаТоваровТекДокумента.Ид_Номенклатура;
				НоваяСтрокаТЧМедиалога.Количество = СтрокаНоменклатуры.Количество;
				НоваяСтрокаТЧМедиалога.Ключ = Ключ;
					
			КонецЦикла;	
			
		КонецЦикла;	

		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект,"Товары");
		
		Попытка 
			
			Если ДокументОбъект.Товары.Количество()=0 Тогда
				Продолжить;
			КонецЕсли; 
			
			//1. Здесь - запись созданного документа
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе	
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
							
			Сообщить("Записан документ "+ДокументОбъект.Ссылка);
			
			// Отрисовать на форме заполненные документы
			Для каждого ЭлементСписка Из СписокЗаполненныхСтрок Цикл
				ЭлементСписка.Значение.Документ1С = ДокументОбъект.Ссылка;
			КонецЦикла; 
			
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	ЭтаФорма.мСтекСтраниц.Очистить();
	
	Сообщить("Запись документов завершена");	

КонецПроцедуры // ГрупповаяЗагрузка_РасхНакладная()

&НаСервере
Процедура РазобратьДокументы(COMОбъектConnection, ОбработкаОбъект)
	
	рдСписокВидовДокументовОбъект = ЭтаФорма.рдСписокВидовДокументов;
	
	ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
	
	ТЗ_КэшКонтрагентовОбъект = РеквизитФормыВЗначение("ТЗ_КэшКонтрагентов");
	
	ТекОрг = ЭтаФорма.Организация1; //ПолучитьИДтекОрганизации();  //-=Орг
	Если ТекОрг=0 Тогда
		Сообщить("Не определена организация");
		Возврат;	
	КонецЕсли;
	ТекстОтбораПоОрганизации = "ISNULL(FM_DEP1.MAIN_ORG_ID,0)="+Формат(ТекОрг,"ЧГ=");
	//-=Орг
	
	ТекстОтбораПоВидуДокумента = "";
	Для каждого ЭлементСписка Из рдСписокВидовДокументовОбъект Цикл
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОтбораПоВидуДокумента = ТекстОтбораПоВидуДокумента + 
		?(ПустаяСтрока(ТекстОтбораПоВидуДокумента),"","OR")+
		"(DM_DOC_TYPE_ID = "+ЭлементСписка.Значение+")";
			
	КонецЦикла; 
	
	Если ПустаяСтрока(ТекстОтбораПоВидуДокумента) Тогда
		Сообщить("Не выбрано ни одного вида документа");
		Возврат;
	КонецЕсли; 
	
	// Доп.отбор Склады, которые нужно исключить из загрузки:
	// DM_WAREHOUSES_ID               Склад
	// 77                           Аптека ЛПУ до 30.06
	// 78                           Административно-хозяйственный до 30.06
	ОтборПоИсключаемымСкладам = "AND (
	|(DM_DOC.DM_WAREHOUSES_ID <> 77)
	|
	|AND
	|
	|(DM_DOC.DM_WAREHOUSES_ID <> 78)
	|)";
	
	//Отбор по папке номенклатуры
	ОтборПоПапкеНоменклатуры = " AND 
	|(DM_GROUPS.DM_GROUPS_ID <> 10000007)
	//#14742 #135334 Арендованное оборудование	
	| AND (DM_GROUPS.DM_GROUPS_ID <> 1000000003)";

	
	// ОтборПоОсновнымСкладамДляПеремещений
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._ОсновныеСкладыДляПеремещений КАК Рег
	|";
	ОтборПоОсновнымСкладамДляПеремещений = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл	
		ОтборПоОсновнымСкладамДляПеремещений = ОтборПоОсновнымСкладамДляПеремещений + 
		"WHEN DM_DOC.DM_WAREHOUSES_ID = "+Формат(Выборка.Ид,"ЧГ=")+" THEN 1
		|";
	КонецЦикла; 
	
	Если НЕ ПустаяСтрока(ОтборПоОсновнымСкладамДляПеремещений) Тогда
		ОтборПоОсновнымСкладамДляПеремещений = "AND (CASE WHEN DM_DOC.DM_DOC_TYPE_ID=4 THEN 
		|	CASE "+ ОтборПоОсновнымСкладамДляПеремещений + "
		|   ELSE 0 END
		|	ELSE 1 END = 1)"
	КонецЕсли; 
	
	// При загрузке данных по розничным продажам необходимо брать только тот товар, 
	// у которого поле IS_ACPT_RETAIL = Истина (Таблица DM_TRANSFERS)
	ДопОтборПоРозничнымПродажам = " AND
	|((CASE WHEN (DM_DOC.DM_DOC_TYPE_ID=8) THEN ISNULL(DM_TRANSFERS.IS_ACPT_RETAIL, 1) ELSE 1 END) = 1)";
	
	//Состояние("Заполнение таблицы единиц измерения");
	// Сначала заполним единицы измерения
	Попытка
		Recordset = Новый COMОбъект("ADODB.Recordset");
		
		ТекстЗапроса = "SELECT DISTINCT
		|	DM_MEDS.DM_MEDS_ID,
		|	DM_MEDS.LABEL,
		|   DM_MEDS_MEASURES.MEDS_MEASURE_FACTOR,
		|   DM_MEDS_MEASURES.MEASURE_FACTOR,
		|   DM_GROUPS.DM_GROUPS_ID,		
		|
		|
		|	DM_MEASURE.DM_MEASURE_ID,
		|	DM_MEASURE.LABEL AS MEASURELABEL,
		|	DM_MEASURE.CODE AS MEASURECODE
		|FROM DM_DOC  WITH (NOLOCK)
		|
		|LEFT JOIN DM_TRANSFERS  WITH (NOLOCK)
		|ON DM_DOC.DM_DOC_ID = DM_TRANSFERS.DM_DOC_ID 
		|
		|LEFT JOIN DM_LOTS  WITH (NOLOCK)
		|ON DM_TRANSFERS.DM_LOTS_ID = DM_LOTS.DM_LOTS_ID
		|
		|LEFT JOIN DM_MEDS  WITH (NOLOCK)
		|ON DM_LOTS.DM_MEDS_ID = DM_MEDS.DM_MEDS_ID 
		|
		|LEFT JOIN DM_WAREHOUSES  WITH (NOLOCK)
		|ON DM_WAREHOUSES.DM_WAREHOUSES_ID = DM_DOC.DM_WAREHOUSES_ID
		|
		|LEFT JOIN DM_MEDS_MEASURES  WITH (NOLOCK)
		|ON DM_MEDS.DM_MEDS_ID = DM_MEDS_MEASURES.DM_MEDS_ID
		|
		|LEFT JOIN DM_MEASURE  WITH (NOLOCK)
		|ON DM_MEDS_MEASURES.DM_MEASURE_ID = DM_MEASURE.DM_MEASURE_ID
		|
		|LEFT JOIN DM_GROUPS  WITH (NOLOCK)
		|ON DM_MEDS.DM_GROUPS_ID = DM_GROUPS.DM_GROUPS_ID
		|
		|
		|	WHERE (DM_DOC.ACCEPT_DATE >= '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"')AND(DM_DOC.ACCEPT_DATE <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')AND";
		ТекстЗапроса = ТекстЗапроса + "
		|	("+ТекстОтбораПоВидуДокумента+")AND
		|	(ACCEPTED=1) "+ОтборПоИсключаемымСкладам+ОтборПоПапкеНоменклатуры+ОтборПоОсновнымСкладамДляПеремещений+"
		|
		|ORDER BY DM_MEDS.LABEL
		|";
		
		//|	DM_DOC.DM_DOC_ID,
		//|	DM_DOC.DM_WAREHOUSES_ID,
		
		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);
		ТаблицаЕдиницИзмерения = Новый ТаблицаЗначений;
		ТаблицаЕдиницИзмерения.Колонки.Добавить("DM_MEDS_ID");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("LABEL");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("MEDS_MEASURE_FACTOR");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("MEASURE_FACTOR");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("DM_MEASURE_ID");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("MEASURELABEL");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("MEASURECODE");
		ТаблицаЕдиницИзмерения.Колонки.Добавить("Флаг");

		Пока НЕ Recordset.EOF Цикл
			MEASURECODE = Recordset.Fields("MEASURECODE").Value;
			MEASURELABEL = Recordset.Fields("MEASURELABEL").Value;
			Если MEASURECODE = NULL Тогда
				Recordset.MoveNext();
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = ТаблицаЕдиницИзмерения.Добавить();
			НоваяСтрока.DM_MEDS_ID = Recordset.Fields("DM_MEDS_ID").Value;
			НоваяСтрока.LABEL = Recordset.Fields("LABEL").Value;
			НоваяСтрока.MEDS_MEASURE_FACTOR = Recordset.Fields("MEDS_MEASURE_FACTOR").Value;
			НоваяСтрока.MEASURE_FACTOR = Recordset.Fields("MEASURE_FACTOR").Value;
			НоваяСтрока.DM_MEASURE_ID = Recordset.Fields("DM_MEASURE_ID").Value;
			НоваяСтрока.MEASURELABEL = MEASURELABEL;
			НоваяСтрока.MEASURECODE = MEASURECODE;
			НоваяСтрока.Флаг = 1;
			
			Recordset.MoveNext();
		КонецЦикла;

		// Проверить наличие 2х строк в таблице
		ТаблицаЕдиницИзмерения.Свернуть("DM_MEDS_ID,LABEL,MEDS_MEASURE_FACTOR,MEASURE_FACTOR,DM_MEASURE_ID,MEASURELABEL,MEASURECODE", "Флаг");		
		БылиДвойныеСтроки= Ложь;
		Для каждого СтрокаТаблицы Из ТаблицаЕдиницИзмерения Цикл
		    Если СтрокаТаблицы.Флаг < 2 Тогда
				Продолжить;
			КонецЕсли; 
			
			Сообщить(""+СтрокаТаблицы.LABEL+" : "+СтрокаТаблицы.MEASURELABEL);
			БылиДвойныеСтроки = Истина;
		
		КонецЦикла; 
				
	    Recordset.Close();
		Recordset = NULL;
		
		Если БылиДвойныеСтроки Тогда
		
			Сообщить("Встретилось несколько альтернативных единиц у одной номенклатуры");	
		    Возврат;
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	//Состояние("Заполнение документов");	
	// Теперь, имея таблицу единиц измерения, можно грузить
	Попытка
		
		Recordset = Новый COMОбъект("ADODB.Recordset");	
		
		//СО - 2 вставки - поля + 2 левых соединения
		//РА - 2 вставки - поля + левое соединение
		//РА2
		ТекстЗапроса = "SELECT 
		|	DM_DOC.DM_DOC_ID,
		|	DM_DOC.DOC_NUM,
		|	DM_DOC.INVOICE_NUM,
		//+Молдавская А.С. 2017.07.11  задача 7683
		|	DM_DOC.INVOICE_DATE,
		//-Молдавская А.С. 2017.07.11  
		|	DM_DOC.DM_DOC_TYPE_ID,
		|   DM_DOC.ACCEPT_DATE AS DateDoc,
		|	DM_DOC.ACT_SPISANIYA_TYPE,
		|   DM_DOC.ACT_SPISANIYA_DEP,
		|	FM_DEP.LABEL AS DEP_LABEL,
		|   DM_DOC.ACT_SPISANIYA_USER,
		|	MEDECINS.NOM,
		|	MEDECINS.PRENOM,
		|	DM_DOC.FM_ORG_ID,
		|	FM_ORG.INN,
		|	FM_ORG.LABEL AS ORGLABEL,
		|	DM_DOC.DM_WAREHOUSES_ID,
		|	DM_WAREHOUSES.LABEL AS WAREHOUSESLABEL,
		|	DM_DOC.DM_SOURCE_WH_ID,
		|	DM_WAREHOUSES1.LABEL AS WAREHOUSES1LABEL,
		|	DM_MEDS.DM_MEDS_ID,
		|	DM_LOTS.FM_TAXE_IN_ID AS NDS,
		|	DM_LOTS.PRICE,
		|	DM_TRANSFERS.QUANTITY,
		|	DM_TRANSFERS.SUM_WOUT_NDS,
		|	DM_TRANSFERS.SUM_NDS,
		|	DM_TRANSFERS.NDS_IN_MONEY,
		|	DM_TRANSFERS.SALE_SUM,
		|   DM_TRANSFERS.TRANSFERS_SUM,
		|   DM_TRANSFERS.TRANSFERS_NDS,
		|	ISNULL(DM_TRANSFERS.CHECK_NUM,0) AS CHECK_NUM,
		|	DM_TRANSFERS.MEASURE_FACTOR,
		|	ISNULL(DM_TRANSFERS.FM_PAYMODE_ID, 2) AS DM_TRANSFERS_PAYMODE,
		|	DM_MEDS.LABEL,
		|	DM_MEASURE.DM_MEASURE_ID,
		|	DM_MEASURE.LABEL AS MEASURELABEL,
		|	DM_MEASURE.CODE AS MEASURECODE,
		|	DM_GROUPS.DM_GROUPS_ID,
		|   DM_GROUPS.LABEL AS GROUPSLABEL,
		|	ISNULL(SUBQUERY.FM_PAYMODE_ID, 2) AS FM_PAYMODE_ID,
		|	ISNULL(SUBQUERY1.TRAN_SUM, 0) AS TRAN_SUM
		|
		|FROM DM_DOC  WITH (NOLOCK)
		|
		|LEFT JOIN DM_TRANSFERS  WITH (NOLOCK)
		|ON DM_DOC.DM_DOC_ID = DM_TRANSFERS.DM_DOC_ID 
		|
		|LEFT JOIN DM_LOTS  WITH (NOLOCK)
		|ON DM_TRANSFERS.DM_LOTS_ID = DM_LOTS.DM_LOTS_ID
		|
		|LEFT JOIN DM_MEDS  WITH (NOLOCK)
		|ON DM_LOTS.DM_MEDS_ID = DM_MEDS.DM_MEDS_ID 
		|
		|LEFT JOIN DM_WAREHOUSES  WITH (NOLOCK)
		|ON DM_WAREHOUSES.DM_WAREHOUSES_ID = DM_DOC.DM_WAREHOUSES_ID
		|
		|LEFT JOIN DM_WAREHOUSES AS DM_WAREHOUSES1  WITH (NOLOCK)
		|ON DM_WAREHOUSES1.DM_WAREHOUSES_ID = DM_DOC.DM_SOURCE_WH_ID
		|		
		|LEFT JOIN FM_DEP AS FM_DEP1  WITH (NOLOCK)
		|ON DM_WAREHOUSES.FM_DEP_ID = FM_DEP1.FM_DEP_ID
		|
		|LEFT JOIN FM_ORG  WITH (NOLOCK)
		|ON DM_DOC.FM_ORG_ID = FM_ORG.FM_ORG_ID 
		|
		|LEFT JOIN DM_MEASURE  WITH (NOLOCK)
		|ON DM_MEASURE.DM_MEASURE_ID = DM_MEDS.DM_MEASURE_ID
		|
		|LEFT JOIN DM_GROUPS  WITH (NOLOCK)
		|ON DM_MEDS.DM_GROUPS_ID = DM_GROUPS.DM_GROUPS_ID
		|
		|LEFT JOIN FM_DEP  WITH (NOLOCK)
		|ON DM_DOC.ACT_SPISANIYA_DEP = FM_DEP.FM_DEP_ID 
		|
		|LEFT JOIN MEDECINS  WITH (NOLOCK)
		|ON MEDECINS.MEDECINS_ID = DM_DOC.ACT_SPISANIYA_USER
		|
		|LEFT JOIN 
		|	(SELECT DISTINCT
		|    	SUBTABLE.DM_DOC_ID,
		|		1 AS FM_PAYMODE_ID
		|		FROM FM_ACCOUNT_TRAN AS SUBTABLE  WITH (NOLOCK)
		|       WHERE (SUBTABLE.FM_PAYMODE_ID = 1)OR(SUBTABLE.FM_PAYMODE_ID > 2)
		|		GROUP BY SUBTABLE.DM_DOC_ID
		|	)AS SUBQUERY
		|ON	DM_DOC.DM_DOC_ID = SUBQUERY.DM_DOC_ID
		|
		|LEFT JOIN
		|	(SELECT
		|		SUBTABLE1.DM_DOC_ID,
		|       SUM(-SUBTABLE1.TRAN_SUM) AS TRAN_SUM
		|		FROM FM_ACCOUNT_TRAN AS SUBTABLE1  WITH (NOLOCK)
		|       WHERE (SUBTABLE1.FM_PAYMODE_ID > 2)AND(SUBTABLE1.FM_MAIN_TRAN_ID > 0)AND(SUBTABLE1.TRAN_SUM < 0)
		|       GROUP BY SUBTABLE1.DM_DOC_ID
		|	)AS SUBQUERY1
		|ON DM_DOC.DM_DOC_ID = SUBQUERY1.DM_DOC_ID
		|
		|	WHERE (DM_DOC.ACCEPT_DATE >= '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"')AND(DM_DOC.ACCEPT_DATE <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')AND";
		ТекстЗапроса = ТекстЗапроса + "
		|	("+ТекстОтбораПоВидуДокумента+")AND("+ТекстОтбораПоОрганизации+")AND
		|	(ACCEPTED=1) "+ОтборПоИсключаемымСкладам+ОтборПоПапкеНоменклатуры+"
		|"+ОтборПоОсновнымСкладамДляПеремещений+"
		|"+ДопОтборПоРозничнымПродажам+"
		|
		|ORDER BY DM_DOC.ACCEPT_DATE, DM_DOC.DM_DOC_ID, 
		|	(CASE WHEN (DM_DOC.DM_DOC_TYPE_ID=4) THEN DM_TRANSFERS.DM_TRANSFERS_ID ELSE DM_TRANSFERS.DM_LOTS_ID END) 
		|";
		
		// DM_TRANSFERS.DM_LOTS_ID
		// Была сортировка: DM_LOTS.DM_LOTS_ID
		// Еще была: DM_TRANSFERS.DM_TRANSFERS_ID
		//|   DM_TRANSFERS.TRANSFERS_R_SUM,
		//|   DM_TRANSFERS.TRANSFERS_R_NDS,
		
		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);
		
		СтарыйИдДокумента = -1;
		
		ТоварыТекущегоДокумента = Неопределено;
		
		СпиокЗагруженныхГрупповымСпособом = Новый СписокЗначений;
					
		Пока НЕ Recordset.EOF Цикл
			
			ИД_Документа = СокрЛП(Recordset.Fields("DM_DOC_ID").Value);
			Если ПустаяСтрока(ИД_Документа) Тогда
				// Неожиданная Лажа
				Recordset.MoveNext();
				Продолжить;
			КонецЕсли;	
			
			// Проверить на предмет групповой загрузки
			ЭлементСпискаЗагруженных = СпиокЗагруженныхГрупповымСпособом.НайтиПоЗначению(Recordset.Fields("DM_DOC_ID").Value);
			Если ЭлементСпискаЗагруженных = Неопределено Тогда
				Если ЕстьВГрупповойЗагрузке(Recordset.Fields("DM_DOC_ID").Value) Тогда
					СпиокЗагруженныхГрупповымСпособом.Добавить(Recordset.Fields("DM_DOC_ID").Value, "+");
					Recordset.MoveNext();
					Продолжить;
				Иначе	
					СпиокЗагруженныхГрупповымСпособом.Добавить(Recordset.Fields("DM_DOC_ID").Value, "-");
				КонецЕсли; 
			Иначе	
				Если ЭлементСпискаЗагруженных.Представление = "+" Тогда
					Recordset.MoveNext();
					Продолжить;			
				КонецЕсли; 	
			КонецЕсли; 

			 
			Если СтарыйИдДокумента <> Recordset.Fields("DM_DOC_ID").Value Тогда
				НоваяСтрока = ТаблицаДокументовОбъект.Добавить();
				НоваяСтрока.СписокДокументов1С = Новый СписокЗначений;
				НоваяСтрока.Ид_Медиалог = Recordset.Fields("DM_DOC_ID").Value;
				НоваяСтрока.ДатаДок = Recordset.Fields("DateDoc").Value;
				НоваяСтрока.Ид_Вид = Recordset.Fields("DM_DOC_TYPE_ID").Value;
				НоваяСтрока.Номер_Медиалог = Recordset.Fields("DOC_NUM").Value;
				НоваяСтрока.НомерНакладной_Медиалог = Recordset.Fields("INVOICE_NUM").Value;
				//+Молдавская А.С. 2017.07.11  задача 7683
				НоваяСтрока.ДатаНакладной_Медиалог = Recordset.Fields("INVOICE_DATE").Value;
				//-Молдавская А.С. 2017.07.11  
				//СО
				НоваяСтрока.ТипАкта = Recordset.Fields("ACT_SPISANIYA_TYPE").Value;
				НоваяСтрока.ОтделениеАкта = Recordset.Fields("ACT_SPISANIYA_DEP").Value;
				НоваяСтрока.ОтделениеАкта_Наименование = Recordset.Fields("DEP_LABEL").Value;
				//РА
				НоваяСтрока.ТипПлатежа = Recordset.Fields("FM_PAYMODE_ID").Value;
				НоваяСтрока.СуммаПоКартам = Recordset.Fields("TRAN_SUM").Value;
				
				// Контрагент
				Ид_Медиалог = Recordset.Fields("FM_ORG_ID").Value;
								
				НоваяСтрока.Ид_Контрагент = Ид_Медиалог;
				НоваяСтрока.КонтрагентИННМедиалог = Recordset.Fields("INN").Value;
				НоваяСтрока.КонтрагентНаименованиеМедиалог = Recordset.Fields("ORGLABEL").Value;
				
				РезультатПоиска = ТЗ_КэшКонтрагентовОбъект.Найти(Ид_Медиалог, "Ид_Медиалог"); 
				Если РезультатПоиска <> Неопределено Тогда
					НоваяСтрока.Контрагент = РезультатПоиска.Контрагент;						
					//НоваяСтрока.Договор = ПолучитьОсновнойДоговорКонтрагента(РезультатПоиска.Контрагент);
				ИначеЕсли НоваяСтрока.Ид_Контрагент <> NULL Тогда	
				
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Ид_Медиалог", НоваяСтрока.Ид_Контрагент);
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Рег.Контрагент КАК Контрагент,
					|	Рег.Ид КАК Ид
					|ИЗ
					|	РегистрСведений._СоответствиеКонтрагентов КАК Рег
					|ГДЕ
					|	Рег.Ид = &Ид_Медиалог
					|";
		
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаКэша = ТЗ_КэшКонтрагентовОбъект.Добавить();
						СтрокаКэша.Ид_Медиалог = НоваяСтрока.Ид_Контрагент;
						СтрокаКэша.ИННМедиалог = НоваяСтрока.КонтрагентИННМедиалог;
						СтрокаКэша.НаименованиеМедиалог = НоваяСтрока.КонтрагентНаименованиеМедиалог;
						СтрокаКэша.Контрагент = Выборка.Контрагент;	
						НоваяСтрока.Контрагент = Выборка.Контрагент;
					КонецЕсли;						
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
					НоваяСтрока.Договор = ПолучитьДоговорКонтрагента(НоваяСтрока.Контрагент);					
		        КонецЕсли;
						
				//РезультатПоиска = ТЗ_КэшКонтрагентов.Найти(Ид_Медиалог, "Ид_Медиалог"); 
				//Если РезультатПоиска <> Неопределено Тогда
				//	НоваяСтрока.Контрагент = РезультатПоиска.Контрагент;						
				//	НоваяСтрока.Договор = РезультатПоиска.Контрагент.ОсновнойДоговорКонтрагента;
				//КонецЕсли;
				// Склад
				
				Ид_Медиалог = Recordset.Fields("DM_WAREHOUSES_ID").Value;
				НоваяСтрока.Ид_Склад = Ид_Медиалог;
				НоваяСтрока.СкладНаименованиеМедиалог = Recordset.Fields("WAREHOUSESLABEL").Value;
				
				Ид_Медиалог = Recordset.Fields("DM_SOURCE_WH_ID").Value;
				НоваяСтрока.Ид_СкладКуда = Ид_Медиалог;
				НоваяСтрока.СкладКудаНаименованиеМедиалог = Recordset.Fields("WAREHOUSES1LABEL").Value;
				
				//НоваяСтрока.Документ1С
				ЗапросСоответствияДокументов = Новый Запрос;
				ЗапросСоответствияДокументов.УстановитьПараметр("Ид_Медиалог", НоваяСтрока.Ид_Медиалог);
				ЗапросСоответствияДокументов.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				|	Рег.Документ,	
				|   Рег.Ид
				|ИЗ
				|	РегистрСведений._СоответствиеДокументов КАК Рег
				|ГДЕ
				|	Рег.Ид = &Ид_Медиалог
				|";
				
				Выборка = ЗапросСоответствияДокументов.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока.СписокДокументов1С.Добавить(Выборка.Документ);
				КонецЦикла; 
				
				////ТаблицаСоответствияИД = ЗапросСоответствияДокументов.Выполнить().Выгрузить(); 
				////Если ТаблицаСоответствияИД.Количество() > 0 Тогда
				////	Если ЗначениеЗаполнено(ТаблицаСоответствияИД[0].Документ) Тогда	
				////		НоваяСтрока.Документ1С = ТаблицаСоответствияИД[0].Документ;	
				////		Если НоваяСтрока.Документ1С.Метаданные().Реквизиты.Найти("ДоговорКонтрагента")<>Неопределено Тогда
				////			НоваяСтрока.Договор = НоваяСтрока.Документ1С.ДоговорКонтрагента;
				////		КонецЕсли;	
				////	КонецЕсли;	
				////КонецЕсли;	
				
				НоваяСтрока.Товар = ПолучитьСтруктуруТаблицыТоваров();
				ТоварыТекущегоДокумента = НоваяСтрока.Товар;

				СтарыйИдДокумента = Recordset.Fields("DM_DOC_ID").Value;
			КонецЕсли; 
						
			Если ТоварыТекущегоДокумента = Неопределено Тогда
				// Это какая-то лажа
				Recordset.MoveNext();
				Продолжить;
			КонецЕсли; 
			
			НоваяСтрокаТоваров = ТоварыТекущегоДокумента.Добавить();
			
			// Номенклатура
			Ид_Медиалог = Recordset.Fields("DM_MEDS_ID").Value;
			НоваяСтрокаТоваров.Ид_Номенклатура = Ид_Медиалог;
			НоваяСтрокаТоваров.НоменклатураНаименованиеМедиалог = Recordset.Fields("LABEL").Value;
			
			//СО
			Сотр = Recordset.Fields("ACT_SPISANIYA_USER").Value;
			Если (Сотр <> NULL)И(ЗначениеЗаполнено(Сотр)) Тогда
				НоваяСтрокаТоваров.СотрудникАкта = Сотр;
				НоваяСтрокаТоваров.ФИО = СокрЛП(Recordset.Fields("NOM").Value)+ " " +СокрЛП(Recordset.Fields("PRENOM").Value);	
			КонецЕсли; 
			
			// 2011-07-20 Менять единицы пока не будем
			НоваяСтрокаТоваров.ЕИ_Ид_Медиалог = Recordset.Fields("DM_MEASURE_ID").Value;
			НоваяСтрокаТоваров.ЕИ_НаименованиеМедиалог = Recordset.Fields("MEASURELABEL").Value;
			НоваяСтрокаТоваров.ЕИ_Код_Медиалог = Recordset.Fields("MEASURECODE").Value;
				
			// Здесь - попытаемся поменять единицу измерения
			НайденнаяСтрока = ТаблицаЕдиницИзмерения.Найти(НоваяСтрокаТоваров.Ид_Номенклатура, "DM_MEDS_ID");
			Доп_Коэффициент = 1;
			Если НайденнаяСтрока = Неопределено Тогда
				// Нет альтернативных единиц
				//////НоваяСтрокаТоваров.ЕИ_Ид_Медиалог = Recordset.Fields("DM_MEASURE_ID").Value;
				//////НоваяСтрокаТоваров.ЕИ_НаименованиеМедиалог = Recordset.Fields("MEASURELABEL").Value;
				//////НоваяСтрокаТоваров.ЕИ_Код_Медиалог = Recordset.Fields("MEASURECODE").Value;
			    Доп_Коэффициент = 1;
			Иначе
				// Подмена
				//////НоваяСтрокаТоваров.ЕИ_Ид_Медиалог = НайденнаяСтрока.DM_MEASURE_ID;
				//////НоваяСтрокаТоваров.ЕИ_НаименованиеМедиалог = НайденнаяСтрока.MEASURELABEL;
				//////НоваяСтрокаТоваров.ЕИ_Код_Медиалог = НайденнаяСтрока.MEASURECODE;
                Доп_Коэффициент = НайденнаяСтрока.MEASURE_FACTOR; //-=1 НайденнаяСтрока.MEDS_MEASURE_FACTOR;
				Если Доп_Коэффициент = NULL Тогда
					Доп_Коэффициент = 1;
				ИначеЕсли Доп_Коэффициент = 0 Тогда
					Доп_Коэффициент = 1; 
				Иначе
					//Доп_Коэффициент = Число(Доп_Коэффициент);	
				КонецЕсли;	
			КонецЕсли;
			
            // Т.е все суммы, передаваемые ранее в 1с из Медиалога по списаниям, 
			// перемещениям или поступлениям товара должны умножаться на значение 
			// поля DM_TRANSFERS.MEASURE_FACTOR и если MEASURE_FACTOR = 1, то еще на количество 
			// альтернативных единиц в одной основной (MEDS_MEASURE_FACTOR).
			
			MEASURE_FACTOR = Recordset.Fields("MEASURE_FACTOR").Value;
			Если MEASURE_FACTOR = 1 Тогда
				 
			Иначе			 
				Если MEASURE_FACTOR = NULL Тогда
					MEASURE_FACTOR = 1;
				ИначеЕсли MEASURE_FACTOR = 0 Тогда
					MEASURE_FACTOR = 1;
				Иначе
					MEASURE_FACTOR = Число(MEASURE_FACTOR);	
				КонецЕсли;
				Доп_Коэффициент = MEASURE_FACTOR;
			КонецЕсли;
			
						
			НДС = ПолучитьВВидеЧисла(Recordset.Fields("NDS").Value);
			// 1-Без, 3-18, 4-10
			Если (НДС = 1)ИЛИ(НДС = 0) Тогда
				НДС = 0;
			ИначеЕсли НДС = 4 Тогда
				НДС = 10;
			Иначе
				НДС = 18;
			КонецЕсли;	
			
			
			// Определение ставки ндс
		    НДС = ПолучитьНДСвВидеЧисла(ПолучитьВВидеЧисла(Recordset.Fields("SUM_WOUT_NDS").Value),ПолучитьВВидеЧисла(Recordset.Fields("NDS_IN_MONEY").Value));
			
			НоваяСтрокаТоваров.НДС = НДС;
			

			//РезультатПоиска = ТЗ_КэшНоменклатуры.Найти(Ид_Медиалог, "Ид_Медиалог");
			//Если РезультатПоиска <> Неопределено Тогда
			//	НоваяСтрокаТоваров.Номенклатура = РезультатПоиска.Номенклатура;	
			//КонецЕсли;
			
			// Папка
			НоваяСтрокаТоваров.Папка_Ид_Медиалог = Recordset.Fields("DM_GROUPS_ID").Value;
			НоваяСтрокаТоваров.Папка_НаименованиеМедиалог = Recordset.Fields("GROUPSLABEL").Value;
			
			
			
			
			// Цена
			//НоваяСтрокаТоваров.Цена = Recordset.Fields("PRICE").Value;
			НоваяСтрокаТоваров.Цена = Recordset.Fields("SUM_WOUT_NDS").Value;
			//НоваяСтрокаТоваров.Цена = НоваяСтрокаТоваров.Цена * Доп_Коэффициент;
			// Сумма с НДС
			//НоваяСтрокаТоваров.Сумма = Recordset.Fields("SUM_NDS").Value;
			// НДС
			//НоваяСтрокаТоваров.СуммаНДС = Recordset.Fields("NDS_IN_MONEY").Value;
			// Количество
			Если MEASURE_FACTOR <> 1 Тогда  //-=1
				НоваяСтрокаТоваров.Количество = Окр(ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value) * Доп_Коэффициент,3,1);	
				//НоваяСтрокаТоваров.Цена = Окр(НоваяСтрокаТоваров.Цена / ?(Доп_Коэффициент=0,1,Доп_Коэффициент),2,1);
			Иначе
				НоваяСтрокаТоваров.Количество = Recordset.Fields("QUANTITY").Value;	
				//НоваяСтрокаТоваров.Цена = НоваяСтрокаТоваров.Цена * Доп_Коэффициент;
			КонецЕсли;	
			
			// 2011-07-11
			//////Результат.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			//////Результат.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			//////Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,5)));
			////НоваяСтрокаТоваров.Сумма = ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_SUM").Value) - ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_NDS").Value);
			////НоваяСтрокаТоваров.СуммаНДС = ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_NDS").Value);
			////НоваяСтрокаТоваров.Цена = НоваяСтрокаТоваров.Сумма / ?(НоваяСтрокаТоваров.Количество=0,1,НоваяСтрокаТоваров.Количество);
			
			// 2014-10-16
			//НоваяСтрокаТоваров.Сумма = ПолучитьВВидеЧисла(Recordset.Fields("SUM_WOUT_NDS").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value) * ПолучитьВВидеЧисла(Recordset.Fields("MEASURE_FACTOR").Value);
			//НоваяСтрокаТоваров.СуммаНДС = ПолучитьВВидеЧисла(Recordset.Fields("NDS_IN_MONEY").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value) * ПолучитьВВидеЧисла(Recordset.Fields("MEASURE_FACTOR").Value) ;
			//НоваяСтрокаТоваров.Цена = НоваяСтрокаТоваров.Сумма / ?(НоваяСтрокаТоваров.Количество=0,1,НоваяСтрокаТоваров.Количество);
			
			НоваяСтрокаТоваров.Сумма = ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_SUM").Value) - ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_NDS").Value);
			НоваяСтрокаТоваров.СуммаНДС = ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_NDS").Value);
			НоваяСтрокаТоваров.Цена = НоваяСтрокаТоваров.Сумма / ?(НоваяСтрокаТоваров.Количество=0,1,НоваяСтрокаТоваров.Количество);
			// 2014-10-16
			
			// 2011-07-13
			//////
			////// 2011-07-04
			////НоваяСтрокаТоваров.СуммаВРознице = ПолучитьВВидеЧисла(Recordset.Fields("SALE_SUM").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value);
			////НоваяСтрокаТоваров.СуммаВРозницеСНДС = ПолучитьВВидеЧисла(Recordset.Fields("SALE_SUM").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value);
			////НоваяСтрокаТоваров.СуммаВРознице = Окр(НоваяСтрокаТоваров.СуммаВРознице*100/(100 + НоваяСтрокаТоваров.НДС),2,1);
			//////////НоваяСтрокаТоваров.СуммаВРозницеСНДС = ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_R_SUM").Value);
			//////////НоваяСтрокаТоваров.СуммаВРознице = НоваяСтрокаТоваров.СуммаВРозницеСНДС - ПолучитьВВидеЧисла(Recordset.Fields("TRANSFERS_R_NDS").Value);
			 
			НоваяСтрокаТоваров.СуммаВРознице = ПолучитьВВидеЧисла(Recordset.Fields("SALE_SUM").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value) * ПолучитьВВидеЧисла(Recordset.Fields("MEASURE_FACTOR").Value);
			НоваяСтрокаТоваров.СуммаВРознице = Окр(НоваяСтрокаТоваров.СуммаВРознице*100/(100 + НоваяСтрокаТоваров.НДС),2,1);
			НоваяСтрокаТоваров.СуммаВРозницеСНДС = ПолучитьВВидеЧисла(Recordset.Fields("SALE_SUM").Value) * ПолучитьВВидеЧисла(Recordset.Fields("QUANTITY").Value) * ПолучитьВВидеЧисла(Recordset.Fields("MEASURE_FACTOR").Value);
						
			НоваяСтрокаТоваров.ЦенаВРознице = Окр(НоваяСтрокаТоваров.СуммаВРознице / ?(НоваяСтрокаТоваров.Количество=0,1,НоваяСтрокаТоваров.Количество),2,1);
			НоваяСтрокаТоваров.ЦенаВРозницеСНДС = Окр(НоваяСтрокаТоваров.СуммаВРозницеСНДС / ?(НоваяСтрокаТоваров.Количество=0,1,НоваяСтрокаТоваров.Количество),2,1);
			////НоваяСтрокаТоваров.ЦенаВРознице = ПолучитьВВидеЧисла(Recordset.Fields("SALE_SUM").Value);
			////НоваяСтрокаТоваров.СуммаВРознице = НоваяСтрокаТоваров.ЦенаВРознице * ?(НоваяСтрокаТоваров.Количество=0,1,НоваяСтрокаТоваров.Количество);
			
			//РА2
			НоваяСтрокаТоваров.DM_TRANSFERS_PAYMODE = Recordset.Fields("DM_TRANSFERS_PAYMODE").Value;
			
			НоваяСтрокаТоваров.CHECK_NUM = Recordset.Fields("CHECK_NUM").Value;
			
			Recordset.MoveNext();	   
		КонецЦикла;
		
		Recordset.Close();
		Recordset = NULL;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшКонтрагентовОбъект, "ТЗ_КэшКонтрагентов");
	
КонецПроцедуры // РазобратьДокументы()	

&НаСервере
Процедура ЗагрузкаДокументов_ЗагрузитьНаСервере()
	
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес) Тогда
		ТоварныеТаблицыОбъект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес);
		Попытка
			ТоварныеТаблицыОбъект.Очистить();
		Исключение
			ТоварныеТаблицыОбъект = ПолучитьСтруктуруТоварныхТаблиц();
		КонецПопытки;	
		ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.ТоварныеТаблицыАдрес);
	Иначе	
		ЭтаФорма.ТоварныеТаблицыАдрес=ПоместитьВоВременноеХранилище(ПолучитьСтруктуруТоварныхТаблиц(), ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
		Попытка
			ТаблицаДокументовОбъект.Очистить();	
		Исключение
			ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
		КонецПопытки;
		ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.ТаблицаДокументовАдрес);
	Иначе	
		ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
		ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);		
	КонецЕсли;
	
	
	
	ЭтаФорма.мСтекСтраниц.Очистить();
	
	рдДеревоДокументовОбъект=РеквизитФормыВЗначение("рдДеревоДокументов");
	рдДеревоДокументовОбъект.Строки.Очистить();
	ЭтаФорма.ЗначениеВРеквизитФормы(рдДеревоДокументовОбъект,"рдДеревоДокументов");
	
	////рдДеревоДокументов.Строки.Очистить();
	////рдДеревоГрупповойЗагрузки.Строки.Очистить();
	////рдДеревоДокументовРеализации.Строки.Очистить();
	////ТаблицаДокументов.Очистить();
	////ТоварныеТаблицы.Очистить();
	
	рдДеревоДокументовРеализацииОбъект = РеквизитФормыВЗначение("рдДеревоДокументовРеализации");
	рдДеревоДокументовРеализацииОбъект.Строки.Очистить();
	ЗначениеВРеквизитФормы(рдДеревоДокументовРеализацииОбъект,"рдДеревоДокументовРеализации");
	
	COMОбъектConnection = ОбработкаОбъект.ПолучитьСоединение();
	Если COMОбъектConnection = Неопределено Тогда
		Сообщить("Не удалось установить соединение");
		Возврат;
	КонецЕсли;
	
	РазобратьДокументы(COMОбъектConnection, ОбработкаОбъект);
		
	// Предварительная обработка с целью проверить возможность формирования вида документа
	
	// 1.Проверка Номенклатуры
	ЗапомнитьСтраницуВСтеке("СтраницаЗагрузкаДокументов");	
	Если НЕ	ПроверитьНоменклатуру2() Тогда	
		мСтекСтраниц.Очистить();
		ОбработкаОбъект.ЗакрытьСоединение();
		Возврат;
	КонецЕсли;
	мСтекСтраниц.Очистить();
	
	ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);
	ТоварныеТаблицыОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТоварныеТаблицыАдрес);
	
	ТЗ_КэшНоменклатурыОбъект = РеквизитФормыВЗначение("ТЗ_КэшНоменклатуры");

	СписокСкладовИсключений = ПолучитьСписокСкладовИсключений();
	
	// Проверка папок номенклатуры
	// Для дальнейшего формирования необходимо, чтобы все папки имели соответствующий вид документа
	
	ТЗ_КэшВидовДокументов = Новый ТаблицаЗначений;
	ТЗ_КэшВидовДокументов.Колонки.Добавить("Папка");
	ТЗ_КэшВидовДокументов.Колонки.Добавить("ВидДокумента");
	
	СписокПапокБезВидаДокумента = Новый СписокЗначений;
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументовОбъект Цикл
		
		// Фильтруем не участвующие в проверке
		Если СтрокаТаблицы.Ид_Вид = 1 Тогда
			//	Приход от поставщика
			Продолжить;
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 8 Тогда
			//	"Продажа в розницу"
			//РА2  Продолжить;
		ИначеЕсли (СтрокаТаблицы.Ид_Вид = 2)ИЛИ
			(СтрокаТаблицы.Ид_Вид = 7)ИЛИ
			(СтрокаТаблицы.Ид_Вид = 10)ИЛИ
			(СтрокаТаблицы.Ид_Вид = 11)
			Тогда
			//	Расход по акту списания
			//  Персонифицированная расходная накладная
			//  Массовое списание на основании оказанных услуг
			//  Персонифицированное списание на основании оказанных услуг
			// обработка этих документов одинакова
			
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 4 Тогда	
			// Перемещение между подразделениями
			
			Если СтрокаТаблицы.Ид_СкладКуда=16 Тогда
				// склад амбулаторно-поликлинического отделения
				Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл												
					// Номенклатура
					РезультатПоиска = ТЗ_КэшНоменклатурыОбъект.Найти(СтрокаТаблицыН.Ид_Номенклатура, "Ид_Медиалог"); 
					Если РезультатПоиска <> Неопределено Тогда
						СтрокаТаблицыН.Номенклатура = РезультатПоиска.Номенклатура;						
					КонецЕсли;
	            КонецЦикла;
				Продолжить;	
			ИначеЕсли СписокСкладовИсключений.НайтиПоЗначению(СтрокаТаблицы.Ид_СкладКуда) <> Неопределено Тогда
				Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл												
					// Номенклатура
					РезультатПоиска = ТЗ_КэшНоменклатурыОбъект.Найти(СтрокаТаблицыН.Ид_Номенклатура, "Ид_Медиалог"); 
					Если РезультатПоиска <> Неопределено Тогда
						СтрокаТаблицыН.Номенклатура = РезультатПоиска.Номенклатура;						
					КонецЕсли;
	            КонецЦикла;
				Продолжить;	
			КонецЕсли; 
			
		Иначе	
			Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл
												
			// Номенклатура
			РезультатПоиска = ТЗ_КэшНоменклатурыОбъект.Найти(СтрокаТаблицыН.Ид_Номенклатура, "Ид_Медиалог"); 
			Если РезультатПоиска <> Неопределено Тогда
				СтрокаТаблицыН.Номенклатура = РезультатПоиска.Номенклатура;						
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(СтрокаТаблицыН.Номенклатура) Тогда
				// Это нонсенс. Такого быть не может
				Продолжить;
			КонецЕсли;
			
			//РА2
			Если СтрокаТаблицы.Ид_Вид = 8 Тогда
				// Для продажи в розницу папки не нужны
				Продолжить;
			КонецЕсли;
			//РА2
			
			ТекПапка = СтрокаТаблицыН.Номенклатура.Родитель;
			РезультатПоискаВидаДокумента = ТЗ_КэшВидовДокументов.Найти(ТекПапка);
				
			Если РезультатПоискаВидаДокумента <> Неопределено Тогда
				
				// Все Ок
										
			Иначе
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ТекПапка", ТекПапка);
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Рег.ИмяДокумента КАК ИмяДокумента
				|
				|ИЗ
				|	РегистрСведений._СоответствиеДокументовПапкам КАК Рег
				|ГДЕ
				|	Рег.Номенклатура = &ТекПапка
				|";
					
				ВремТЗ = Запрос.Выполнить().Выгрузить();
				Если ВремТЗ.Количество()>0 Тогда
					ТекВД = СокрЛП(ВремТЗ[0].ИмяДокумента);	
					
					НовСтрока = ТЗ_КэшВидовДокументов.Добавить();
					НовСтрока.Папка = ТекПапка;
					НовСтрока.ВидДокумента = ТекВД;
								
				Иначе	
					Если СписокПапокБезВидаДокумента.НайтиПоЗначению(ТекПапка)=Неопределено Тогда
						СписокПапокБезВидаДокумента.Добавить(ТекПапка);
					КонецЕсли;	
						
				КонецЕсли;	
			КонецЕсли;	

		КонецЦикла; 
	КонецЦикла;	
	
	Если СписокПапокБезВидаДокумента.Количество()>0 Тогда
		Сч=0;
		Сообщить("Имеются папки без соответствия виду документа. Обратитесь к системному администратору");
		Пока Сч < СписокПапокБезВидаДокумента.Количество() Цикл
			Сообщить(СокрЛП(СписокПапокБезВидаДокумента[Сч].Значение));
			Сч = Сч + 1;	
		КонецЦикла;	
		
		// Дальше - не грузим
		ОбработкаОбъект.ЗакрытьСоединение();
		Возврат;
		
	КонецЕсли;
		
		
	// Теперь - нарисовать
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументовОбъект Цикл
		
		Если Объект.СкрыватьЗагруженные Тогда
			СписокДокументов1С = СтрокаТаблицы.СписокДокументов1С;
			ЕстьНеЗагруженные = Ложь;
			Если СписокДокументов1С.Количество()=0 Тогда
				ЕстьНеЗагруженные = Истина;	
			Иначе				 
				Для каждого ЭлементСписка Из СписокДокументов1С Цикл
				    Если ТипЗнч(ЭлементСписка.Значение)=Тип("Строка") Тогда
						Если СокрЛП(ЭлементСписка.Значение)<>"НеГрузить" Тогда						
							ЕстьНеЗагруженные = Истина;						
						КонецЕсли; 				
					КонецЕсли; 			
				КонецЦикла; 
			КонецЕсли;	
			Если НЕ ЕстьНеЗагруженные Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
				
		НоваяСтрока = рдДеревоДокументовОбъект.Строки.Добавить();	
		НоваяСтрока.СтрокаТаблицы = ТаблицаДокументовОбъект.Индекс(СтрокаТаблицы);
		
		Если СтрокаТаблицы.Ид_Вид = 1 Тогда		
			НоваяСтрока.Вид = "Приход от поставщика";
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 8 Тогда
			НоваяСтрока.Вид = "Продажа в розницу";	
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 2 Тогда
			НоваяСтрока.Вид = "Расход по акту списания";	
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 4 Тогда			
			НоваяСтрока.Вид = "Перемещение между подразделениями";
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 7 Тогда
			НоваяСтрока.Вид = "Персонифицированная расходная накладная";
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 10 Тогда
			НоваяСтрока.Вид = "Массовое списание на основании оказанных услуг";
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 11 Тогда
			НоваяСтрока.Вид = "Персонифицированное списание на основании оказанных услуг";	
		Иначе
			НоваяСтрока.Вид = "В разработке";	
		КонецЕсли; 
		
		//НоваяСтрока.Документ = СокрЛП(СтрокаТаблицы.Номер_Медиалог)+" от "+СокрЛП(СтрокаТаблицы.ДатаДок);
		НоваяСтрока.Документ = СокрЛП(СтрокаТаблицы.Номер_Медиалог);
		НоваяСтрока.ДатаДок = СтрокаТаблицы.ДатаДок;
		
		СписокДокументов1С = СтрокаТаблицы.СписокДокументов1С;
		
		НоваяСтрока.Контрагент = СтрокаТаблицы.Контрагент;
		НоваяСтрока.Договор = СтрокаТаблицы.Договор;
				
		// Различная обработка для документов
		Если СтрокаТаблицы.Ид_Вид = 1 Тогда	
			
			//НоваяПодСтрока = НоваяСтрока.Строки.Добавить();
			//НоваяПодСтрока.Вид = "Поступление товаров и услуг";
			ВД = "ПоступлениеТоваровУслуг";
			
			Док1С = Неопределено;
			Для каждого ЭлементСписка Из СписокДокументов1С Цикл
				Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда			
					Если ЭлементСписка.Значение.Метаданные().Имя = ВД Тогда
						Док1С = ЭлементСписка.Значение;
						Прервать;
					КонецЕсли;				
				КонецЕсли; 
			КонецЦикла;
			//НоваяПодСтрока.Документ = Док1С;
			
			НоваяСтрока.Документ1С = Док1С;
			Если Док1С = Неопределено Тогда
				НоваяСтрока.Документ1С = ВД;	
			Иначе
				НоваяСтрока.Документ1С = Док1С;	
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.Ид_Вид = 8 Тогда
			//"Продажа в розницу";
			
			//РА2
			// Формируем товарные таблицы, соответствующие видам документов
			Врем_ТЗ = Новый ТаблицаЗначений;
			Врем_ТЗ.Колонки.Добавить("ВидДокумента");
			Врем_ТЗ.Колонки.Добавить("Товар");
			
			Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл
												
				// Номенклатура
				Если Не ЗначениеЗаполнено(СтрокаТаблицыН.Номенклатура) Тогда
					// Это нонсенс. Такого быть не может
					Продолжить;
				КонецЕсли;
				
				Если СтрокаТаблицы.Ид_Склад = 4 или СтрокаТаблицы.Ид_Склад = 1000000183 или СтрокаТаблицы.Ид_Склад = 1000000263 Тогда  // Это аптечный киоск ММЦ, аптечный киоск БН, Магазин БН 
					//РА
					Если СтрокаТаблицыН.DM_TRANSFERS_PAYMODE = 2 Тогда
						ВД = "РеализацияТоваровУслуг";					
					Иначе
						ВД = "ОтчетОРозничныхПродажах";		
					КонецЕсли;	
				Иначе	
					ВД = "РеализацияТоваровУслуг";
				КонецЕсли;
										
				РезПоискаВоВремТабл = Врем_ТЗ.Найти(ВД);
				Если РезПоискаВоВремТабл = Неопределено Тогда
					РезПоискаВоВремТабл = Врем_ТЗ.Добавить();
					РезПоискаВоВремТабл.ВидДокумента = ВД;
					РезПоискаВоВремТабл.Товар = ПолучитьСтруктуруТаблицыТоваров();
				КонецЕсли; 
				
				НоваяСтрокаТоваров = РезПоискаВоВремТабл.Товар.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтрокаТаблицыН);
											
			КонецЦикла;
			
			// Отображаем их
			ЭтоПерваяСтрока = Истина;
			Для каждого СтрокаВремТаблицы Из Врем_ТЗ Цикл
				
				Если ЭтоПерваяСтрока Тогда
					ЭтоПерваяСтрока = Ложь;
					НоваяПодСтрока = НоваяСтрока;
				Иначе	
					НоваяПодСтрока = НоваяСтрока.Строки.Добавить();
				КонецЕсли; 
				
				
				//НоваяПодСтрока.Вид = СтрокаВремТаблицы.ВидДокумента;
				ВД = СтрокаВремТаблицы.ВидДокумента;
				
				Док1С = Неопределено;
				Для каждого ЭлементСписка Из СписокДокументов1С Цикл
					Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда			
						Если ЭлементСписка.Значение.Метаданные().Имя = ВД Тогда
							Док1С = ЭлементСписка.Значение;
							Прервать;
						КонецЕсли;				
					КонецЕсли; 
				КонецЦикла;
				Если Док1С = Неопределено Тогда
					НоваяПодСтрока.Документ1С = ВД;	
				Иначе
					НоваяПодСтрока.Документ1С = Док1С;	
				КонецЕсли;	
				
				НоваяСтрокаТоварнойТаблицы = ТоварныеТаблицыОбъект.Добавить();
				НоваяСтрокаТоварнойТаблицы.ВидДокумента = СтрокаВремТаблицы.ВидДокумента;
				НоваяСтрокаТоварнойТаблицы.Товар = СтрокаВремТаблицы.Товар.Скопировать();
				
				НоваяПодСтрока.СтрокаТаблицыН = ТоварныеТаблицыОбъект.Индекс(НоваяСтрокаТоварнойТаблицы);
				
			КонецЦикла; 
	        //РА2

			
			////Если СтрокаТаблицы.Ид_Склад = 4 Тогда  // Это аптечный киоск
			////	//РА
			////	Если СтрокаТаблицы.ТипПлатежа = 1 Тогда
			////		ВД = "ОтчетОРозничныхПродажах";
			////	Иначе
			////		ВД = "РеализацияТоваровУслуг";	
			////	КонецЕсли;	
			////Иначе	
			////	ВД = "РеализацияТоваровУслуг";
			////КонецЕсли;	
			////			
			////Док1С = Неопределено;
			////Для каждого ЭлементСписка Из СписокДокументов1С Цикл
			////	Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда			
			////		Если ЭлементСписка.Значение.Метаданные().Имя = ВД Тогда
			////			Док1С = ЭлементСписка.Значение;
			////			Прервать;
			////		КонецЕсли;				
			////	КонецЕсли; 
			////КонецЦикла;
			////
			////НоваяСтрока.Документ1С = Док1С;
			////Если Док1С = Неопределено Тогда
			////	НоваяСтрока.Документ1С = ВД;	
			////Иначе
			////	НоваяСтрока.Документ1С = Док1С;	
			////КонецЕсли;

		ИначеЕсли (СтрокаТаблицы.Ид_Вид = 2)ИЛИ
			(СтрокаТаблицы.Ид_Вид = 7)ИЛИ
			(СтрокаТаблицы.Ид_Вид = 10)ИЛИ
			(СтрокаТаблицы.Ид_Вид = 11) Тогда
			//	Расход по акту списания
			//  Персонифицированная расходная накладная
			//  Массовое списание на основании оказанных услуг
			//  Персонифицированное списание на основании оказанных услуг
			// обработка этих документов одинакова
			
			// Цитата: Для отражения документов по списанию Медиалога в БП нужно использовать 
			// документ «Требование-накладная» только для тех номенклатурных позиций, 
			// которые входят в папки, перемещение по которым в БП будет отражаться документом 
			// «Перемещение товаров». Для остальных номенклатурных позиций документы по 
			// списанию не загружаются.
			//
			// Соответственно: делаем подмены: «Перемещение товаров» -> «Требование-накладная»
			//									Все остальное -> "НеГрузить"
			
			//СО
			// Для "Расход по акту списания": Если тип акта списания = 3, то документ 1С - "ПередачаМатериаловВЭксплуатацию"
			ЭтоСписаниеСпецОдежды = Ложь;
			Если СтрокаТаблицы.Ид_Вид = 2 Тогда
				Если СтрокаТаблицы.ТипАкта = 3 Тогда
					ЭтоСписаниеСпецОдежды = Истина;
				КонецЕсли; 
			КонецЕсли; 
						
			// Формируем товарные таблицы, соответствующие видам документов
			Врем_ТЗ = Новый ТаблицаЗначений;
			Врем_ТЗ.Колонки.Добавить("ВидДокумента");
			Врем_ТЗ.Колонки.Добавить("Товар");
			
			Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл
												
				// Номенклатура
				Если Не ЗначениеЗаполнено(СтрокаТаблицыН.Номенклатура) Тогда
					// Это нонсенс. Такого быть не может
					Продолжить;
				КонецЕсли;
					
				ТекПапка = СтрокаТаблицыН.Номенклатура.Родитель;
				РезультатПоискаВидаДокумента = ТЗ_КэшВидовДокументов.Найти(ТекПапка);
				
				//СО
				Если ЭтоСписаниеСпецОдежды Тогда
					РезультатПоискаВидаДокумента = "ПередачаМатериаловВЭксплуатацию";
				КонецЕсли;	
				
				Если РезультатПоискаВидаДокумента = Неопределено Тогда
					// Это нонсенс. Такого быть не может
					Продолжить;
				Иначе
					
					//СО
					Если РезультатПоискаВидаДокумента = "ПередачаМатериаловВЭксплуатацию" 
						ИЛИ РезультатПоискаВидаДокумента.ВидДокумента = "ПередачаМатериаловВЭксплуатацию" Тогда
						ВД = "ПередачаМатериаловВЭксплуатацию";
					// Все Ок, делаем подмены
					ИначеЕсли РезультатПоискаВидаДокумента.ВидДокумента = "ПеремещениеТоваров" Тогда
						ВД = "ТребованиеНакладная";
					// Обработка ситуации со складами исключениями
					ИначеЕсли (СтрокаТаблицы.Ид_Вид = 2)И(
						(СтрокаТаблицы.Ид_Склад=16)ИЛИ(СписокСкладовИсключений.НайтиПоЗначению(СтрокаТаблицы.Ид_Склад) <> Неопределено)
						) Тогда
						ВД = "ТребованиеНакладная";
					Иначе	
						ВД = "НеГрузить";
					КонецЕсли; 
										
					РезПоискаВоВремТабл = Врем_ТЗ.Найти(ВД);
					Если РезПоискаВоВремТабл = Неопределено Тогда
						РезПоискаВоВремТабл = Врем_ТЗ.Добавить();
						РезПоискаВоВремТабл.ВидДокумента = ВД;
						РезПоискаВоВремТабл.Товар = ПолучитьСтруктуруТаблицыТоваров();
					КонецЕсли; 
					
					НоваяСтрокаТоваров = РезПоискаВоВремТабл.Товар.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтрокаТаблицыН);
					
				КонецЕсли;		
			КонецЦикла;
			
			// Отображаем их
			ЭтоПерваяСтрока = Истина;
			Для каждого СтрокаВремТаблицы Из Врем_ТЗ Цикл
				
				Если ЭтоПерваяСтрока Тогда
					ЭтоПерваяСтрока = Ложь;
					НоваяПодСтрока = НоваяСтрока;
				Иначе	
					НоваяПодСтрока = НоваяСтрока.Строки.Добавить();
				КонецЕсли; 
				
				
				//НоваяПодСтрока.Вид = СтрокаВремТаблицы.ВидДокумента;
				ВД = СтрокаВремТаблицы.ВидДокумента;
				
				Док1С = Неопределено;
				Для каждого ЭлементСписка Из СписокДокументов1С Цикл
					Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда			
						Если ЭлементСписка.Значение.Метаданные().Имя = ВД Тогда
							Док1С = ЭлементСписка.Значение;
							Прервать;
						КонецЕсли;				
					КонецЕсли; 
				КонецЦикла;
				Если Док1С = Неопределено Тогда
					НоваяПодСтрока.Документ1С = ВД;	
				Иначе
					НоваяПодСтрока.Документ1С = Док1С;	
				КонецЕсли;	
				
				НоваяСтрокаТоварнойТаблицы = ТоварныеТаблицыОбъект.Добавить();
				НоваяСтрокаТоварнойТаблицы.ВидДокумента = СтрокаВремТаблицы.ВидДокумента;
				НоваяСтрокаТоварнойТаблицы.Товар = СтрокаВремТаблицы.Товар.Скопировать();
				
				НоваяПодСтрока.СтрокаТаблицыН = ТоварныеТаблицыОбъект.Индекс(НоваяСтрокаТоварнойТаблицы);
				
			КонецЦикла; 


		ИначеЕсли СтрокаТаблицы.Ид_Вид = 4 Тогда
			
			// Формируем товарные таблицы, соответствующие видам документов
			
			Врем_ТЗ = Новый ТаблицаЗначений;
			Врем_ТЗ.Колонки.Добавить("ВидДокумента");
			Врем_ТЗ.Колонки.Добавить("Товар");
			
			Для каждого СтрокаТаблицыН ИЗ СтрокаТаблицы.Товар Цикл
												
				// Номенклатура
				Если Не ЗначениеЗаполнено(СтрокаТаблицыН.Номенклатура) Тогда
					// Это нонсенс. Такого быть не может
					Продолжить;
				КонецЕсли;
									
				Если (СтрокаТаблицы.Ид_СкладКуда=16) 
					// склад амбулаторно-поликлинического отделения
					ИЛИ(СписокСкладовИсключений.НайтиПоЗначению(СтрокаТаблицы.Ид_СкладКуда) <> Неопределено)
					Тогда
					
					РезПоискаВоВремТабл = Врем_ТЗ.Найти("ПеремещениеТоваров");
					Если РезПоискаВоВремТабл = Неопределено Тогда
						РезПоискаВоВремТабл = Врем_ТЗ.Добавить();
						РезПоискаВоВремТабл.ВидДокумента = "ПеремещениеТоваров";
						РезПоискаВоВремТабл.Товар = ПолучитьСтруктуруТаблицыТоваров();
					КонецЕсли; 
						
					НоваяСтрокаТоваров = РезПоискаВоВремТабл.Товар.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтрокаТаблицыН);
				
				Иначе
						
					ТекПапка = СтрокаТаблицыН.Номенклатура.Родитель;
					РезультатПоискаВидаДокумента = ТЗ_КэшВидовДокументов.Найти(ТекПапка);
					
					Если РезультатПоискаВидаДокумента = Неопределено Тогда
						// Это нонсенс. Такого быть не может
						Продолжить;
					Иначе
						
						// Все Ок
						РезПоискаВоВремТабл = Врем_ТЗ.Найти(РезультатПоискаВидаДокумента.ВидДокумента);
						Если РезПоискаВоВремТабл = Неопределено Тогда
							РезПоискаВоВремТабл = Врем_ТЗ.Добавить();
							РезПоискаВоВремТабл.ВидДокумента = РезультатПоискаВидаДокумента.ВидДокумента;
							РезПоискаВоВремТабл.Товар = ПолучитьСтруктуруТаблицыТоваров();
						КонецЕсли; 
						
						НоваяСтрокаТоваров = РезПоискаВоВремТабл.Товар.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтрокаТаблицыН);
						
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			// Отображаем их
			ЭтоПерваяСтрока = Истина;
			Для каждого СтрокаВремТаблицы Из Врем_ТЗ Цикл
				
				Если ЭтоПерваяСтрока Тогда
					ЭтоПерваяСтрока = Ложь;
					НоваяПодСтрока = НоваяСтрока;
				Иначе	
					НоваяПодСтрока = НоваяСтрока.Строки.Добавить();
				КонецЕсли; 
				
				
				//НоваяПодСтрока.Вид = СтрокаВремТаблицы.ВидДокумента;
				ВД = СтрокаВремТаблицы.ВидДокумента;
				
				Док1С = Неопределено;
				Для каждого ЭлементСписка Из СписокДокументов1С Цикл
					Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда			
						Если ЭлементСписка.Значение.Метаданные().Имя = ВД Тогда
							Док1С = ЭлементСписка.Значение;
							Прервать;
						КонецЕсли;				
					КонецЕсли; 
				КонецЦикла;
				Если Док1С = Неопределено Тогда
					НоваяПодСтрока.Документ1С = ВД;	
				Иначе
					НоваяПодСтрока.Документ1С = Док1С;	
				КонецЕсли;	
				

				НоваяСтрокаТоварнойТаблицы = ТоварныеТаблицыОбъект.Добавить();
				НоваяСтрокаТоварнойТаблицы.ВидДокумента = СтрокаВремТаблицы.ВидДокумента;
				НоваяСтрокаТоварнойТаблицы.Товар = СтрокаВремТаблицы.Товар.Скопировать();
				
				НоваяПодСтрока.СтрокаТаблицыН = ТоварныеТаблицыОбъект.Индекс(НоваяСтрокаТоварнойТаблицы);
				
			КонецЦикла; 
			
		Иначе
			НоваяСтрока.Вид = "В разработке";	
		КонецЕсли;
		
	////	ЭлементыФормы.рдДеревоДокументов.Развернуть(НоваяСтрока, Истина);
			
	КонецЦикла; 
		
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗ_КэшНоменклатурыОбъект, "ТЗ_КэшНоменклатуры"); 
	
	ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);

	ЭтаФорма.ТоварныеТаблицыАдрес=ПоместитьВоВременноеХранилище(ТоварныеТаблицыОбъект, ЭтаФорма.УникальныйИдентификатор);
	
	ЭтаФорма.ЗначениеВРеквизитФормы(рдДеревоДокументовОбъект,"рдДеревоДокументов");
	
	ОбработкаОбъект.ЗакрытьСоединение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДокументов_Загрузить(Команда)
	
	ЗагрузкаДокументов_ЗагрузитьНаСервере();
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтрагентовНаСервере()
	
	ТЗКонтрагентовОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗКонтрагентов");
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
		Попытка
		
			Если ТипЗнч(ТаблицаДокументовОбъект)<>("ТаблицаЗначений") Тогда		
				ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();			
			КонецЕсли; 
			
		Исключение
			ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
		КонецПопытки;
		ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.ТаблицаДокументовАдрес);
	Иначе	
		ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
		ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);		
	КонецЕсли;
	
	рдДеревоДокументовОбъект=РеквизитФормыВЗначение("рдДеревоДокументов");
	
	Для каждого СтрокаТЗ из ТЗКонтрагентовОбъект Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(СтрокаТЗ.КодМедиалог)="" Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыСведений._СоответствиеКонтрагентов.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Контрагент.Установить(СтрокаТЗ.Контрагент);
		НаборЗаписей.Отбор.Ид.Установить(СтрокаТЗ.КодМедиалог);

		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Контрагент = СтрокаТЗ.Контрагент;
		НоваяЗапись.Ид = СтрокаТЗ.КодМедиалог;		
		НаборЗаписей.Записать(Истина);
		
		// Обновить ТаблицаДокументов
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументовОбъект Цикл
			
			Если СтрокаТаблицыДокументов.Ид_Контрагент <> СтрокаТЗ.КодМедиалог Тогда
				Продолжить;
			КонецЕсли;	
				
			СтрокаТаблицыДокументов.Контрагент = СтрокаТЗ.Контрагент;	
			//СтрокаТаблицыДокументов.Договор = ПолучитьДоговорКонтрагента(СтрокаТЗ.Контрагент);	
		КонецЦикла;	
		
		// Обновить рдДеревоДокументов
		Если ТаблицаДокументовОбъект.Количество()>0 Тогда
			 
			Для каждого СтрокаТаблицы из рдДеревоДокументовОбъект.Строки Цикл
				
				СтрокаТаблицыДокументов = ТаблицаДокументовОбъект[СтрокаТаблицы.СтрокаТаблицы];
				Если СтрокаТаблицыДокументов.Ид_Контрагент <> СтрокаТЗ.КодМедиалог Тогда
					Продолжить;
				КонецЕсли;	
					
				СтрокаТаблицы.Контрагент = СтрокаТЗ.Контрагент;	
				//СтрокаТаблицы.Договор = ПолучитьДоговорКонтрагента(СтрокаТЗ.Контрагент);	
			КонецЦикла;
			
		КонецЕсли;	
		
		//////////// Обновить ТаблицаДокументовРеализации
		//////////Для каждого СтрокаТаблицыДокументов из ТаблицаДокументовРеализации Цикл
		//////////	
		//////////	Если СтрокаТаблицыДокументов.Ид_Контрагент <> СтрокаТЗ.КодМедиалог Тогда
		//////////		Продолжить;
		//////////	КонецЕсли;	
		//////////		
		//////////	СтрокаТаблицыДокументов.Контрагент = СтрокаТЗ.Контрагент;	
		//////////	//СтрокаТаблицыДокументов.Договор = ПолучитьДоговорКонтрагента(СтрокаТЗ.Контрагент);	
		//////////КонецЦикла;
		//////////
		//////////// Обновить рдДеревоДокументовРеализации
		//////////Для каждого СтрокаТаблицы из рдДеревоДокументовРеализации.Строки Цикл
		//////////	
		//////////	СтрокаТаблицыДокументов = ТаблицаДокументовРеализации[СтрокаТаблицы.СтрокаТаблицы];
		//////////	Если СтрокаТаблицыДокументов.Ид_Контрагент <> СтрокаТЗ.КодМедиалог Тогда
		//////////		Продолжить;
		//////////	КонецЕсли;	
		//////////		
		//////////	СтрокаТаблицы.Контрагент = СтрокаТЗ.Контрагент;	
		//////////	//СтрокаТаблицы.Договор = ПолучитьДоговорКонтрагента(СтрокаТЗ.Контрагент);	
		//////////КонецЦикла;
		
	КонецЦикла;
	
	ТЗКонтрагентовОбъект.Очистить();
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗКонтрагентовОбъект, "ТЗКонтрагентов");
	ЭтаФорма.ЗначениеВРеквизитФормы(рдДеревоДокументовОбъект, "рдДеревоДокументов");
	ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);
	
	ТЗ_КэшКонтрагентов.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКонтрагентов(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьКонтрагентовЗавершение", ЭтаФорма), "Таблица соответствия будет записана. Подтвердите?", РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКонтрагентовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НеПродолжать = РезультатВопроса <> КодВозвратаДиалога.Да;  
    Если НеПродолжать Тогда
        Возврат;
    КонецЕсли;
     
    ЗаписатьКонтрагентовНаСервере();
	
	ВернутьсяНаСтраницу();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьСпособыАмортизацииНаСервере()
	
	ТЗСпособовАмортизацииОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗСпособовАмортизации");
	
	Для каждого СтрокаТЗ из ТЗСпособовАмортизацииОбъект Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.СпособОтраженияРасходов) Тогда
			Продолжить;
		КонецЕсли;
				
		НаборЗаписей = РегистрыСведений._СоответствиеСкладовСпособамОтраженияАмортизации.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Склад.Установить(СтрокаТЗ.Склад);
		//НаборЗаписей.Отбор.Ид.Установить(СтрокаТЗ.КодМедиалог);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Склад = СтрокаТЗ.Склад;
		НоваяЗапись.СпособОтраженияАмортизации = СтрокаТЗ.СпособОтраженияРасходов;		
		НаборЗаписей.Записать(Истина);
						
	КонецЦикла;
	
	ТЗСпособовАмортизацииОбъект.Очистить();
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗСпособовАмортизацииОбъект, "ТЗСпособовАмортизации");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСпособыАмортизации(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьСпособыАмортизацииЗавершение", ЭтаФорма), "Таблица соответствия будет записана. Подтвердите?", РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСпособыАмортизацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НеПродолжать = РезультатВопроса <> КодВозвратаДиалога.Да;  
    Если НеПродолжать Тогда
        Возврат;
    КонецЕсли;
    
    ЗаписатьСпособыАмортизацииНаСервере();
	
	ВернутьсяНаСтраницу();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьФизЛицНаСервере()
	
	ТЗФизЛицОбъект = ЭтаФорма.РеквизитФормыВЗначение("ТЗФизЛиц");
	
	Для каждого СтрокаТЗ из ТЗФизЛицОбъект Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ФизЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(СтрокаТЗ.КодМедиалог)="" Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыСведений._СоответствиеФизЛиц.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.ФизЛицо.Установить(СтрокаТЗ.ФизЛицо);
		//НаборЗаписей.Отбор.Ид.Установить(СтрокаТЗ.КодМедиалог);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ФизЛицо = СтрокаТЗ.ФизЛицо;
		НоваяЗапись.Ид = СтрокаТЗ.КодМедиалог;		
		НаборЗаписей.Записать(Истина);
		
		// Обновлять ТаблицаДокументов НЕ БУДЕМ
		//////Для каждого СтрокаТаблицыДокументов из ТаблицаДокументовРеализации Цикл	
		//////	Для каждого СтрокаУ Из СтрокаТаблицыДокументов.Услуги Цикл
		//////		Если СтрокаУ.ИдОтделения <> СтрокаТЗ.КодМедиалог Тогда
		//////			Продолжить;			
		//////		КонецЕсли; 	
		//////		СтрокаУ.Номенклатура = СтрокаТЗ.Номенклатура;
		//////	КонецЦикла;			
		//////КонецЦикла;	
				
	КонецЦикла;
	
	ТЗФизЛицОбъект.Очистить();
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТЗФизЛицОбъект,"ТЗФизЛиц");		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФизЛиц(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьФизЛицЗавершение", ЭтаФорма), "Таблица соответствия будет записана. Подтвердите?", РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФизЛицЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НеПродолжать = РезультатВопроса <> КодВозвратаДиалога.Да;  
    Если НеПродолжать Тогда
        Возврат;
    КонецЕсли;
    
    ЗаписатьФизЛицНаСервере();
	
	ВернутьсяНаСтраницу();
    
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруТаблицыУслугДляТалонов()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("ИдОтделения");
	Результат.Колонки.Добавить("ОтделениеНаименованиеМедиалог");
	//
	Результат.Колонки.Добавить("НомерТалона");
	Результат.Колонки.Добавить("ДатаТалона");
		
	Результат.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0)));
	Результат.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	//Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,5)));
	
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтруктуруТаблицыУслугДляТалонов()

&НаСервере
Функция ПолучитьВыборкуДоговоровКонтрагентовСПоставщиком()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Контрагенты.Ссылка КАК Контрагент,
	|	РегистрСведенийОсновныеДоговорыКонтрагента.Договор КАК Договор,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ОсновныеДоговоры
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	| 	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК РегистрСведенийОсновныеДоговорыКонтрагента
	|	ПО Контрагенты.Ссылка = РегистрСведенийОсновныеДоговорыКонтрагента.Контрагент
	|ГДЕ
	|	РегистрСведенийОсновныеДоговорыКонтрагента.Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	2 КАК Приоритет
	|ПОМЕСТИТЬ НеОсновныеДоговоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОсновныеДоговоры КАК ОсновныеДоговоры
	|		ПО (ОсновныеДоговоры.Договор = ДоговорыКонтрагентов.Ссылка)
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|	И ОсновныеДоговоры.Договор ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ОсновныеДоговоры.Контрагент,
	|	ОсновныеДоговоры.Договор,
	|	ОсновныеДоговоры.Приоритет
	|ИЗ
	|	ОсновныеДоговоры КАК ОсновныеДоговоры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ  
	|	НеОсновныеДоговоры.Контрагент,
	|	НеОсновныеДоговоры.Договор,
	|	НеОсновныеДоговоры.Приоритет
	|ИЗ
	|	НеОсновныеДоговоры КАК НеОсновныеДоговоры";
	
	Возврат Запрос.Выполнить().Выбрать();
		
КонецФункции

&НаСервере
Процедура РазобратьДокументыПоРеализации_Талоны(COMОбъектConnection)
	
	ТаблицаДокументовРеализацииОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес);
	
	ТЗ_КэшКонтрагентовОбъект = РеквизитФормыВЗначение("ТЗ_КэшКонтрагентов");
	ТЗ_КэшПодразделениеНоменклатураОбъект = РеквизитФормыВЗначение("ТЗ_КэшПодразделениеНоменклатура");
	
	ВыборкаДоговорыКонтрагентовСПоставщиком = ПолучитьВыборкуДоговоровКонтрагентовСПоставщиком();
	
	ТекОрг = ЭтаФорма.Организация1; //ПолучитьИДтекОрганизации();  //-=Орг
	Если ТекОрг=0 Тогда
		Сообщить("Не определена организация",60);
		Возврат;	
	КонецЕсли;
	ТекстОтбораПоОрганизации = "ISNULL(FM_DEP.MAIN_ORG_ID,1)="+Формат(ТекОрг,"ЧГ=");  // Все бесхозные талоны будут валиться на организацию 1
	//Исключаем ММЦ СОГАЗ 361
	Если ТекОрг = 1 Тогда
		ТекстОтбораПоОрганизации = ТекстОтбораПоОрганизации + "AND ISNULL(FM_ORG.FM_ORG_ID,0) not in (361)";
	КонецЕсли;
	//-=Орг
	
	Попытка
		// Определим налоговые ставки
		Recordset = Новый COMОбъект("ADODB.Recordset");
		Recordset.Open("FM_TAXE_DET",COMОбъектConnection,0,1);
		
		ТЗСтавок = Новый ТаблицаЗначений;
		ТЗСтавок.Колонки.Добавить("Д");
		ТЗСтавок.Колонки.Добавить("Ид");
		ТЗСтавок.Колонки.Добавить("ИдПер");
		//ТЗСтавок.Колонки.Добавить("Ставка");
		
		Пока НЕ Recordset.EOF Цикл
			Ид = Recordset.Fields("FM_TAXE_ID").Value;
			
			РезультатПоиска = ТЗСтавок.Найти(Ид, "Ид");
			Если РезультатПоиска = Неопределено Тогда
				НоваяСтрока = ТЗСтавок.Добавить();
				НоваяСтрока.Д = Recordset.Fields("DATE_FROM").Value;
				НоваяСтрока.Ид = Ид;
				НоваяСтрока.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
			Иначе
				Если РезультатПоиска.Д < Recordset.Fields("DATE_FROM").Value Тогда
					РезультатПоиска.Д = Recordset.Fields("DATE_FROM").Value;
					РезультатПоиска.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
				КонецЕсли; 
			КонецЕсли; 
			
			Recordset.MoveNext();
		КонецЦикла;
		Recordset.Close();
		Recordset = NULL;
		
		ФильтрПоНДС = "";
		Для каждого СтрокаТаблицы Из ТЗСтавок Цикл
			ФильтрПоНДС = ФильтрПоНДС + ?(ПустаяСтрока(ФильтрПоНДС),"",", ")+Формат(СтрокаТаблицы.ИдПер,"ЧГ=");		
		КонецЦикла; 
		
		//
		
		Recordset = Новый COMОбъект("ADODB.Recordset");	
		
		//% - 2 вставки: поля, 2 левое соединение 
		ТекстЗапроса = "SELECT
		|	ISNULL(FM_BILLDET_PAY_.KRN_CREATE_DATE, FM_BILL.BILL_DATE) AS BILL_DATE,
		|   ISNULL(FM_BILLDET_PAY_.PRICE, 0) AS PRICE_TO_PAY,
		|	ISNULL(ISNULL(FM_BILLDET_PAY_.PRICE, 0) * (ISNULL(FM_TAXE_DET.TAXE_PERC,0)/(ISNULL(FM_TAXE_DET.TAXE_PERC,0)+100))  ,0) AS SUM_NDS,
		|	FM_DEP.FM_DEP_ID,
		|   FM_DEP.CODE AS DEP_CODE,
		|   FM_DEP.LABEL AS DEP_LABEL,
		|	FM_ORG.FM_ORG_ID,
		|   FM_ORG.CODE AS ORG_CODE,
		|   FM_ORG.INN,
		|	FM_ORG.LABEL AS ORG_LABEL,
		|   FM_CLINK.FM_CLINK_ID,
		|	ISNULL(FM_TAXE_DET.TAXE_PERC, 0) AS TAXE_PERC,
		|   ISNULL(FM_BILLDET_PAY_.PRICE,0) AS PAYED_PRICE,
		|   ISNULL(SUBQUERY.PRICE,0) AS TOTAL_PRICE,
		|	FM_BILL.BILL_NUM
		|FROM
		|	FM_BILL  WITH (NOLOCK)
		|
		|LEFT JOIN FM_BILLDET  WITH (NOLOCK)
		|ON (FM_BILL.FM_BILL_ID = FM_BILLDET.FM_BILL_ID)AND(FM_BILLDET.DONE = 1)AND(FM_BILLDET.CANCEL = 0)
		|
		|LEFT JOIN FM_DEP  WITH (NOLOCK)
		|ON FM_BILL.FM_DEP_ID = FM_DEP.FM_DEP_ID
		|
		|LEFT JOIN FM_CLINK  WITH (NOLOCK)
		|ON FM_BILLDET.FM_CLINK_ID = FM_CLINK.FM_CLINK_ID
		|
		|LEFT JOIN FM_CONTR  WITH (NOLOCK)
		|ON	FM_CONTR.FM_CONTR_ID = FM_CLINK.FM_CONTR_ID
		|
		|LEFT JOIN FM_ORG  WITH (NOLOCK)
		|ON FM_ORG.FM_ORG_ID = FM_CONTR.FM_ORG1_ID
		|
		|LEFT JOIN FM_SERV  WITH (NOLOCK)
		|ON FM_BILLDET.FM_SERV_ID = FM_SERV.FM_SERV_ID
		|
		|LEFT JOIN FM_TAXE_DET  WITH (NOLOCK)
		|ON FM_SERV.FM_TAXE_ID = FM_TAXE_DET.FM_TAXE_ID
		|
		|LEFT JOIN 
		|	(SELECT 
		|   	SUBTABLE1.PRICE, 
		|       SUBTABLE1.FM_BILLDET_ID,
		|		SUBTABLE1.FM_ORG_ID,
		|       SUBTABLE2.KRN_CREATE_DATE
		|	FROM FM_BILLDET_PAY AS SUBTABLE1 WITH (NOLOCK)
		|		LEFT JOIN
		|       (SELECT S1.FM_BILLDET_PAY_ID,
		|			S1.FM_BILLDET_ID,
		|			S1.KRN_CREATE_DATE
		|       	FROM FM_BILLDET_PAY AS S1  WITH (NOLOCK)
		|           INNER JOIN
		|           	FM_BILLDET_PAY AS S2  WITH (NOLOCK)
		|           ON
		|           	(S1.FM_BILLDET_ID=S2.FM_BILLDET_ID)AND(S2.IS_STORNO=1)AND(S1.FM_BILLDET_PAY_ID<>S2.FM_BILLDET_PAY_ID)AND(ISNULL(S1.MAIN_BILLDET_PAY_ID,0)<>0)
		|       	
		|
		|
		|       ) AS SUBTABLE2
		|       ON SUBTABLE1.FM_BILLDET_ID = SUBTABLE2.FM_BILLDET_ID
		|
		|	WHERE (ISNULL(SUBTABLE1.IS_STORNO,0) = 0)
		|
		|	) AS FM_BILLDET_PAY_
		|ON (FM_BILLDET.FM_BILLDET_ID = FM_BILLDET_PAY_.FM_BILLDET_ID)
		|
		|LEFT JOIN  
		|	(SELECT
		|    	SUBTABLE.FM_BILLDET_ID,
		|		SUBTABLE.IS_STORNO AS IS_STORNO,
		|		SUM(SUBTABLE.PRICE) AS PRICE
		|		FROM FM_BILLDET_PAY AS SUBTABLE  WITH (NOLOCK)
		|		WHERE (ISNULL(SUBTABLE.IS_STORNO,0) = 0)
		|
		|		GROUP BY SUBTABLE.FM_BILLDET_ID, SUBTABLE.IS_STORNO
		|	)AS SUBQUERY
        |ON (FM_BILLDET.FM_BILLDET_ID = SUBQUERY.FM_BILLDET_ID) 
		|
		|WHERE (ISNULL(FM_BILLDET_PAY_.KRN_CREATE_DATE, FM_BILL.BILL_DATE) >= '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"')AND(ISNULL(FM_BILLDET_PAY_.KRN_CREATE_DATE, FM_BILL.BILL_DATE) <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')
		|AND ( 
		|    (ISNULL(FM_BILLDET_PAY_.FM_ORG_ID,0)<>0)AND
		|
		|    
		|    (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'ФизЛица')
		|	)
		|AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>5000)AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>8970)
		|AND (ISNULL(FM_TAXE_DET.FM_TAXE_DET_ID,1) IN ("+ФильтрПоНДС+"))
		|AND("+ТекстОтбораПоОрганизации+")
		|ORDER BY
		|	FM_ORG.FM_ORG_ID, FM_DEP.FM_DEP_ID, ISNULL(FM_TAXE_DET.TAXE_PERC, 0), ISNULL(FM_BILLDET_PAY_.KRN_CREATE_DATE, FM_BILL.BILL_DATE)
		|";
		// FM_BILLDET.FM_SERV_ID=5000 это авансовый платеж 	
		// FM_BILLDET.FM_SERV_ID=8970 это предоплата
		 
		
		// 2011-06-01 Сторно:
		//
		////AND
		////|       (NOT SUBTABLE1.FM_BILLDET_PAY_ID IN
		////|       	(SELECT S1_.FM_BILLDET_PAY_ID
		////|       	FROM FM_BILLDET_PAY AS S1_
		////|           INNER JOIN
		////|           	FM_BILLDET_PAY AS S2_
		////|           ON
		////|           	(S1_.FM_BILLDET_ID=S2_.FM_BILLDET_ID)AND(S2_.IS_STORNO=1)AND(S1_.FM_BILLDET_PAY_ID<>S2_.FM_BILLDET_PAY_ID)AND(ISNULL(S1_.MAIN_BILLDET_PAY_ID,0)<>0)
		////|       	)
		////|       )
		//
		////AND
		////|       (NOT SUBTABLE.FM_BILLDET_PAY_ID IN
		////|       	(SELECT S1.FM_BILLDET_PAY_ID
		////|       	FROM FM_BILLDET_PAY AS S1
		////|           INNER JOIN
		////|           	FM_BILLDET_PAY AS S2
		////|           ON
		////|           	(S1.FM_BILLDET_ID=S2.FM_BILLDET_ID)AND(S2.IS_STORNO=1)AND(S1.FM_BILLDET_PAY_ID<>S2.FM_BILLDET_PAY_ID)AND(ISNULL(S1.MAIN_BILLDET_PAY_ID,0)<>0)
		////|       	)
		////|       )
		
						
		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);
		
		
		СтарыйИдКонтрагента = "";
		СтарыйИдОтдела = "";
		СтараяСтавкаНДС = "";
		
		НоваяСтрока = "";
		
		СуммаЗаДень = 0;
		
		Пока НЕ Recordset.EOF Цикл
						
			Если СтарыйИдКонтрагента <> Recordset.Fields("FM_ORG_ID").Value Тогда
				
				СуммаЗаДень = 0;
				
				НоваяСтрока = ТаблицаДокументовРеализацииОбъект.Добавить();
				НоваяСтрока.ДатаДок = НачалоДня(Объект.ДатаКон);
				НоваяСтрока.Ид_Контрагент = Recordset.Fields("FM_ORG_ID").Value;
				НоваяСтрока.КонтрагентИННМедиалог = Recordset.Fields("INN").Value;
				НоваяСтрока.КонтрагентНаименованиеМедиалог = Recordset.Fields("ORG_LABEL").Value;
				
				РезультатПоиска = ТЗ_КэшКонтрагентовОбъект.Найти(НоваяСтрока.Ид_Контрагент, "Ид_Медиалог"); 
				Если РезультатПоиска <> Неопределено Тогда
					НоваяСтрока.Контрагент = РезультатПоиска.Контрагент;						
				Иначе	
				
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Ид_Медиалог", НоваяСтрока.Ид_Контрагент);
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Рег.Контрагент КАК Контрагент,
					|	Рег.Ид КАК Ид
					|ИЗ
					|	РегистрСведений._СоответствиеКонтрагентов КАК Рег
					|ГДЕ
					|	Рег.Ид = &Ид_Медиалог
					|";
		
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаКэша = ТЗ_КэшКонтрагентовОбъект.Добавить();
						СтрокаКэша.Ид_Медиалог = НоваяСтрока.Ид_Контрагент;
						СтрокаКэша.ИННМедиалог = НоваяСтрока.КонтрагентИННМедиалог;
						СтрокаКэша.НаименованиеМедиалог = НоваяСтрока.КонтрагентНаименованиеМедиалог;
						СтрокаКэша.Контрагент = Выборка.Контрагент;	
						НоваяСтрока.Контрагент = Выборка.Контрагент;
					КонецЕсли;						
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
					ВыборкаДоговорыКонтрагентовСПоставщиком.Сбросить();
					Если ВыборкаДоговорыКонтрагентовСПоставщиком.НайтиСледующий(НоваяСтрока.Контрагент, "Контрагент") Тогда
						НоваяСтрока.Договор = ВыборкаДоговорыКонтрагентовСПоставщиком.Договор;
					Иначе 
						НоваяСтрока.Договор = Неопределено;
					КонецЕсли;
				КонецЕсли;
				//
				Если ЭтаФорма.ЭтоБазаПроф Тогда
					НоваяСтрока.ИдОрганизации=ЭтаФорма.Организация1;
				КонецЕсли; 
				
				
				НоваяСтрока.Услуги = ПолучитьСтруктуруТаблицыУслугДляТалонов();

				СтарыйИдКонтрагента = Recordset.Fields("FM_ORG_ID").Value;
				
				СтарыйИдОтдела = "";
				СтараяСтавкаНДС = "";
				
			КонецЕсли;
			
			Если НоваяСтрока = "" Тогда
				Recordset.MoveNext();
				Продолжить;			
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
				ВыборкаДоговорыКонтрагентовСПоставщиком.Сбросить();
				Если ВыборкаДоговорыКонтрагентовСПоставщиком.НайтиСледующий(НоваяСтрока.Контрагент, "Контрагент") Тогда
					НоваяСтрока.Договор = ВыборкаДоговорыКонтрагентовСПоставщиком.Договор;
				Иначе 
					НоваяСтрока.Договор = Неопределено;
				КонецЕсли					
			КонецЕсли;
			
			//%
			// Вычисление коэффициента оплаты
			////Заплачено = Recordset.Fields("PAYED_PRICE").Value;
			////ОбщЦена =  Recordset.Fields("TOTAL_PRICE").Value;
			////КоэфОплаты = 1;
			////Если ОбщЦена <> 0 Тогда
			////	КоэфОплаты = Заплачено / ОбщЦена;
			////КонецЕсли; 
			
			//Сообщить("Коэф "+КоэфОплаты);
			
			Если (СтарыйИдОтдела <> Recordset.Fields("FM_DEP_ID").Value)ИЛИ
				(СтараяСтавкаНДС <> Recordset.Fields("TAXE_PERC").Value) Тогда
				
				//!!! Заглушка
				//Если СокрЛП(Recordset.Fields("DEP_LABEL").Value)="" Тогда
				//	Recordset.MoveNext();
				//	Продолжить;			
				//КонецЕсли; 
				//!!! Заглушка
				
				НоваяСтрокаУслуг = НоваяСтрока.Услуги.Добавить();
				
				НоваяСтрокаУслуг.ИдОтделения = Recordset.Fields("FM_DEP_ID").Value; 
				НоваяСтрокаУслуг.ОтделениеНаименованиеМедиалог = Recordset.Fields("DEP_LABEL").Value;
				НоваяСтрокаУслуг.СтавкаНДС = Recordset.Fields("TAXE_PERC").Value;
				
				НоваяСтрокаУслуг.Сумма = Recordset.Fields("PRICE_TO_PAY").Value;   
				НоваяСтрокаУслуг.СуммаНДС = Recordset.Fields("SUM_NDS").Value;     
				
			    СтарыйИдОтдела = Recordset.Fields("FM_DEP_ID").Value;
				СтараяСтавкаНДС = Recordset.Fields("TAXE_PERC").Value;
				
				// Поиск Номенклатуры
				РезультатПоиска = ТЗ_КэшПодразделениеНоменклатураОбъект.Найти(НоваяСтрокаУслуг.ИдОтделения, "Ид_Медиалог"); 
				Если РезультатПоиска <> Неопределено Тогда
					НоваяСтрокаУслуг.Номенклатура = РезультатПоиска.Номенклатура;						
				Иначе	
				
					Запрос = Новый Запрос;
                    Запрос.УстановитьПараметр("Ид_Медиалог", НоваяСтрокаУслуг.ИдОтделения);
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Рег.Номенклатура КАК Номенклатура
					|ИЗ
					|	РегистрСведений._СоответствиеПодразделенийНоменклатуре КАК Рег
					|ГДЕ
					|	Рег.Ид = &Ид_Медиалог
					|";
		
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаКэша = ТЗ_КэшПодразделениеНоменклатураОбъект.Добавить();
						СтрокаКэша.Ид_Медиалог = НоваяСтрокаУслуг.ИдОтделения;
						СтрокаКэша.НаименованиеМедиалог = НоваяСтрокаУслуг.ОтделениеНаименованиеМедиалог;
						СтрокаКэша.Номенклатура = Выборка.Номенклатура;	
						НоваяСтрокаУслуг.Номенклатура = Выборка.Номенклатура;
					КонецЕсли;						
				КонецЕсли;
				
 			Иначе	
				НоваяСтрокаУслуг.Сумма = НоваяСтрокаУслуг.Сумма + Recordset.Fields("PRICE_TO_PAY").Value; 
				НоваяСтрокаУслуг.СуммаНДС = НоваяСтрокаУслуг.СуммаНДС + Recordset.Fields("SUM_NDS").Value; 
			КонецЕсли; 
			
			Если Объект.СообщатьНомерТалона Тогда
			    СуммаЗаДень = СуммаЗаДень + НоваяСтрокаУслуг.Сумма;
				Сообщить("Номер талона "+Формат(Recordset.Fields("BILL_NUM").Value,"ЧГ=")+" от "+СокрЛП(Recordset.Fields("BILL_DATE").Value)+" сумма "+НоваяСтрокаУслуг.Сумма+" (всего "+СуммаЗаДень+")");	
			
			КонецЕсли;
																			
			Recordset.MoveNext();	   
		КонецЦикла;
		
		Recordset.Close();
		Recordset = NULL;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	ЭтаФорма.ТаблицаДокументовРеализацииАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализацииОбъект, ЭтаФорма.УникальныйИдентификатор);		

	ЗначениеВРеквизитФормы(ТЗ_КэшКонтрагентовОбъект, "ТЗ_КэшКонтрагентов");
	ЗначениеВРеквизитФормы(ТЗ_КэшПодразделениеНоменклатураОбъект, "ТЗ_КэшПодразделениеНоменклатура");
		
КонецПроцедуры // РазобратьДокументыПоРеализации_Талоны()

&НаСервере
Процедура РазобратьДокументыПоРеализации_ФизЛица(COMОбъектConnection)
	
	ТаблицаДокументовРеализацииОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес);
	
	ТЗ_КэшКонтрагентовОбъект = РеквизитФормыВЗначение("ТЗ_КэшКонтрагентов");
	ТЗ_КэшПодразделениеНоменклатураОбъект = РеквизитФормыВЗначение("ТЗ_КэшПодразделениеНоменклатура");
	
	ВыборкаДоговорыКонтрагентовСПоставщиком = ПолучитьВыборкуДоговоровКонтрагентовСПоставщиком();
	
	ТекОрг = ЭтаФорма.Организация1; //ПолучитьИДтекОрганизации();  //-=Орг
	Если ТекОрг=0 Тогда
		Сообщить("Не определена организация",60);
		Возврат;	
	КонецЕсли;
	ТекстОтбораПоОрганизации = "ISNULL(FM_DEP.MAIN_ORG_ID,1)="+Формат(ТекОрг,"ЧГ=");  // Все бесхозные талоны будут валиться на организацию 1
	//Исключаем ММЦ СОГАЗ 361
	Если ТекОрг = 1 Тогда
		ТекстОтбораПоОрганизации = ТекстОтбораПоОрганизации + "AND ISNULL(FM_ORG.FM_ORG_ID,0) not in (361)";
	КонецЕсли;
	//Сообщить(""+Формат(ТекОрг,"ЧГ="));
	//-=Орг
	
	Попытка
	
		// Определим налоговые ставки
		Recordset = Новый COMОбъект("ADODB.Recordset");
		Recordset.Open("FM_TAXE_DET",COMОбъектConnection,0,1);
		
		ТЗСтавок = Новый ТаблицаЗначений;
		ТЗСтавок.Колонки.Добавить("Д");
		ТЗСтавок.Колонки.Добавить("Ид");
		ТЗСтавок.Колонки.Добавить("ИдПер");
		//ТЗСтавок.Колонки.Добавить("Ставка");
		
		Пока НЕ Recordset.EOF Цикл
			Ид = Recordset.Fields("FM_TAXE_ID").Value;
			
			РезультатПоиска = ТЗСтавок.Найти(Ид, "Ид");
			Если РезультатПоиска = Неопределено Тогда
				НоваяСтрока = ТЗСтавок.Добавить();
				НоваяСтрока.Д = Recordset.Fields("DATE_FROM").Value;
				НоваяСтрока.Ид = Ид;
				НоваяСтрока.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
			Иначе
				Если РезультатПоиска.Д < Recordset.Fields("DATE_FROM").Value Тогда
					РезультатПоиска.Д = Recordset.Fields("DATE_FROM").Value;
					РезультатПоиска.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
				КонецЕсли; 
			КонецЕсли; 
			
			Recordset.MoveNext();
		КонецЦикла;
		Recordset.Close();
		Recordset = NULL;
		
		ФильтрПоНДС = "";
		Для каждого СтрокаТаблицы Из ТЗСтавок Цикл
			ФильтрПоНДС = ФильтрПоНДС + ?(ПустаяСтрока(ФильтрПоНДС),"",", ")+Формат(СтрокаТаблицы.ИдПер,"ЧГ=");		
		КонецЦикла; 
			
		Recordset = Новый COMОбъект("ADODB.Recordset");	
		
		//% - 3 вставки: поля, 2 левое соединение, WHERE
		ТекстЗапроса = "SELECT
		|	FM_BILL.BILL_DATE,
		|   ISNULL(FM_BILLDET_PAY_.PRICE, 0) AS PRICE_TO_PAY,
		|	ISNULL(ISNULL(FM_BILLDET_PAY_.PRICE, 0) * (ISNULL(FM_TAXE_DET.TAXE_PERC,0)/(ISNULL(FM_TAXE_DET.TAXE_PERC,0)+100))  ,0) AS SUM_NDS,
		|	FM_DEP.FM_DEP_ID,
		|   FM_DEP.CODE AS DEP_CODE,
		|   FM_DEP.LABEL AS DEP_LABEL,
		|	FM_ORG.FM_ORG_ID,
		|   FM_ORG.CODE AS ORG_CODE,
		|   FM_ORG.INN,
		|	FM_ORG.LABEL AS ORG_LABEL,
		|   FM_CLINK.FM_CLINK_ID,
		|	ISNULL(FM_TAXE_DET.TAXE_PERC, 0) AS TAXE_PERC,
		|   ISNULL(FM_BILLDET_PAY_.PRICE,0) AS PAYED_PRICE,
		|   ISNULL(SUBQUERY.PRICE,0) AS TOTAL_PRICE,
		|	FM_BILL.BILL_NUM
		|FROM
		|	FM_BILL  WITH (NOLOCK)
		|
		|LEFT JOIN FM_BILLDET  WITH (NOLOCK)
		|ON (FM_BILL.FM_BILL_ID = FM_BILLDET.FM_BILL_ID)AND(FM_BILLDET.DONE = 1)AND(FM_BILLDET.CANCEL = 0)
		|
		|LEFT JOIN FM_DEP  WITH (NOLOCK)
		|ON FM_BILL.FM_DEP_ID = FM_DEP.FM_DEP_ID
		|
		|LEFT JOIN FM_CLINK  WITH (NOLOCK)
		|ON FM_BILLDET.FM_CLINK_ID = FM_CLINK.FM_CLINK_ID
		|
		|LEFT JOIN FM_CONTR  WITH (NOLOCK)
		|ON	FM_CONTR.FM_CONTR_ID = FM_CLINK.FM_CONTR_ID
		|
		|LEFT JOIN FM_ORG  WITH (NOLOCK)
		|ON FM_ORG.FM_ORG_ID = FM_CONTR.FM_ORG1_ID
		|
		|LEFT JOIN FM_SERV  WITH (NOLOCK)
		|ON FM_BILLDET.FM_SERV_ID = FM_SERV.FM_SERV_ID
		|
		|LEFT JOIN FM_TAXE_DET  WITH (NOLOCK)
		|ON FM_SERV.FM_TAXE_ID = FM_TAXE_DET.FM_TAXE_ID
		|
		|LEFT JOIN 
		|	(SELECT * FROM FM_BILLDET_PAY AS SUBTABLE1  WITH (NOLOCK)
		|	WHERE (ISNULL(SUBTABLE1.IS_STORNO,0) = 0)
		|	) AS FM_BILLDET_PAY_
		|ON (FM_BILLDET.FM_BILLDET_ID = FM_BILLDET_PAY_.FM_BILLDET_ID)
		|
		|LEFT JOIN  
		|	(SELECT
		|    	SUBTABLE.FM_BILLDET_ID,
		|		SUBTABLE.IS_STORNO AS IS_STORNO,
		|		SUM(SUBTABLE.PRICE) AS PRICE
		|		FROM FM_BILLDET_PAY AS SUBTABLE  WITH (NOLOCK)
		|		WHERE (ISNULL(SUBTABLE.IS_STORNO,0) = 0)
		|
		|		GROUP BY SUBTABLE.FM_BILLDET_ID, SUBTABLE.IS_STORNO
		|	)AS SUBQUERY
        |ON (FM_BILLDET.FM_BILLDET_ID = SUBQUERY.FM_BILLDET_ID)
		|
		|WHERE (FM_BILL.BILL_DATE >= '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"')AND(FM_BILL.BILL_DATE <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')
		|AND (
		|	(ISNULL(FM_BILLDET_PAY_.PATIENTS_ID,0)<>0)OR
		|
		|	((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND
		|    (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) = 'ФизЛица'))
		|
		|	)
		|AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>5000)AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>8970)
		|AND (ISNULL(FM_TAXE_DET.FM_TAXE_DET_ID,1) IN ("+ФильтрПоНДС+"))
		|AND("+ТекстОтбораПоОрганизации+")
		|ORDER BY
		|	DAY(FM_BILL.BILL_DATE), FM_DEP.FM_DEP_ID, ISNULL(FM_TAXE_DET.TAXE_PERC, 0)
		|";
		
		// 
		//
		
		// 2011-06-01 Сторно:
		//
		////AND
		////|       (NOT SUBTABLE1.FM_BILLDET_PAY_ID IN
		////|       	(SELECT S1_.FM_BILLDET_PAY_ID
		////|       	FROM FM_BILLDET_PAY AS S1_
		////|           INNER JOIN
		////|           	FM_BILLDET_PAY AS S2_
		////|           ON
		////|           	(S1_.FM_BILLDET_ID=S2_.FM_BILLDET_ID)AND(S2_.IS_STORNO=1)AND(S1_.FM_BILLDET_PAY_ID<>S2_.FM_BILLDET_PAY_ID)AND(ISNULL(S1_.MAIN_BILLDET_PAY_ID,0)<>0)
		////|       	)
		////|       )
		//
		////AND
		////|       (NOT SUBTABLE.FM_BILLDET_PAY_ID IN
		////|       	(SELECT S1.FM_BILLDET_PAY_ID
		////|       	FROM FM_BILLDET_PAY AS S1
		////|           INNER JOIN
		////|           	FM_BILLDET_PAY AS S2
		////|           ON
		////|           	(S1.FM_BILLDET_ID=S2.FM_BILLDET_ID)AND(S2.IS_STORNO=1)AND(S1.FM_BILLDET_PAY_ID<>S2.FM_BILLDET_PAY_ID)AND(ISNULL(S1.MAIN_BILLDET_PAY_ID,0)<>0)
		////|       	)
		////|       )
				
				
		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);
		
		
		СтараяДата = "";
		СтарыйИдОтдела = "";
		СтараяСтавкаНДС = "";
		
		НоваяСтрока = "";
		
		СуммаЗаДень = 0;
							
		Пока НЕ Recordset.EOF Цикл
						
			Если СтараяДата <> НачалоДня(Recordset.Fields("BILL_DATE").Value) Тогда
				СуммаЗаДень = 0;
				
				НоваяСтрока = ТаблицаДокументовРеализацииОбъект.Добавить();
				НоваяСтрока.ДатаДок = НачалоДня(Recordset.Fields("BILL_DATE").Value);
				
				// Здесь: контрагент всегда один «Медицинские услуги населению» 
				// Кладем ему ИД= 9999999999
				НоваяСтрока.Ид_Контрагент = 9999999999;
				НоваяСтрока.КонтрагентИННМедиалог = "";
				НоваяСтрока.КонтрагентНаименованиеМедиалог = "Медицинские услуги населению";
				
				РезультатПоиска = ТЗ_КэшКонтрагентовОбъект.Найти(НоваяСтрока.Ид_Контрагент, "Ид_Медиалог"); 
				Если РезультатПоиска <> Неопределено Тогда
					НоваяСтрока.Контрагент = РезультатПоиска.Контрагент;						
				Иначе	
				
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Ид_Медиалог", НоваяСтрока.Ид_Контрагент);
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Рег.Контрагент КАК Контрагент,
					|	Рег.Ид КАК Ид
					|ИЗ
					|	РегистрСведений._СоответствиеКонтрагентов КАК Рег
					|ГДЕ
					|	Рег.Ид = &Ид_Медиалог
					|";
		
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаКэша = ТЗ_КэшКонтрагентовОбъект.Добавить();
						СтрокаКэша.Ид_Медиалог = НоваяСтрока.Ид_Контрагент;
						СтрокаКэша.ИННМедиалог = НоваяСтрока.КонтрагентИННМедиалог;
						СтрокаКэша.НаименованиеМедиалог = НоваяСтрока.КонтрагентНаименованиеМедиалог;
						СтрокаКэша.Контрагент = Выборка.Контрагент;	
						НоваяСтрока.Контрагент = Выборка.Контрагент;
					КонецЕсли;						
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
					ВыборкаДоговорыКонтрагентовСПоставщиком.Сбросить();
					Если ВыборкаДоговорыКонтрагентовСПоставщиком.НайтиСледующий(НоваяСтрока.Контрагент, "Контрагент") Тогда
						НоваяСтрока.Договор = ВыборкаДоговорыКонтрагентовСПоставщиком.Договор;
					Иначе 
						НоваяСтрока.Договор = Неопределено;
					КонецЕсли					
				КонецЕсли;
				
				Если ЭтаФорма.ЭтоБазаПроф Тогда
					НоваяСтрока.ИдОрганизации=ЭтаФорма.Организация1;
				КонецЕсли;
								
				НоваяСтрока.Услуги = ПолучитьСтруктуруТаблицыУслугДляТалонов();

				СтараяДата = НачалоДня(Recordset.Fields("BILL_DATE").Value);
				
				СтарыйИдОтдела = "";
				СтараяСтавкаНДС = "";
				
			КонецЕсли;
			
			Если НоваяСтрока = "" Тогда
				Recordset.MoveNext();
				Продолжить;			
			КонецЕсли; 
			
			//%
			// Вычисление коэффициента оплаты
			////Заплачено = Recordset.Fields("PAYED_PRICE").Value;
			////ОбщЦена =  Recordset.Fields("TOTAL_PRICE").Value;
			//КоэфОплаты = 1;
			////Если ОбщЦена <> 0 Тогда
			////	КоэфОплаты = Заплачено / ОбщЦена;
			////КонецЕсли; 
			
			//Сообщить("Коэф "+КоэфОплаты);
				
						
			Если (СтарыйИдОтдела <> Recordset.Fields("FM_DEP_ID").Value)ИЛИ
				(СтараяСтавкаНДС <> Recordset.Fields("TAXE_PERC").Value) Тогда 
				
				//!!! Заглушка
				//Если СокрЛП(Recordset.Fields("DEP_LABEL").Value)="" Тогда
				//	Сообщить("Пустое подразделение");
				//	Recordset.MoveNext();
				//	Продолжить;			
				//КонецЕсли; 
				//!!! Заглушка
				
				НоваяСтрокаУслуг = НоваяСтрока.Услуги.Добавить();
				
				НоваяСтрокаУслуг.ИдОтделения = Recordset.Fields("FM_DEP_ID").Value; 
				НоваяСтрокаУслуг.ОтделениеНаименованиеМедиалог = Recordset.Fields("DEP_LABEL").Value;
				НоваяСтрокаУслуг.СтавкаНДС = Recordset.Fields("TAXE_PERC").Value;
								
				НоваяСтрокаУслуг.Сумма = Recordset.Fields("PRICE_TO_PAY").Value;
				НоваяСтрокаУслуг.СуммаНДС = Recordset.Fields("SUM_NDS").Value;     
				
			    СтарыйИдОтдела = Recordset.Fields("FM_DEP_ID").Value;
				СтараяСтавкаНДС = Recordset.Fields("TAXE_PERC").Value;
				
				// Поиск Номенклатуры
				РезультатПоиска = ТЗ_КэшПодразделениеНоменклатураОбъект.Найти(НоваяСтрокаУслуг.ИдОтделения, "Ид_Медиалог"); 
				Если РезультатПоиска <> Неопределено Тогда
					НоваяСтрокаУслуг.Номенклатура = РезультатПоиска.Номенклатура;						
				Иначе	
				
					Запрос = Новый Запрос;
                    Запрос.УстановитьПараметр("Ид_Медиалог", НоваяСтрокаУслуг.ИдОтделения);
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Рег.Номенклатура КАК Номенклатура
					|ИЗ
					|	РегистрСведений._СоответствиеПодразделенийНоменклатуре КАК Рег
					|ГДЕ
					|	Рег.Ид = &Ид_Медиалог
					|";
		
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаКэша = ТЗ_КэшПодразделениеНоменклатураОбъект.Добавить();
						СтрокаКэша.Ид_Медиалог = НоваяСтрокаУслуг.ИдОтделения;
						СтрокаКэша.НаименованиеМедиалог = НоваяСтрокаУслуг.ОтделениеНаименованиеМедиалог;
						СтрокаКэша.Номенклатура = Выборка.Номенклатура;	
						НоваяСтрокаУслуг.Номенклатура = Выборка.Номенклатура;
					КонецЕсли;						
				КонецЕсли;
				
			Иначе	
				НоваяСтрокаУслуг.Сумма = НоваяСтрокаУслуг.Сумма + Recordset.Fields("PRICE_TO_PAY").Value; 
				НоваяСтрокаУслуг.СуммаНДС = НоваяСтрокаУслуг.СуммаНДС + Recordset.Fields("SUM_NDS").Value; 
			КонецЕсли; 
			
			////////Если СокрЛП(НоваяСтрокаУслуг.ОтделениеНаименованиеМедиалог)="" Тогда
			////////	Сообщить("Номер талона "+СокрЛП(Recordset.Fields("BILL_NUM").Value)+" от "+СокрЛП(Recordset.Fields("BILL_DATE").Value)+" сумма "+НоваяСтрокаУслуг.Сумма);	
			////////КонецЕсли;
			
			Если Объект.СообщатьНомерТалона Тогда
			    СуммаЗаДень = СуммаЗаДень + Recordset.Fields("PRICE_TO_PAY").Value;
				Сообщить("Номер талона "+Формат(Recordset.Fields("BILL_NUM").Value,"ЧГ=")+" от "+СокрЛП(Recordset.Fields("BILL_DATE").Value)+" сумма "+Recordset.Fields("PRICE_TO_PAY").Value+" (всего "+СуммаЗаДень+")");	
			
			КонецЕсли; 
														
			Recordset.MoveNext();	   
		КонецЦикла;
		
		Recordset.Close();
		Recordset = NULL;
				
	Исключение
		Сообщить(ОписаниеОшибки());
		//Сообщить(ТекстЗапроса);
	КонецПопытки;	
	
	ЭтаФорма.ТаблицаДокументовРеализацииАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализацииОбъект, ЭтаФорма.УникальныйИдентификатор);		
	
	ЗначениеВРеквизитФормы(ТЗ_КэшКонтрагентовОбъект, "ТЗ_КэшКонтрагентов");
	ЗначениеВРеквизитФормы(ТЗ_КэшПодразделениеНоменклатураОбъект, "ТЗ_КэшПодразделениеНоменклатура");
	
КонецПроцедуры // РазобратьДокументыПоРеализации_ФизЛица()	

&НаСервере
Процедура РазобратьДокументыПоРеализации(COMОбъектConnection,ОбработкаОбъект)
	
	Если ОбработкаОбъект.Талоны = 0 Тогда
		РазобратьДокументыПоРеализации_Талоны(COMОбъектConnection);
	Иначе	
		РазобратьДокументыПоРеализации_ФизЛица(COMОбъектConnection);
	КонецЕсли;
	
	//// ЗаполнитьСсылкиДокументов1СпоРеализации();
	
КонецПроцедуры // РазобратьДокументыПоРеализации()

&НаСервере
Функция ПолучитьСтруктуруТаблицыДокументовРеализации()
	
	ТаблицаДокументовРеализации = Новый ТаблицаЗначений;
	ТаблицаДокументовРеализации.Колонки.Добавить("Документ1С");
	ТаблицаДокументовРеализации.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДокументовРеализации.Колонки.Добавить("Ид_Контрагент");
	ТаблицаДокументовРеализации.Колонки.Добавить("КонтрагентИННМедиалог");
	ТаблицаДокументовРеализации.Колонки.Добавить("КонтрагентНаименованиеМедиалог");
	ТаблицаДокументовРеализации.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДокументовРеализации.Колонки.Добавить("ДатаДок", Новый ОписаниеТипов("Дата"));
	ТаблицаДокументовРеализации.Колонки.Добавить("Услуги");
	ТаблицаДокументовРеализации.Колонки.Добавить("ИдОрганизации", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 0) )); // Деление по организациям для ПрофМедицины

	Возврат ТаблицаДокументовРеализации;
	
КонецФункции // ПолучитьСтруктуруТаблицыДокументовРеализации()

&НаСервере
Функция ПолучитьСтруктуруТаблицыДокументовРеализации2()
	
	ТаблицаДокументовРеализации2 = Новый ТаблицаЗначений;
	ТаблицаДокументовРеализации2.Колонки.Добавить("ИдОтделения");
	ТаблицаДокументовРеализации2.Колонки.Добавить("Номенклатура");
	ТаблицаДокументовРеализации2.Колонки.Добавить("ОтделениеНаименованиеМедиалог");
	ТаблицаДокументовРеализации2.Колонки.Добавить("СтавкаНДС");
	ТаблицаДокументовРеализации2.Колонки.Добавить("Услуги");

	Возврат ТаблицаДокументовРеализации2;
	
КонецФункции // ПолучитьСтруктуруТаблицыДокументовРеализации2()

&НаСервере
Процедура ЗаполнитьСсылкиДокументов1СпоРеализации()
	
	ТаблицаДокументовРеализацииОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес);

	ВремКэшДокументов = Новый ТаблицаЗначений;
	ВремКэшДокументов.Колонки.Добавить("ДатаДок");
	ВремКэшДокументов.Колонки.Добавить("Контрагент");
	ВремКэшДокументов.Колонки.Добавить("Документ");
	
	//Если ЭтаФорма.ЭтоБазаПроф Тогда
	//	Сообщить("ЭтаФорма.ЭтоБазаПроф=Истина");
	//Иначе	
	//	Сообщить("ЭтаФорма.ЭтоБазаПроф=Ложь");
	//КонецЕсли; 
	
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументовРеализацииОбъект Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
			Продолжить;
		КонецЕсли; 
		
		МассивПоиска = ВремКэшДокументов.НайтиСтроки(Новый Структура("ДатаДок,Контрагент", СтрокаТаблицы.ДатаДок, СтрокаТаблицы.Контрагент)); 
		Если МассивПоиска.Количество()>0 Тогда
			СтрокаТаблицы.Документ1С = МассивПоиска[0].Документ;
		Иначе
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаДок", СтрокаТаблицы.ДатаДок);
			Запрос.УстановитьПараметр("Контрагент", СтрокаТаблицы.Контрагент);
			Если ЭтаФорма.ЭтоБазаПроф Тогда
				Запрос.УстановитьПараметр("ИдОрганизации", СтрокаТаблицы.ИдОрганизации);
				//Сообщить("ИдОрганизации="+СтрокаТаблицы.ИдОрганизации);
			КонецЕсли;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Рег.Документ
			|ИЗ
			|	РегистрСведений._СоответствиеДокументовУслуги КАК Рег
			|ГДЕ
			|	(Рег.ДатаДок = &ДатаДок)И(Рег.Контрагент = &Контрагент)"+?(ЭтаФорма.ЭтоБазаПроф,"И(Рег.ИдОрганизации = &ИдОрганизации)","")+"
			|";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтрокаТаблицы.Документ1С = Выборка.Документ;
				НоваяСтрокаКэша = ВремКэшДокументов.Добавить();
			    НоваяСтрокаКэша.ДатаДок = СтрокаТаблицы.ДатаДок;
				НоваяСтрокаКэша.Контрагент = СтрокаТаблицы.Контрагент;
				НоваяСтрокаКэша.Документ = СтрокаТаблицы.Документ1С;
			КонецЕсли; 
		
		КонецЕсли; 	
	КонецЦикла; 
	
	ЭтаФорма.ТаблицаДокументовРеализацииАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализацииОбъект, ЭтаФорма.УникальныйИдентификатор);		
	
КонецПроцедуры // ЗаполнитьСсылкиДокументов1СпоРеализации()

&НаСервере
Процедура Талоны_ЗагрузитьНаСервере()
	
	//рдДеревоДокументов.Строки.Очистить();
	//рдДеревоГрупповойЗагрузки.Строки.Очистить();
	//рдДеревоДокументовРеализации.Строки.Очистить();
	//ТаблицаДокументов.Очистить();
	//ТаблицаДокументовРеализации.Очистить();
	//ТоварныеТаблицы.Очистить();
	
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	
	рдДеревоДокументовОбъект = РеквизитФормыВЗначение("рдДеревоДокументов");
	рдДеревоДокументовОбъект.Строки.Очистить();
	ЗначениеВРеквизитФормы(рдДеревоДокументовОбъект,"рдДеревоДокументов");
	//
	рдДеревоГрупповойЗагрузкиОбъект = РеквизитФормыВЗначение("рдДеревоГрупповойЗагрузки");
	рдДеревоГрупповойЗагрузкиОбъект.Строки.Очистить();
	ЗначениеВРеквизитФормы(рдДеревоГрупповойЗагрузкиОбъект,"рдДеревоГрупповойЗагрузки");
	
	
	рдДеревоДокументовРеализацииОбъект = РеквизитФормыВЗначение("рдДеревоДокументовРеализации");
	рдДеревоДокументовРеализацииОбъект.Строки.Очистить();
	ЗначениеВРеквизитФормы(рдДеревоДокументовРеализацииОбъект, "рдДеревоДокументовРеализации"); 
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес) Тогда
		ТаблицаДокументовОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовАдрес);	
		Попытка
			ТаблицаДокументовОбъект.Очистить();	
		Исключение
			ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
		КонецПопытки;
		ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.ТаблицаДокументовАдрес);
	Иначе	
		ТаблицаДокументовОбъект=ПолучитьСтруктуруТаблицыДокументов();
		ЭтаФорма.ТаблицаДокументовАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовОбъект, ЭтаФорма.УникальныйИдентификатор);		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес) Тогда
		ТаблицаДокументовРеализацииОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес);	
		Попытка
			ТаблицаДокументовРеализацииОбъект.Очистить();	
		Исключение
			ТаблицаДокументовРеализацииОбъект=ПолучитьСтруктуруТаблицыДокументовРеализации();
		КонецПопытки;
		ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализацииОбъект, ЭтаФорма.ТаблицаДокументовРеализацииАдрес);
	Иначе	
		ТаблицаДокументовРеализацииОбъект=ПолучитьСтруктуруТаблицыДокументовРеализации();
		ЭтаФорма.ТаблицаДокументовРеализацииАдрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализацииОбъект, ЭтаФорма.УникальныйИдентификатор);		
	КонецЕсли;

	
	
	COMОбъектConnection = ОбработкаОбъект.ПолучитьСоединение();
	Если COMОбъектConnection = Неопределено Тогда	
		Сообщить("Не удалось установить соединение");
		Возврат;
	КонецЕсли;
	
	РазобратьДокументыПоРеализации(COMОбъектConnection,ОбработкаОбъект);
		
	ЗаполнитьСсылкиДокументов1СпоРеализации();
	
	ТаблицаДокументовРеализацииОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес);
	рдДеревоДокументовРеализацииОбъект = РеквизитФормыВЗначение("рдДеревоДокументовРеализации");

	Для каждого СтрокаТаблицы Из ТаблицаДокументовРеализацииОбъект Цикл
	
		НоваяСтрока = рдДеревоДокументовРеализацииОбъект.Строки.Добавить();
		
		НоваяСтрока.СтрокаТаблицы = ТаблицаДокументовРеализацииОбъект.Индекс(СтрокаТаблицы);
		
		Если Объект.Талоны = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.Документ1С) Тогда
				НоваяСтрока.Документ1С = СтрокаТаблицы.Документ1С;
			Иначе	
				НоваяСтрока.Документ1С = Формат(СтрокаТаблицы.ДатаДок,"ДФ=dd.MM.yyyy");
			КонецЕсли; 
			НоваяСтрока.Контрагент = СтрокаТаблицы.Контрагент;
			НоваяСтрока.Договор = СтрокаТаблицы.Договор;
		Иначе
			Если ЗначениеЗаполнено(СтрокаТаблицы.Документ1С) Тогда
				НоваяСтрока.Документ1С = СтрокаТаблицы.Документ1С;
			Иначе	
				НоваяСтрока.Документ1С = Формат(СтрокаТаблицы.ДатаДок,"ДФ=dd.MM.yyyy");
			КонецЕсли;
			НоваяСтрока.Контрагент = СтрокаТаблицы.Контрагент;
			НоваяСтрока.Договор = СтрокаТаблицы.Договор;
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
			НоваяСтрока.Контрагент = "Наименование: "+СтрокаТаблицы.КонтрагентНаименованиеМедиалог;		
		КонецЕсли; 
		//НоваяСтрока.Документ1С = СокрЛП(СтрокаТаблицы.Номер_Медиалог)+" от "+СокрЛП(СтрокаТаблицы.ДатаДок);
		
		//НоваяСтрока.Контрагент = СтрокаТаблицы.КонтрагентНаименованиеМедиалог;
		
		//////Для каждого СтрокаТаблицыУ Из СтрокаТаблицы.Услуги Цикл
		//////	
		//////	Если СтрокаТаблицыУ.Сумма = 0 Тогда
		//////		Продолжить;
		//////	КонецЕсли;
		//////	
		//////	НоваяСтрокаУ = НоваяСтрока.Строки.Добавить();
		//////	НоваяСтрокаУ.Услуга = СтрокаТаблицыУ.ОтделениеНаименованиеМедиалог;
		//////	НоваяСтрокаУ.СтавкаНДС = СтрокаТаблицыУ.СтавкаНДС;
		//////	НоваяСтрокаУ.Сумма = СтрокаТаблицыУ.Сумма;
		//////
		//////КонецЦикла; 	
	КонецЦикла; 	
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализацииОбъект, ЭтаФорма.ТаблицаДокументовРеализацииАдрес);
	ЗначениеВРеквизитФормы(рдДеревоДокументовРеализацииОбъект, "рдДеревоДокументовРеализации");
	
КонецПроцедуры

&НаКлиенте
Процедура Талоны_Загрузить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаКон) Тогда
		Сообщить("Не заполнен период!");
		Возврат;
	КонецЕсли;
	
	Талоны_ЗагрузитьНаСервере();
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПодразделенияНаСервере()
	
	ТЗПодразделенийОбъект = РеквизитФормыВЗначение("ТЗПодразделений");
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес) Тогда
		ТаблицаДокументовРеализацииОбъект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес);
	ИначеЕсли ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес) Тогда	
	    ТаблицаДокументовРеализации2Объект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	Иначе
		Возврат;
	КонецЕсли; 
	
	
	
	Для каждого СтрокаТЗ из ТЗПодразделенийОбъект Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(СтрокаТЗ.КодМедиалог)="" Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыСведений._СоответствиеПодразделенийНоменклатуре.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТЗ.Номенклатура);
		НаборЗаписей.Отбор.Ид.Установить(СтрокаТЗ.КодМедиалог);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура = СтрокаТЗ.Номенклатура;
		НоваяЗапись.Ид = СтрокаТЗ.КодМедиалог;		
		НаборЗаписей.Записать(Истина);
		
		// Обновить ТаблицаДокументовРеализации
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументовРеализацииОбъект Цикл	
			Для каждого СтрокаУ Из СтрокаТаблицыДокументов.Услуги Цикл
				Если СтрокаУ.ИдОтделения <> СтрокаТЗ.КодМедиалог Тогда
					Продолжить;			
				КонецЕсли; 	
				СтрокаУ.Номенклатура = СтрокаТЗ.Номенклатура;
			КонецЦикла;			
		КонецЦикла;	
				
	КонецЦикла;
	
	ТЗПодразделенийОбъект.Очистить();
	
	ЗначениеВРеквизитФормы(ТЗПодразделенийОбъект, "ТЗПодразделений");
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализацииАдрес) Тогда
		ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализацииОбъект, ЭтаФорма.ТаблицаДокументовРеализацииАдрес);
	ИначеЕсли ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес) Тогда
		ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализацииОбъект, ЭтаФорма.ТаблицаДокументовРеализации2Адрес);	
	КонецЕсли;
	
	//Если мСтекСтраниц.Количество()>0 Тогда	
	//	ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы[СокрЛП(мСтекСтраниц[0].Страница)];
	//	мСтекСтраниц.Удалить(0);
	//КонецЕсли; 
	//мСтекСтраниц.Очистить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПодразделения(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьПодразделенияЗавершение", ЭтаФорма), "Таблица соответствия будет записана. Подтвердите?", РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПодразделенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НеПродолжать = РезультатВопроса <> КодВозвратаДиалога.Да;  
    Если НеПродолжать Тогда
        Возврат;
    КонецЕсли;
    
    ЗаписатьПодразделенияНаСервере();

	мСтекСтраниц.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки2(Команда)
	СтрокиДерева = рдДеревоДокументовРеализации.ПолучитьЭлементы();
	Для каждого СтрокаТаблицы из СтрокиДерева Цикл
		СтрокаТаблицы.Флаг = Истина;	
		Для каждого СтрокаТаблицыН из СтрокаТаблицы.ПолучитьЭлементы() Цикл
			СтрокаТаблицыН.Флаг = Истина;	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки2(Команда)
	СтрокиДерева = рдДеревоДокументовРеализации.ПолучитьЭлементы();
	Для каждого СтрокаТаблицы из СтрокиДерева Цикл
		СтрокаТаблицы.Флаг = Ложь;
		Для каждого СтрокаТаблицыН из СтрокаТаблицы.ПолучитьЭлементы() Цикл
			СтрокаТаблицыН.Флаг = Ложь;	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуГоспитальныхТалонов(COMОбъектConnection)
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("PATIENTS_ID");
	ТЗ.Колонки.Добавить("MOTCONSU_ID");
	ТЗ.Колонки.Добавить("FM_BILL_ID");
	ТЗ.Колонки.Добавить("DATE_START", Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("DATE_FINISH", Новый ОписаниеТипов("Дата"));
	
	ТЗ.Индексы.Добавить("PATIENTS_ID, MOTCONSU_ID, FM_BILL_ID");
		
	Попытка
			
		Recordset = Новый COMОбъект("ADODB.Recordset");
	
		ТекстЗапроса = "SELECT
		|	MTCONS_BEG.PATIENTS_ID,
		|   MT_CNS.MOTCONSU_ID,
		|   MTCONS_BEG.DATE_CONSULTATION AS DATE_START,
		|   ISNULL(MTCONS_SUBQUERY.DATE_CONSULTATION,'"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"') AS DATE_FINISH,
		|	ISNULL(FM_BILL.FM_BILL_ID,0) AS FM_BILL_ID
		|FROM
		|	(SELECT
		|  		MT_CNS_BEG.PATIENTS_ID,
		|   	MT_CNS_BEG.DATE_CONSULTATION,
		|       MT_CNS_BEG.MOTCONSU_EV_ID
		|	FROM
		|      	MOTCONSU AS MT_CNS_BEG  WITH (NOLOCK)
		|	WHERE
		|      	(ISNULL(MT_CNS_BEG.MOTCONSU_EVENT_TYPES_ID,0)=1)AND
		|		(ISNULL(MT_CNS_BEG.EV_GOSP,0)=1)
		|
		|	)AS MTCONS_BEG
		|
		|INNER JOIN
		|	MOTCONSU AS MT_CNS  WITH (NOLOCK)
		|ON
		|  	MTCONS_BEG.MOTCONSU_EV_ID = MT_CNS.MOTCONSU_EV_ID	
		|
		|LEFT JOIN
		|	(SELECT DISTINCT
		|		MC_END.MOTCONSU_EV_ID AS MOTCONSU_EV_ID,
		|		MC_END.DATE_CONSULTATION
		|		FROM MOTCONSU AS MC_END  WITH (NOLOCK)
		|	WHERE 
		|		(MC_END.ZAPIS_ZAKR_VAYHAQ_SOB_TIE=1)
		|	)AS MTCONS_SUBQUERY
		|ON	MTCONS_BEG.MOTCONSU_EV_ID = MTCONS_SUBQUERY.MOTCONSU_EV_ID
		|
		|LEFT JOIN
		|	FM_BILL  WITH (NOLOCK)
		|ON
		|	MT_CNS.MOTCONSU_ID = FM_BILL.MOTCONSU_ID
		|
		|
		|WHERE
		|	(
		|	(ISNULL(FM_BILL.BILL_DATE,'"+ВернутьСтрокуДаты('20000101')+"') >= '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"' )AND
		|   (ISNULL(FM_BILL.BILL_DATE,'"+ВернутьСтрокуДаты('20000101')+"') <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"' )
		|	)
		|		OR
		|	((MTCONS_BEG.DATE_CONSULTATION <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')AND
		|   (ISNULL(MTCONS_SUBQUERY.DATE_CONSULTATION,'"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"') >=  '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"' )
		|	)
		|	
		|";
			
			
		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);	
				
		Пока НЕ Recordset.EOF Цикл
				
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.PATIENTS_ID = Recordset.Fields("PATIENTS_ID").Value;
			НоваяСтрока.MOTCONSU_ID = Recordset.Fields("MOTCONSU_ID").Value;
			НоваяСтрока.FM_BILL_ID = Recordset.Fields("FM_BILL_ID").Value;
			НоваяСтрока.DATE_START = Recordset.Fields("DATE_START").Value;
			НоваяСтрока.DATE_FINISH = Recordset.Fields("DATE_FINISH").Value;
			
			Recordset.MoveNext();
			
		КонецЦикла;	
				
		Recordset.Close();
		Recordset = Неопределено;

    Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ТЗ;
	
КонецФункции // ПолучитьТаблицуГоспитальныхТалонов()

&НаСервере
// Истина - талон подходит,
// Ложь - талон не подходит
//
Функция ПроверитьТалонПоТаблицеГоспитальныхТалонов(ТаблицаГоспитальныхТалонов, MOTCONSU_ID, PATIENTS_ID, DATE_CREATE, FM_BILL_ID, FM_SERV_ID)
	
	// Суть проверки:
	// Талон не должен быть госпитальным, т.е.
	//      НЕ
	// (1. Если BILLS.MOTCONSU_ID заполнено: BILLS.MOTCONSU_ID есть в ТаблицаГоспитальныхТалонов
	//
	//	2. Если BILLS.MOTCONSU_ID НЕ заполнено: BILLS.PATIENTS_ID = ТаблицаГоспитальныхТалонов.PATIENTS_ID
	//    										AND(BILLS.DATE_CREATE <= ТаблицаГоспитальныхТалонов.DATE_FINISH)
	//                                          AND(BILLS.DATE_CREATE >= ТаблицаГоспитальныхТалонов.DATE_START)
	//							!!!!			AND(FM_SERV_ID = 12651)
	//	)
		
	Результат = Истина;
		
	Если MOTCONSU_ID = 0 Тогда
		// MOTCONSU_ID НЕ заполнено
		РезультатПоиска = ТаблицаГоспитальныхТалонов.НайтиСтроки(Новый Структура("PATIENTS_ID",PATIENTS_ID));
		Для каждого ЭлементМассива Из РезультатПоиска Цикл
			Если (ЭлементМассива.DATE_START <= DATE_CREATE)И 
				(ЭлементМассива.DATE_FINISH>= DATE_CREATE)
				//!!!!!!!
				И(FM_SERV_ID = 12651)
				Тогда
				
				Результат = Ложь;
				Прервать;
			КонецЕсли; 	
		КонецЦикла; 		
	Иначе
		// MOTCONSU_ID заполнено
	    РезультатПоиска = ТаблицаГоспитальныхТалонов.НайтиСтроки(Новый Структура("MOTCONSU_ID,FM_BILL_ID",MOTCONSU_ID,FM_BILL_ID));
		Если РезультатПоиска.Количество()<> 0 Тогда
			Результат = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	//Если НЕ Результат Тогда
	//	Если FM_BILL_ID = 36550 Тогда
	//	
	//		Сообщить(""+FM_BILL_ID);	
	//	
	//	КонецЕсли; 	
	//КонецЕсли; 
		
	Возврат Результат;
	
КонецФункции // ПроверитьТалонПоТаблицеГоспитальныхТалонов()	

Процедура ОпределитьДоговорыСтраховойКомпании()
	
	СтраховаяКомпанияДоговоры.Очистить();
    
    // + Байдин 2018.10.09 
    ОтказПоСтраховой = Ложь;
    // - Байдин 2018.10.09 
    
	ТекОрг = ЭтаФорма.Организация1; //ПолучитьИДтекОрганизации();  //-=Орг
	Если ТекОрг=0 Тогда
		Сообщить("Не определена организация");
        ОтказПоСтраховой = Истина;
		//Возврат;	
	КонецЕсли;
	ТекстОтбораПоОрганизации = "(ISNULL(FM_DEP.MAIN_ORG_ID,0) = "+Формат(ТекОрг,"ЧГ=") + ")";
	
	Если НЕ ЗначениеЗаполнено(Объект.СтраховаяКомпания) Тогда
		Сообщить("Необходимо выбрать страховую компанию");
        ОтказПоСтраховой = Истина;
		//Возврат;
	КонецЕсли;
	
    // + Байдин 2018.10.09 
    Если Объект.ИдСтраховойКомпании = 0 Тогда
        Сообщить("Не заполнен код Медиалога для страховой компании (справочник ""Соответствие контрагентов"")");
        ОтказПоСтраховой = Истина;
    КонецЕсли; 
    
    Если ОтказПоСтраховой Тогда
    	Возврат;    
    КонецЕсли; 
    // - Байдин 2018.10.09 
        
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	
	COMОбъектConnection = ОбработкаОбъект.ПолучитьСоединение();
	Если COMОбъектConnection = Неопределено Тогда	
		Сообщить("Не удалось установить соединение");
		Возврат;
	КонецЕсли;
    
	Попытка
		
		Recordset = Новый COMОбъект("ADODB.Recordset");	
		
		ТекстЗапроса = 
		"
		|	SELECT DISTINCT FM_CONTR.FM_CONTR_ID
		|	,FM_CONTR.CODE
		|FROM FM_BILL WITH (NOLOCK)
		|LEFT OUTER JOIN FM_BILLDET WITH (NOLOCK) ON FM_BILL.FM_BILL_ID = FM_BILLDET.FM_BILL_ID
		|	AND FM_BILLDET.DONE = 1
		|	AND FM_BILLDET.CANCEL = 0
		|LEFT OUTER JOIN FM_CLINK WITH (NOLOCK) ON FM_BILLDET.FM_CLINK_ID = FM_CLINK.FM_CLINK_ID
		|LEFT OUTER JOIN FM_CONTR WITH (NOLOCK) ON FM_CONTR.FM_CONTR_ID = FM_CLINK.FM_CONTR_ID
		|LEFT OUTER JOIN FM_ORG WITH (NOLOCK) ON FM_ORG.FM_ORG_ID = FM_CONTR.FM_ORG1_ID
		|LEFT JOIN FM_DEP WITH (NOLOCK) ON FM_BILL.FM_DEP_ID = FM_DEP.FM_DEP_ID
		|WHERE (FM_BILL.BILL_DATE >= '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"')
		|	AND (FM_BILL.BILL_DATE <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')
		|	AND (ISNULL(FM_ORG.FM_ORG_ID, 0) = "+Формат(Объект.ИдСтраховойКомпании,"ЧГ=0")+")
		|	AND " + ТекстОтбораПоОрганизации + " 
		|";
		
		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);
		
		Пока НЕ Recordset.EOF Цикл
			
			ИдДоговора = Строка(Recordset.Fields("FM_CONTR_ID").Value);
			ПредставлениеДоговора = Строка(Recordset.Fields("CODE").Value);
			
			Recordset.MoveNext();
			СтрокаСтраховаяКомпанияДоговоры = СтраховаяКомпанияДоговоры.Добавить();
			СтрокаСтраховаяКомпанияДоговоры.ПредставлениеДоговора = ПредставлениеДоговора;
			СтрокаСтраховаяКомпанияДоговоры.ИдДоговора = ИдДоговора;
			
		КонецЦикла;
		
		Recordset.Close();
		Recordset = Неопределено;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Процедура РазобратьСтоматологию(COMОбъектConnection, ОбработкаОбъект)
	
	ТекОрг = ЭтаФорма.Организация1; //ПолучитьИДтекОрганизации();  //-=Орг
	Если ТекОрг=0 Тогда
		Сообщить("Не определена организация");
		Возврат;	
	КонецЕсли;
	ТекстОтбораПоОрганизации = "ISNULL(FM_DEP.MAIN_ORG_ID,0)=" + Формат(ТекОрг,"ЧГ=");
	//Исключаем ММЦ СОГАЗ 361
	Если ТекОрг = 1 Тогда
		ТекстОтбораПоОрганизации = ТекстОтбораПоОрганизации + "AND ISNULL(FM_ORG.FM_ORG_ID,0) not in (361)";
	КонецЕсли;
	//-=Орг
	
	ТекстОтбораПоДоговору = ПолучитьТекстОтбораПоДоговору();
	
	Если НЕ ЗначениеЗаполнено(Объект.СтраховаяКомпания) Тогда
		Сообщить("Необходимо выбрать страховую компанию");
		Возврат;
	
	КонецЕсли;
	
	ЭтаФорма.СписокДокументов1С.Очистить();
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес) Тогда
		ТаблицаДокументовРеализации2Объект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
		Попытка
			ТаблицаДокументовРеализации2Объект.Очистить();
		Исключение
			ТаблицаДокументовРеализации2Объект=ПолучитьСтруктуруТаблицыДокументовРеализации2();
		КонецПопытки;
		
		ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	Иначе
		ТаблицаДокументовРеализации2Объект=ПолучитьСтруктуруТаблицыДокументовРеализации2();
		ЭтаФорма.ТаблицаДокументовРеализации2Адрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли; 

	ТЗ_КэшПодразделениеНоменклатураОбъект = РеквизитФормыВЗначение("ТЗ_КэшПодразделениеНоменклатура");
	
	
	
	Попытка
			
		Recordset = Новый COMОбъект("ADODB.Recordset");	
		
		// Определим налоговые ставки
		Recordset = Новый COMОбъект("ADODB.Recordset");
		Recordset.Open("FM_TAXE_DET",COMОбъектConnection,0,1);
		
		//Козлова Е.Д. 11.04.12 Рисковых пациентов обрабатывать отдельно
		РисковоеПрикрепление = "";
		Если Объект.РисковыеПациенты = 0 тогда
			РисковоеПрикрепление = "(((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND(RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'РИСКОВОЕ ПРИКРЕПЛЕНИЕ')))OR (ISNULL(FM_BILLDET.FM_CLINK_ID,0) = 0)";
		Иначе
			РисковоеПрикрепление = "((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) = 'РИСКОВОЕ ПРИКРЕПЛЕНИЕ'))";
		КонецЕсли;
		
		//Козлова Е.Д. 21.05.15 Законченные случаи обрабатывать отдельно
		ЗаконченныйСлучай = "";
		Если Объект.ЗС = 0 тогда
			ЗаконченныйСлучай = "(((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND(RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'Законченный Случай')))OR (ISNULL(FM_BILLDET.FM_CLINK_ID,0) = 0)";
		Иначе
			ЗаконченныйСлучай = "((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) = 'Законченный Случай'))";
		КонецЕсли;

		
		ТЗСтавок = Новый ТаблицаЗначений;
		ТЗСтавок.Колонки.Добавить("Д");
		ТЗСтавок.Колонки.Добавить("Ид");
		ТЗСтавок.Колонки.Добавить("ИдПер");
		//ТЗСтавок.Колонки.Добавить("Ставка");
		
		Пока НЕ Recordset.EOF Цикл
			Ид = Recordset.Fields("FM_TAXE_ID").Value;
			
			РезультатПоиска = ТЗСтавок.Найти(Ид, "Ид");
			Если РезультатПоиска = Неопределено Тогда
				НоваяСтрока = ТЗСтавок.Добавить();
				НоваяСтрока.Д = Recordset.Fields("DATE_FROM").Value;
				НоваяСтрока.Ид = Ид;
				НоваяСтрока.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
			Иначе
				Если РезультатПоиска.Д < Recordset.Fields("DATE_FROM").Value Тогда
					РезультатПоиска.Д = Recordset.Fields("DATE_FROM").Value;
					РезультатПоиска.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
				КонецЕсли; 
			КонецЕсли; 
			
			Recordset.MoveNext();
		КонецЦикла;
		Recordset.Close();
		Recordset = NULL;
		
		ФильтрПоНДС = "";
		Для каждого СтрокаТаблицы Из ТЗСтавок Цикл
			ФильтрПоНДС = ФильтрПоНДС + ?(ПустаяСтрока(ФильтрПоНДС),"",", ")+Формат(СтрокаТаблицы.ИдПер,"ЧГ=");		
		КонецЦикла; 
		
		ТаблицаГоспитальныхТалонов = ПолучитьТаблицуГоспитальныхТалонов(COMОбъектConnection);

		//
		
		Recordset = Новый COMОбъект("ADODB.Recordset");	
			
		ТекстЗапроса = "SELECT 	
		|   ISNULL(FM_BILLDET_PAY.PRICE, 0) AS PRICE_TO_PAY,
		|	ISNULL(ISNULL(FM_BILLDET.PRICE_TO_PAY, 0) * (ISNULL(FM_TAXE_DET.TAXE_PERC,0)/(ISNULL(FM_TAXE_DET.TAXE_PERC,0)+100))  ,0) AS SUM_NDS,
		|	FM_DEP.FM_DEP_ID,
		|	FM_BILL.BILL_DATE,
		|   FM_BILL.BILL_NUM,
		|   FM_DEP.CODE AS DEP_CODE,
		|   FM_DEP.LABEL AS DEP_LABEL,
		|	FM_ORG.FM_ORG_ID,
		|   FM_ORG.CODE AS ORG_CODE,
		|   FM_ORG.INN,
		|	FM_ORG.LABEL AS ORG_LABEL,
		|   FM_CLINK.FM_CLINK_ID,
		|	ISNULL(FM_TAXE_DET.TAXE_PERC, 0) AS TAXE_PERC,
		|	ISNULL(FM_BILLDET.FM_SERV_ID, 0) AS FM_SERV_ID,
		|   FM_SERV.LABEL AS FM_SERV_LABEL,
		|   ISNULL(FM_BILLDET_PAY.PRICE,0) AS PAYED_PRICE,
		|   ISNULL(SUBQUERY.PRICE,0) AS TOTAL_PRICE,
		|	ISNULL(FM_BILL.MOTCONSU_ID,0) AS MOTCONSU_ID,
		|	ISNULL(FM_BILL.PATIENTS_ID,0) AS PATIENTS_ID,
		|	ISNULL(FM_BILL.DATE_CREATE,0) AS DATE_CREATE,
		|	FM_BILL.FM_BILL_ID
		|
		|FROM
		|	FM_BILL  WITH (NOLOCK)
		|
		|LEFT JOIN FM_BILLDET  WITH (NOLOCK)
		|ON (FM_BILL.FM_BILL_ID = FM_BILLDET.FM_BILL_ID)AND(FM_BILLDET.DONE = 1)AND(FM_BILLDET.CANCEL = 0)
		|
		|LEFT JOIN FM_DEP  WITH (NOLOCK)
		|ON FM_BILL.FM_DEP_ID = FM_DEP.FM_DEP_ID
		|
		|LEFT JOIN FM_CLINK  WITH (NOLOCK)
		|ON FM_BILLDET.FM_CLINK_ID = FM_CLINK.FM_CLINK_ID
		|
		|LEFT JOIN FM_CONTR  WITH (NOLOCK)
		|ON	FM_CONTR.FM_CONTR_ID = FM_CLINK.FM_CONTR_ID
		|
		|LEFT JOIN FM_ORG  WITH (NOLOCK)
		|ON FM_ORG.FM_ORG_ID = FM_CONTR.FM_ORG1_ID
		|
		|LEFT JOIN FM_SERV  WITH (NOLOCK)
		|ON FM_BILLDET.FM_SERV_ID = FM_SERV.FM_SERV_ID
		|
		|LEFT JOIN FM_TAXE_DET  WITH (NOLOCK)
		|ON FM_SERV.FM_TAXE_ID = FM_TAXE_DET.FM_TAXE_ID
		|
		|LEFT JOIN FM_BILLDET_PAY  WITH (NOLOCK)
		|ON (FM_BILLDET.FM_BILLDET_ID = FM_BILLDET_PAY.FM_BILLDET_ID)AND(ISNULL(FM_BILLDET_PAY.FM_ORG_ID,0)<>0)
		|
		|LEFT JOIN  
		|	(SELECT
		|    	SUBTABLE.FM_BILLDET_ID,
		|		SUM(SUBTABLE.PRICE) AS PRICE
		|		FROM FM_BILLDET_PAY AS SUBTABLE  WITH (NOLOCK)
		|		GROUP BY SUBTABLE.FM_BILLDET_ID
		|	)AS SUBQUERY
        |ON FM_BILLDET.FM_BILLDET_ID = SUBQUERY.FM_BILLDET_ID 
		|
		|WHERE (FM_BILL.BILL_DATE >= '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"')AND(FM_BILL.BILL_DATE <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')
		|AND (ISNULL(FM_SERV.CODE,'') LIKE '03.%')
		|AND ( 
		|    (ISNULL(FM_BILLDET_PAY.FM_ORG_ID,0)<>0)AND
		|    (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'ФизЛица')
		|	)
		|AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>5000)AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>8970)
		|AND (ISNULL(FM_TAXE_DET.FM_TAXE_DET_ID,1) IN ("+ФильтрПоНДС+"))
		|AND (ISNULL(FM_ORG.FM_ORG_ID,0) = "+Формат(Объект.ИдСтраховойКомпании,"ЧГ=0")+")
		| " + ТекстОтбораПоДоговору + "
		|AND("+ТекстОтбораПоОрганизации+")
		|AND("+РисковоеПрикрепление+")
		|AND("+ЗаконченныйСлучай+")
		//
		|ORDER BY
		|	FM_DEP.FM_DEP_ID, ISNULL(FM_TAXE_DET.TAXE_PERC, 0), FM_BILL.BILL_DATE
		|";
		
								
		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);	

		СтарыйИдОтдела = "";
		СтараяСтавкаНДС = "";
		
		НоваяСтрока = "";
		
		Пока НЕ Recordset.EOF Цикл
			
			MOTCONSU_ID = Recordset.Fields("MOTCONSU_ID").Value;
			PATIENTS_ID = Recordset.Fields("PATIENTS_ID").Value;
			DATE_CREATE = Recordset.Fields("DATE_CREATE").Value;
			FM_BILL_ID = Recordset.Fields("FM_BILL_ID").Value;
			FM_SERV_ID = Recordset.Fields("FM_SERV_ID").Value;
			Если НЕ ПроверитьТалонПоТаблицеГоспитальныхТалонов(ТаблицаГоспитальныхТалонов, MOTCONSU_ID, PATIENTS_ID, DATE_CREATE, FM_BILL_ID, FM_SERV_ID) Тогда
				Recordset.MoveNext();
				Продолжить;
			КонецЕсли; 
			
			Если (СтарыйИдОтдела <> Recordset.Fields("FM_DEP_ID").Value)ИЛИ
				(СтараяСтавкаНДС <> Recordset.Fields("TAXE_PERC").Value) Тогда
							
				НоваяСтрока = ТаблицаДокументовРеализации2Объект.Добавить();
				НоваяСтрока.ИдОтделения = Recordset.Fields("FM_DEP_ID").Value;
				НоваяСтрока.ОтделениеНаименованиеМедиалог = Recordset.Fields("DEP_LABEL").Value;
				НоваяСтрока.СтавкаНДС = Recordset.Fields("TAXE_PERC").Value;
				СтарыйИдОтдела = НоваяСтрока.ИдОтделения;
				СтараяСтавкаНДС = НоваяСтрока.СтавкаНДС;
				
				РезультатПоиска = ТЗ_КэшПодразделениеНоменклатураОбъект.Найти(НоваяСтрока.ИдОтделения, "Ид_Медиалог"); 
				Если РезультатПоиска <> Неопределено Тогда
					НоваяСтрока.Номенклатура = РезультатПоиска.Номенклатура;						
				Иначе	
				
					Запрос = Новый Запрос;
                    Запрос.УстановитьПараметр("Ид_Медиалог", НоваяСтрока.ИдОтделения);
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Рег.Номенклатура КАК Номенклатура
					|ИЗ
					|	РегистрСведений._СоответствиеПодразделенийНоменклатуре КАК Рег
					|ГДЕ
					|	Рег.Ид = &Ид_Медиалог
					|";
		
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаКэша = ТЗ_КэшПодразделениеНоменклатураОбъект.Добавить();
						СтрокаКэша.Ид_Медиалог = НоваяСтрока.ИдОтделения;
						СтрокаКэша.НаименованиеМедиалог = НоваяСтрока.ОтделениеНаименованиеМедиалог;
						СтрокаКэша.Номенклатура = Выборка.Номенклатура;	
						НоваяСтрока.Номенклатура = Выборка.Номенклатура;
					КонецЕсли;						
				КонецЕсли;
				
				НоваяСтрока.Услуги = ПолучитьСтруктуруТаблицыУслугДляТалонов();
				
			Конецесли;
			
			Если НоваяСтрока = "" Тогда
				Recordset.MoveNext();
				Продолжить;			
			КонецЕсли;
			
			НоваяСтрокаУслуг = НоваяСтрока.Услуги.Добавить();			
			НоваяСтрокаУслуг.НомерТалона = Recordset.Fields("BILL_NUM").Value;
			НоваяСтрокаУслуг.ДатаТалона = Recordset.Fields("BILL_DATE").Value;
			
			//НоваяСтрокаУслуг.Цена ;
			НоваяСтрокаУслуг.Сумма = Recordset.Fields("PRICE_TO_PAY").Value;
			НоваяСтрокаУслуг.СуммаНДС = Recordset.Fields("SUM_NDS").Value;
						
			Recordset.MoveNext();	   
		КонецЦикла;
		
		Recordset.Close();
		Recordset = Неопределено;
				
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
		
	ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	ЗначениеВРеквизитФормы(ТЗ_КэшПодразделениеНоменклатураОбъект, "ТЗ_КэшПодразделениеНоменклатура"); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстОтбораПоДоговору()
	
	ТекстОтбораПоДоговору = "";
	ЗначениеОтбора = "";
	Для Каждого СтрокаСтраховаяКомпанияДоговоры Из СтраховаяКомпанияДоговоры Цикл
		Если СтрокаСтраховаяКомпанияДоговоры.Использовать Тогда
			ЗначениеОтбора = ЗначениеОтбора + Формат(Число(СтрокаСтраховаяКомпанияДоговоры.ИдДоговора),"ЧГ=") + ", "; 
		КонецЕсли;	
	КонецЦикла;
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		ЗначениеОтбора = Лев(ЗначениеОтбора,СтрДлина(ЗначениеОтбора) - 2);
		ТекстОтбораПоДоговору = "AND (ISNULL(FM_CONTR.FM_CONTR_ID,0)) IN (&ЗначениеОтбора)";
		ТекстОтбораПоДоговору = СтрЗаменить(ТекстОтбораПоДоговору, "&ЗначениеОтбора", ЗначениеОтбора);
	КонецЕсли;

	Возврат ТекстОтбораПоДоговору;
	
КонецФункции // РазобратьСтоматологию()

&НаСервере
Процедура РазобратьСкоруюПомощь(COMОбъектConnection, ОбработкаОбъект)
	
	ТекОрг = ЭтаФорма.Организация1; //ПолучитьИДтекОрганизации();  //-=Орг
	Если ТекОрг=0 Тогда
		Сообщить("Не определена организация");
		Возврат;	
	КонецЕсли;
	ТекстОтбораПоОрганизации = "ISNULL(FM_DEP.MAIN_ORG_ID,0)="+Формат(ТекОрг,"ЧГ=");
	//Исключаем ММЦ СОГАЗ 361
	Если ТекОрг = 1 Тогда
		ТекстОтбораПоОрганизации = ТекстОтбораПоОрганизации + "AND ISNULL(FM_ORG.FM_ORG_ID,0) not in (361)";
	КонецЕсли;
	//-=Орг

	ТекстОтбораПоДоговору = ПолучитьТекстОтбораПоДоговору();
	
	Если НЕ ЗначениеЗаполнено(Объект.СтраховаяКомпания) Тогда
		Сообщить("Необходимо выбрать страховую компанию");
		Возврат;
	
	КонецЕсли;
	
	ЭтаФорма.СписокДокументов1С.Очистить();
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес) Тогда
		ТаблицаДокументовРеализации2Объект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
		Попытка
			ТаблицаДокументовРеализации2Объект.Очистить();
		Исключение
			ТаблицаДокументовРеализации2Объект=ПолучитьСтруктуруТаблицыДокументовРеализации2();
		КонецПопытки;
		
		ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	Иначе	
		ЭтаФорма.ТаблицаДокументовРеализации2Адрес=ПоместитьВоВременноеХранилище(ПолучитьСтруктуруТаблицыДокументовРеализации2(), ЭтаФорма.УникальныйИдентификатор);
		ТаблицаДокументовРеализации2Объект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	КонецЕсли; 

	ТЗ_КэшПодразделениеНоменклатураОбъект = РеквизитФормыВЗначение("ТЗ_КэшПодразделениеНоменклатура");
	
	
	Попытка
			
		Recordset = Новый COMОбъект("ADODB.Recordset");	
		
		// Определим налоговые ставки
		Recordset = Новый COMОбъект("ADODB.Recordset");
		Recordset.Open("FM_TAXE_DET",COMОбъектConnection,0,1);
		
		ТЗСтавок = Новый ТаблицаЗначений;
		ТЗСтавок.Колонки.Добавить("Д");
		ТЗСтавок.Колонки.Добавить("Ид");
		ТЗСтавок.Колонки.Добавить("ИдПер");
		//ТЗСтавок.Колонки.Добавить("Ставка");
		
		Пока НЕ Recordset.EOF Цикл
			Ид = Recordset.Fields("FM_TAXE_ID").Value;
			
			РезультатПоиска = ТЗСтавок.Найти(Ид, "Ид");
			Если РезультатПоиска = Неопределено Тогда
				НоваяСтрока = ТЗСтавок.Добавить();
				НоваяСтрока.Д = Recordset.Fields("DATE_FROM").Value;
				НоваяСтрока.Ид = Ид;
				НоваяСтрока.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
			Иначе
				Если РезультатПоиска.Д < Recordset.Fields("DATE_FROM").Value Тогда
					РезультатПоиска.Д = Recordset.Fields("DATE_FROM").Value;
					РезультатПоиска.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
				КонецЕсли; 
			КонецЕсли; 
			
			Recordset.MoveNext();
		КонецЦикла;
		Recordset.Close();
		Recordset = NULL;
		
		ФильтрПоНДС = "";
		Для каждого СтрокаТаблицы Из ТЗСтавок Цикл
			ФильтрПоНДС = ФильтрПоНДС + ?(ПустаяСтрока(ФильтрПоНДС),"",", ")+Формат(СтрокаТаблицы.ИдПер,"ЧГ=");		
		КонецЦикла; 
		
				
		//Козлова Е.Д. 11.04.12 Рисковых пациентов обрабатывать отдельно
		РисковоеПрикрепление = "";
		Если Объект.РисковыеПациенты = 0 тогда
			РисковоеПрикрепление = "(((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND(RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'РИСКОВОЕ ПРИКРЕПЛЕНИЕ')))OR (ISNULL(FM_BILLDET.FM_CLINK_ID,0) = 0)";
		Иначе
			РисковоеПрикрепление = "((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) = 'РИСКОВОЕ ПРИКРЕПЛЕНИЕ'))";
		КонецЕсли;
		
				//Козлова Е.Д. 21.05.15 Законченные случаи обрабатывать отдельно
		ЗаконченныйСлучай = "";
		Если Объект.ЗС = 0 тогда
			ЗаконченныйСлучай = "(((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND(RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'Законченный Случай')))OR (ISNULL(FM_BILLDET.FM_CLINK_ID,0) = 0)";
		Иначе
			ЗаконченныйСлучай = "((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) = 'Законченный Случай'))";
		КонецЕсли;

		
		ТаблицаГоспитальныхТалонов = ПолучитьТаблицуГоспитальныхТалонов(COMОбъектConnection);
				
		//
		
		Recordset = Новый COMОбъект("ADODB.Recordset");	
			
		ТекстЗапроса = "SELECT 	
		|   ISNULL(FM_BILLDET_PAY.PRICE, 0) AS PRICE_TO_PAY,
		|	ISNULL(ISNULL(FM_BILLDET.PRICE_TO_PAY, 0) * (ISNULL(FM_TAXE_DET.TAXE_PERC,0)/(ISNULL(FM_TAXE_DET.TAXE_PERC,0)+100))  ,0) AS SUM_NDS,
		|	FM_DEP.FM_DEP_ID,
		|	FM_BILL.BILL_DATE,
		|   FM_BILL.BILL_NUM,
		|   FM_DEP.CODE AS DEP_CODE,
		|   FM_DEP.LABEL AS DEP_LABEL,
		|	FM_ORG.FM_ORG_ID,
		|   FM_ORG.CODE AS ORG_CODE,
		|   FM_ORG.INN,
		|	FM_ORG.LABEL AS ORG_LABEL,
		|   FM_CLINK.FM_CLINK_ID,
		|	ISNULL(FM_TAXE_DET.TAXE_PERC, 0) AS TAXE_PERC,
		|	ISNULL(FM_BILLDET.FM_SERV_ID, 0) AS FM_SERV_ID,
		|   FM_SERV.LABEL AS FM_SERV_LABEL,
		|   ISNULL(FM_BILLDET_PAY.PRICE,0) AS PAYED_PRICE,
		|   ISNULL(SUBQUERY.PRICE,0) AS TOTAL_PRICE,
		|	ISNULL(FM_BILL.MOTCONSU_ID,0) AS MOTCONSU_ID,
		|	ISNULL(FM_BILL.PATIENTS_ID,0) AS PATIENTS_ID,
		|	ISNULL(FM_BILL.DATE_CREATE,0) AS DATE_CREATE,
		|	FM_BILL.FM_BILL_ID
		|
		|FROM
		|	FM_BILL  WITH (NOLOCK)
		|
		|
		|LEFT JOIN FM_BILLDET  WITH (NOLOCK)
		|ON (FM_BILL.FM_BILL_ID = FM_BILLDET.FM_BILL_ID)AND(FM_BILLDET.DONE = 1)AND(FM_BILLDET.CANCEL = 0)
		|
		|LEFT JOIN FM_DEP  WITH (NOLOCK)
		|ON FM_BILL.FM_DEP_ID = FM_DEP.FM_DEP_ID
		|
		|LEFT JOIN FM_CLINK  WITH (NOLOCK)
		|ON FM_BILLDET.FM_CLINK_ID = FM_CLINK.FM_CLINK_ID
		|
		|LEFT JOIN FM_CONTR  WITH (NOLOCK)
		|ON	FM_CONTR.FM_CONTR_ID = FM_CLINK.FM_CONTR_ID
		|
		|LEFT JOIN FM_ORG  WITH (NOLOCK)
		|ON FM_ORG.FM_ORG_ID = FM_CONTR.FM_ORG1_ID
		|
		|LEFT JOIN FM_SERV  WITH (NOLOCK)
		|ON FM_BILLDET.FM_SERV_ID = FM_SERV.FM_SERV_ID
		|
		|LEFT JOIN FM_TAXE_DET  WITH (NOLOCK)
		|ON FM_SERV.FM_TAXE_ID = FM_TAXE_DET.FM_TAXE_ID
		|
		|LEFT JOIN FM_BILLDET_PAY  WITH (NOLOCK)
		|ON (FM_BILLDET.FM_BILLDET_ID = FM_BILLDET_PAY.FM_BILLDET_ID)AND(ISNULL(FM_BILLDET_PAY.FM_ORG_ID,0)<>0)
		|
		|LEFT JOIN  
		|	(SELECT
		|    	SUBTABLE.FM_BILLDET_ID,
		|		SUM(SUBTABLE.PRICE) AS PRICE
		|		FROM FM_BILLDET_PAY AS SUBTABLE  WITH (NOLOCK)
		|		GROUP BY SUBTABLE.FM_BILLDET_ID
		|	)AS SUBQUERY
        |ON FM_BILLDET.FM_BILLDET_ID = SUBQUERY.FM_BILLDET_ID 
		|
		|WHERE (FM_BILL.BILL_DATE >= '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"')AND(FM_BILL.BILL_DATE <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')
		|AND (ISNULL(FM_SERV.CODE,'') LIKE '05.01%')
		|AND ( 
		|    (ISNULL(FM_BILLDET_PAY.FM_ORG_ID,0)<>0)AND
		|    (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'ФизЛица')
		|	)
		|AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>5000)AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>8970)
		|AND (ISNULL(FM_TAXE_DET.FM_TAXE_DET_ID,1) IN ("+ФильтрПоНДС+"))
		|AND (ISNULL(FM_ORG.FM_ORG_ID,0) = "+Формат(Объект.ИдСтраховойКомпании,"ЧГ=0")+")
		|AND("+ТекстОтбораПоОрганизации+")
		| " + ТекстОтбораПоДоговору + "
		|AND ("+РисковоеПрикрепление+")
		|AND("+ЗаконченныйСлучай+")
		|ORDER BY
		|	FM_DEP.FM_DEP_ID, ISNULL(FM_TAXE_DET.TAXE_PERC, 0), FM_BILL.BILL_DATE
		|";
												
		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);

		СтарыйИдОтдела = "";
		СтараяСтавкаНДС = "";
		
		НоваяСтрока = "";
		
		Пока НЕ Recordset.EOF Цикл
			
			MOTCONSU_ID = Recordset.Fields("MOTCONSU_ID").Value;
			PATIENTS_ID = Recordset.Fields("PATIENTS_ID").Value;
			DATE_CREATE = Recordset.Fields("DATE_CREATE").Value;
			FM_BILL_ID = Recordset.Fields("FM_BILL_ID").Value;
			FM_SERV_ID = Recordset.Fields("FM_SERV_ID").Value;
			Если НЕ ПроверитьТалонПоТаблицеГоспитальныхТалонов(ТаблицаГоспитальныхТалонов, MOTCONSU_ID, PATIENTS_ID, DATE_CREATE, FM_BILL_ID, FM_SERV_ID) Тогда
				Recordset.MoveNext();
				Продолжить;
			КонецЕсли; 
			
			Если (СтарыйИдОтдела <> Recordset.Fields("FM_DEP_ID").Value)ИЛИ
				(СтараяСтавкаНДС <> Recordset.Fields("TAXE_PERC").Value) Тогда
							
				НоваяСтрока = ТаблицаДокументовРеализации2Объект.Добавить();
				НоваяСтрока.ИдОтделения = Recordset.Fields("FM_DEP_ID").Value;
				НоваяСтрока.ОтделениеНаименованиеМедиалог = Recordset.Fields("DEP_LABEL").Value;
				НоваяСтрока.СтавкаНДС = Recordset.Fields("TAXE_PERC").Value;
				СтарыйИдОтдела = НоваяСтрока.ИдОтделения;
				СтараяСтавкаНДС = НоваяСтрока.СтавкаНДС;
				
				РезультатПоиска = ТЗ_КэшПодразделениеНоменклатураОбъект.Найти(НоваяСтрока.ИдОтделения, "Ид_Медиалог"); 
				Если РезультатПоиска <> Неопределено Тогда
					НоваяСтрока.Номенклатура = РезультатПоиска.Номенклатура;						
				Иначе	
				
					Запрос = Новый Запрос;
                    Запрос.УстановитьПараметр("Ид_Медиалог", НоваяСтрока.ИдОтделения);
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Рег.Номенклатура КАК Номенклатура
					|ИЗ
					|	РегистрСведений._СоответствиеПодразделенийНоменклатуре КАК Рег
					|ГДЕ
					|	Рег.Ид = &Ид_Медиалог
					|";
		
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаКэша = ТЗ_КэшПодразделениеНоменклатураОбъект.Добавить();
						СтрокаКэша.Ид_Медиалог = НоваяСтрока.ИдОтделения;
						СтрокаКэша.НаименованиеМедиалог = НоваяСтрока.ОтделениеНаименованиеМедиалог;
						СтрокаКэша.Номенклатура = Выборка.Номенклатура;	
						НоваяСтрока.Номенклатура = Выборка.Номенклатура;
					КонецЕсли;						
				КонецЕсли;
				
				НоваяСтрока.Услуги = ПолучитьСтруктуруТаблицыУслугДляТалонов();
				
			Конецесли;
			
			Если НоваяСтрока = "" Тогда
				Recordset.MoveNext();
				Продолжить;			
			КонецЕсли;
			
			НоваяСтрокаУслуг = НоваяСтрока.Услуги.Добавить();			
			НоваяСтрокаУслуг.НомерТалона = Recordset.Fields("BILL_NUM").Value;
			НоваяСтрокаУслуг.ДатаТалона = Recordset.Fields("BILL_DATE").Value;
			
			//НоваяСтрокаУслуг.Цена ;
			НоваяСтрокаУслуг.Сумма = Recordset.Fields("PRICE_TO_PAY").Value;
			НоваяСтрокаУслуг.СуммаНДС = Recordset.Fields("SUM_NDS").Value;
						
			Recordset.MoveNext();	   
		КонецЦикла;
		
		//Сообщить("="+ТаблицаДокументовРеализации2.Количество());
	
		Recordset.Close();
		Recordset = Неопределено;
			
		мCOMОбъектConnection = Неопределено;	
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	ЗначениеВРеквизитФормы(ТЗ_КэшПодразделениеНоменклатураОбъект, "ТЗ_КэшПодразделениеНоменклатура"); 
	
КонецПроцедуры // РазобратьСкоруюПомощь()	

&НаСервере
Процедура РазобратьПоликлинику(COMОбъектConnection, ОбработкаОбъект)
	
	ТекОрг = ЭтаФорма.Организация1; //ПолучитьИДтекОрганизации();  //-=Орг
	Если ТекОрг=0 Тогда
		Сообщить("Не определена организация");
		Возврат;	
	КонецЕсли;
	ТекстОтбораПоОрганизации = "ISNULL(FM_DEP.MAIN_ORG_ID,0)="+Формат(ТекОрг,"ЧГ=");
	//Исключаем ММЦ СОГАЗ 361
	Если ТекОрг = 1 Тогда
		ТекстОтбораПоОрганизации = ТекстОтбораПоОрганизации + "AND ISNULL(FM_ORG.FM_ORG_ID,0) not in (361)";
	КонецЕсли;
	//-=Орг
	
	ТекстОтбораПоДоговору = ПолучитьТекстОтбораПоДоговору();
	
	Если НЕ ЗначениеЗаполнено(Объект.СтраховаяКомпания) Тогда
		Сообщить("Необходимо выбрать страховую компанию");
		Возврат;	
	КонецЕсли;
	
	ЭтаФорма.СписокДокументов1С.Очистить();
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес) Тогда
		ТаблицаДокументовРеализации2Объект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
		Попытка
			ТаблицаДокументовРеализации2Объект.Очистить();
		Исключение
			ТаблицаДокументовРеализации2Объект=ПолучитьСтруктуруТаблицыДокументовРеализации2();
		КонецПопытки;
		
		ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	Иначе	
		ЭтаФорма.ТаблицаДокументовРеализации2Адрес=ПоместитьВоВременноеХранилище(ПолучитьСтруктуруТаблицыДокументовРеализации2(), ЭтаФорма.УникальныйИдентификатор);
		// + Граховский К.Н. 02.06.2015
		ТаблицаДокументовРеализации2Объект = ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
		// - Граховский К.Н. 02.06.2015
	КонецЕсли; 

	ТЗ_КэшПодразделениеНоменклатураОбъект = РеквизитФормыВЗначение("ТЗ_КэшПодразделениеНоменклатура");

	
	Попытка
			
		Recordset = Новый COMОбъект("ADODB.Recordset");	
		
		// Определим налоговые ставки
		Recordset = Новый COMОбъект("ADODB.Recordset");
		Recordset.Open("FM_TAXE_DET",COMОбъектConnection,0,1);
		
		ТЗСтавок = Новый ТаблицаЗначений;
		ТЗСтавок.Колонки.Добавить("Д");
		ТЗСтавок.Колонки.Добавить("Ид");
		ТЗСтавок.Колонки.Добавить("ИдПер");
		//ТЗСтавок.Колонки.Добавить("Ставка");
		
		Пока НЕ Recordset.EOF Цикл
			Ид = Recordset.Fields("FM_TAXE_ID").Value;
			
			РезультатПоиска = ТЗСтавок.Найти(Ид, "Ид");
			Если РезультатПоиска = Неопределено Тогда
				НоваяСтрока = ТЗСтавок.Добавить();
				НоваяСтрока.Д = Recordset.Fields("DATE_FROM").Value;
				НоваяСтрока.Ид = Ид;
				НоваяСтрока.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
			Иначе
				Если РезультатПоиска.Д < Recordset.Fields("DATE_FROM").Value Тогда
					РезультатПоиска.Д = Recordset.Fields("DATE_FROM").Value;
					РезультатПоиска.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
				КонецЕсли; 
			КонецЕсли; 
			
			Recordset.MoveNext();
		КонецЦикла;
		Recordset.Close();
		Recordset = NULL;
		
		ФильтрПоНДС = "";
		Для каждого СтрокаТаблицы Из ТЗСтавок Цикл
			ФильтрПоНДС = ФильтрПоНДС + ?(ПустаяСтрока(ФильтрПоНДС),"",", ")+Формат(СтрокаТаблицы.ИдПер,"ЧГ=");		
		КонецЦикла; 
		
		//Козлова Е.Д. 11.04.12 Рисковых пациентов обрабатывать отдельно
		РисковоеПрикрепление = "";
		Если Объект.РисковыеПациенты = 0 тогда
			РисковоеПрикрепление = "(((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND(RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'РИСКОВОЕ ПРИКРЕПЛЕНИЕ')))OR (ISNULL(FM_BILLDET.FM_CLINK_ID,0) = 0)";
		Иначе
			РисковоеПрикрепление = "((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) = 'РИСКОВОЕ ПРИКРЕПЛЕНИЕ'))";
		КонецЕсли;
				//Козлова Е.Д. 21.05.15 Законченные случаи обрабатывать отдельно
		ЗаконченныйСлучай = "";
		Если Объект.ЗС = 0 тогда
			ЗаконченныйСлучай = "(((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND(RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'Законченный Случай')))OR (ISNULL(FM_BILLDET.FM_CLINK_ID,0) = 0)";
		Иначе
			ЗаконченныйСлучай = "((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) = 'Законченный Случай'))";
		КонецЕсли;

		
		//
		
		//Сообщить("Формирование таблицы госпитальных талонов");
		
		ТаблицаГоспитальныхТалонов = ПолучитьТаблицуГоспитальныхТалонов(COMОбъектConnection);
		
		//Сообщить("Основной запрос");
		
		//
		
		Recordset = Новый COMОбъект("ADODB.Recordset");	
			
		ТекстЗапроса = "SELECT 	
		|   ISNULL(FM_BILLDET_PAY.PRICE, 0) AS PRICE_TO_PAY,
		|	ISNULL(ISNULL(FM_BILLDET.PRICE_TO_PAY, 0) * (ISNULL(FM_TAXE_DET.TAXE_PERC,0)/(ISNULL(FM_TAXE_DET.TAXE_PERC,0)+100))  ,0) AS SUM_NDS,
		|	FM_DEP.FM_DEP_ID,
		|	FM_BILL.BILL_DATE,
		|   FM_BILL.BILL_NUM,
		|   FM_DEP.CODE AS DEP_CODE,
		|   FM_DEP.LABEL AS DEP_LABEL,
		|	FM_ORG.FM_ORG_ID,
		|   FM_ORG.CODE AS ORG_CODE,
		|   FM_ORG.INN,
		|	FM_ORG.LABEL AS ORG_LABEL,
		|   FM_CLINK.FM_CLINK_ID,
		|	ISNULL(FM_TAXE_DET.TAXE_PERC, 0) AS TAXE_PERC,
		|	ISNULL(FM_BILLDET.FM_SERV_ID, 0) AS FM_SERV_ID,
		|   FM_SERV.LABEL AS FM_SERV_LABEL,
		|   ISNULL(FM_BILLDET_PAY.PRICE,0) AS PAYED_PRICE,
		|   ISNULL(SUBQUERY.PRICE,0) AS TOTAL_PRICE,
		|	ISNULL(FM_BILL.MOTCONSU_ID,0) AS MOTCONSU_ID,
		|	ISNULL(FM_BILL.PATIENTS_ID,0) AS PATIENTS_ID,
		|	ISNULL(FM_BILL.DATE_CREATE,0) AS DATE_CREATE,
		|	FM_BILL.FM_BILL_ID
		|
		|FROM
		|	FM_BILL  WITH (NOLOCK)
		|
		|
		|LEFT JOIN FM_BILLDET  WITH (NOLOCK)
		|ON (FM_BILL.FM_BILL_ID = FM_BILLDET.FM_BILL_ID)AND(FM_BILLDET.DONE = 1)AND(FM_BILLDET.CANCEL = 0)
		|
		|LEFT JOIN FM_DEP  WITH (NOLOCK)
		|ON FM_BILL.FM_DEP_ID = FM_DEP.FM_DEP_ID
		|
		|LEFT JOIN FM_CLINK  WITH (NOLOCK)
		|ON FM_BILLDET.FM_CLINK_ID = FM_CLINK.FM_CLINK_ID
		|
		|LEFT JOIN FM_CONTR  WITH (NOLOCK)
		|ON	FM_CONTR.FM_CONTR_ID = FM_CLINK.FM_CONTR_ID
		|
		|LEFT JOIN FM_ORG  WITH (NOLOCK)
		|ON FM_ORG.FM_ORG_ID = FM_CONTR.FM_ORG1_ID
		|
		|LEFT JOIN FM_SERV  WITH (NOLOCK)
		|ON FM_BILLDET.FM_SERV_ID = FM_SERV.FM_SERV_ID
		|
		|LEFT JOIN FM_TAXE_DET  WITH (NOLOCK)
		|ON FM_SERV.FM_TAXE_ID = FM_TAXE_DET.FM_TAXE_ID
		|
		|LEFT JOIN FM_BILLDET_PAY  WITH (NOLOCK)
		|ON (FM_BILLDET.FM_BILLDET_ID = FM_BILLDET_PAY.FM_BILLDET_ID)AND(ISNULL(FM_BILLDET_PAY.FM_ORG_ID,0)<>0)
		|
		|LEFT JOIN  
		|	(SELECT
		|    	SUBTABLE.FM_BILLDET_ID,
		|		SUM(SUBTABLE.PRICE) AS PRICE
		|		FROM FM_BILLDET_PAY AS SUBTABLE  WITH (NOLOCK)
		|		GROUP BY SUBTABLE.FM_BILLDET_ID
		|	)AS SUBQUERY
        |ON FM_BILLDET.FM_BILLDET_ID = SUBQUERY.FM_BILLDET_ID 
		|
		|WHERE (FM_BILL.BILL_DATE >= '"+ВернутьСтрокуДаты(Объект.ДатаНач)+"')AND(FM_BILL.BILL_DATE <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')
		|AND (NOT(   ( (ISNULL(FM_SERV.CODE,'') LIKE '05.01%')OR(ISNULL(FM_SERV.CODE,'') LIKE '03.%') )   ))
		|AND ( 
		|    (ISNULL(FM_BILLDET_PAY.FM_ORG_ID,0)<>0)AND
		|    (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'ФизЛица')
		|	)
		|AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>5000)AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>8970)
		|AND ("+РисковоеПрикрепление+")
		|AND("+ЗаконченныйСлучай+")
		|AND (ISNULL(FM_TAXE_DET.FM_TAXE_DET_ID,1) IN ("+ФильтрПоНДС+"))
		|AND (ISNULL(FM_ORG.FM_ORG_ID,0) = "+Формат(Объект.ИдСтраховойКомпании,"ЧГ=0")+")
		|AND("+ТекстОтбораПоОрганизации+")
		| " + ТекстОтбораПоДоговору + "
		|
		|ORDER BY
		|	FM_DEP.FM_DEP_ID, ISNULL(FM_TAXE_DET.TAXE_PERC, 0), FM_BILL.BILL_DATE
		|";
		
										
		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);

		СтарыйИдОтдела = "";
		СтараяСтавкаНДС = "";
		
		НоваяСтрока = "";
		
		Пока НЕ Recordset.EOF Цикл
			
			// ПроверитьТалонПоТаблицеГоспитальныхТалонов(ТаблицаГоспитальныхТалонов, MOTCONSU_ID, PATIENTS_ID, DATE_CREATE)
			
			MOTCONSU_ID = Recordset.Fields("MOTCONSU_ID").Value;
			PATIENTS_ID = Recordset.Fields("PATIENTS_ID").Value;
			DATE_CREATE = Recordset.Fields("DATE_CREATE").Value;
			FM_BILL_ID = Recordset.Fields("FM_BILL_ID").Value;
			FM_SERV_ID = Recordset.Fields("FM_SERV_ID").Value;
			Если НЕ ПроверитьТалонПоТаблицеГоспитальныхТалонов(ТаблицаГоспитальныхТалонов, MOTCONSU_ID, PATIENTS_ID, DATE_CREATE, FM_BILL_ID, FM_SERV_ID) Тогда
				Recordset.MoveNext();
				Продолжить;
			КонецЕсли; 
			
			Если (СтарыйИдОтдела <> Recordset.Fields("FM_DEP_ID").Value)ИЛИ
				(СтараяСтавкаНДС <> Recordset.Fields("TAXE_PERC").Value) Тогда
				
				НоваяСтрока = ТаблицаДокументовРеализации2Объект.Добавить();
				НоваяСтрока.ИдОтделения = Recordset.Fields("FM_DEP_ID").Value;
				НоваяСтрока.ОтделениеНаименованиеМедиалог = Recordset.Fields("DEP_LABEL").Value;
				НоваяСтрока.СтавкаНДС = Recordset.Fields("TAXE_PERC").Value;
				СтарыйИдОтдела = НоваяСтрока.ИдОтделения;
				СтараяСтавкаНДС = НоваяСтрока.СтавкаНДС;
				
				РезультатПоиска = ТЗ_КэшПодразделениеНоменклатураОбъект.Найти(НоваяСтрока.ИдОтделения, "Ид_Медиалог"); 
				Если РезультатПоиска <> Неопределено Тогда
					НоваяСтрока.Номенклатура = РезультатПоиска.Номенклатура;						
				Иначе	
				
					Запрос = Новый Запрос;
                    Запрос.УстановитьПараметр("Ид_Медиалог", НоваяСтрока.ИдОтделения);
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Рег.Номенклатура КАК Номенклатура
					|ИЗ
					|	РегистрСведений._СоответствиеПодразделенийНоменклатуре КАК Рег
					|ГДЕ
					|	Рег.Ид = &Ид_Медиалог
					|";
		
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаКэша = ТЗ_КэшПодразделениеНоменклатураОбъект.Добавить();
						СтрокаКэша.Ид_Медиалог = НоваяСтрока.ИдОтделения;
						СтрокаКэша.НаименованиеМедиалог = НоваяСтрока.ОтделениеНаименованиеМедиалог;
						СтрокаКэша.Номенклатура = Выборка.Номенклатура;	
						НоваяСтрока.Номенклатура = Выборка.Номенклатура;
					КонецЕсли;						
				КонецЕсли;
				
				НоваяСтрока.Услуги = ПолучитьСтруктуруТаблицыУслугДляТалонов();
				
			Конецесли;
			
			Если НоваяСтрока = "" Тогда
				Recordset.MoveNext();
				Продолжить;			
			КонецЕсли;
			
			НоваяСтрокаУслуг = НоваяСтрока.Услуги.Добавить();			
			НоваяСтрокаУслуг.НомерТалона = Recordset.Fields("BILL_NUM").Value;
			НоваяСтрокаУслуг.ДатаТалона = Recordset.Fields("BILL_DATE").Value;
			
			//НоваяСтрокаУслуг.Цена ;
			НоваяСтрокаУслуг.Сумма = Recordset.Fields("PRICE_TO_PAY").Value;
			НоваяСтрокаУслуг.СуммаНДС = Recordset.Fields("SUM_NDS").Value;
						
			Recordset.MoveNext();	   
		КонецЦикла;
		
		//Сообщить("="+ТаблицаДокументовРеализации2.Количество());
	
		Recordset.Close();
		Recordset = Неопределено;
			
		мCOMОбъектConnection = Неопределено;	
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	ЗначениеВРеквизитФормы(ТЗ_КэшПодразделениеНоменклатураОбъект, "ТЗ_КэшПодразделениеНоменклатура"); 
 		
КонецПроцедуры // РазобратьПоликлинику()	

&НаСервере
Процедура РазобратьГоспитальныеСобытия(COMОбъектConnection, ОбработкаОбъект)
	
	ТекОрг = ЭтаФорма.Организация1; //ПолучитьИДтекОрганизации();  //-=Орг
	Если ТекОрг=0 Тогда
		Сообщить("Не определена организация");
		Возврат;	
	КонецЕсли;
	ТекстОтбораПоОрганизации = "ISNULL(FM_DEP.MAIN_ORG_ID,0)="+Формат(ТекОрг,"ЧГ=");
	//Исключаем ММЦ СОГАЗ 361
	Если ТекОрг = 1 Тогда
		ТекстОтбораПоОрганизации = ТекстОтбораПоОрганизации + "AND ISNULL(FM_ORG.FM_ORG_ID,0) not in (361)";
	КонецЕсли;
	//-=Орг
	
	ТекстОтбораПоДоговору = ПолучитьТекстОтбораПоДоговору();
	
	Если НЕ ЗначениеЗаполнено(Объект.СтраховаяКомпания) Тогда
		Сообщить("Необходимо выбрать страховую компанию");
		Возврат;
	
	КонецЕсли;
	
	ЭтаФорма.СписокДокументов1С.Очистить();
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес) Тогда
		ТаблицаДокументовРеализации2Объект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
		Попытка
			ТаблицаДокументовРеализации2Объект.Очистить();
		Исключение
			ТаблицаДокументовРеализации2Объект=ПолучитьСтруктуруТаблицыДокументовРеализации2();
		КонецПопытки;
		
		ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	Иначе	
		ТаблицаДокументовРеализации2Объект=ПолучитьСтруктуруТаблицыДокументовРеализации2();
		ЭтаФорма.ТаблицаДокументовРеализации2Адрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли; 

	ТЗ_КэшПодразделениеНоменклатураОбъект = РеквизитФормыВЗначение("ТЗ_КэшПодразделениеНоменклатура");

	
	Попытка
			
		Recordset = Новый COMОбъект("ADODB.Recordset");	
		
		// Определим налоговые ставки
		Recordset = Новый COMОбъект("ADODB.Recordset");
		Recordset.Open("FM_TAXE_DET",COMОбъектConnection,0,1);
		
		ТЗСтавок = Новый ТаблицаЗначений;
		ТЗСтавок.Колонки.Добавить("Д");
		ТЗСтавок.Колонки.Добавить("Ид");
		ТЗСтавок.Колонки.Добавить("ИдПер");
		//ТЗСтавок.Колонки.Добавить("Ставка");
		
		Пока НЕ Recordset.EOF Цикл
			Ид = Recordset.Fields("FM_TAXE_ID").Value;
			
			РезультатПоиска = ТЗСтавок.Найти(Ид, "Ид");
			Если РезультатПоиска = Неопределено Тогда
				НоваяСтрока = ТЗСтавок.Добавить();
				НоваяСтрока.Д = Recordset.Fields("DATE_FROM").Value;
				НоваяСтрока.Ид = Ид;
				НоваяСтрока.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
			Иначе
				Если РезультатПоиска.Д < Recordset.Fields("DATE_FROM").Value Тогда
					РезультатПоиска.Д = Recordset.Fields("DATE_FROM").Value;
					РезультатПоиска.ИдПер = Recordset.Fields("FM_TAXE_DET_ID").Value;
				КонецЕсли; 
			КонецЕсли; 
			
			Recordset.MoveNext();
		КонецЦикла;
		Recordset.Close();
		Recordset = NULL;
		
		ФильтрПоНДС = "";
		Для каждого СтрокаТаблицы Из ТЗСтавок Цикл
			ФильтрПоНДС = ФильтрПоНДС + ?(ПустаяСтрока(ФильтрПоНДС),"",", ")+Формат(СтрокаТаблицы.ИдПер,"ЧГ=");		
		КонецЦикла; 
		
				
		//Козлова Е.Д. 11.04.12 Рисковых пациентов обрабатывать отдельно
		РисковоеПрикрепление = "";
		Если Объект.РисковыеПациенты = 0 тогда
			РисковоеПрикрепление = "(((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND(RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'РИСКОВОЕ ПРИКРЕПЛЕНИЕ')))OR (ISNULL(FM_BILLDET.FM_CLINK_ID,0) = 0)";
		Иначе
			РисковоеПрикрепление = "((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) = 'РИСКОВОЕ ПРИКРЕПЛЕНИЕ'))";
		КонецЕсли;

		//
		
				//Козлова Е.Д. 21.05.15 Законченные случаи обрабатывать отдельно
		ЗаконченныйСлучай = "";
		Если Объект.ЗС = 0 тогда
			ЗаконченныйСлучай = "(((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND(RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'Законченный Случай')))OR (ISNULL(FM_BILLDET.FM_CLINK_ID,0) = 0)";
		Иначе
			ЗаконченныйСлучай = "((ISNULL(FM_BILLDET.FM_CLINK_ID,0) <> 0)AND (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) = 'Законченный Случай'))";
		КонецЕсли;

		
		Recordset = Новый COMОбъект("ADODB.Recordset");	
			
		ТекстЗапроса = "SELECT 	
		|   ISNULL(FM_BILLDET_PAY.PRICE, 0) AS PRICE_TO_PAY,
		|	ISNULL(ISNULL(FM_BILLDET.PRICE_TO_PAY, 0) * (ISNULL(FM_TAXE_DET.TAXE_PERC,0)/(ISNULL(FM_TAXE_DET.TAXE_PERC,0)+100))  ,0) AS SUM_NDS,
		|	FM_DEP.FM_DEP_ID,
		|	FM_BILL.BILL_DATE,
		|   FM_BILL.BILL_NUM,
		|   FM_DEP.CODE AS DEP_CODE,
		|   FM_DEP.LABEL AS DEP_LABEL,
		|	FM_ORG.FM_ORG_ID,
		|   FM_ORG.CODE AS ORG_CODE,
		|   FM_ORG.INN,
		|	FM_ORG.LABEL AS ORG_LABEL,
		|   FM_CLINK.FM_CLINK_ID,
		|	ISNULL(FM_TAXE_DET.TAXE_PERC, 0) AS TAXE_PERC,
		|	FM_BILLDET.FM_SERV_ID AS FM_SERV_ID,
		|   FM_SERV.LABEL AS FM_SERV_LABEL,
		|   ISNULL(FM_BILLDET_PAY.PRICE,0) AS PAYED_PRICE,
		|   ISNULL(SUBQUERY.PRICE,0) AS TOTAL_PRICE
		|
		|FROM
		|	FM_BILL  WITH (NOLOCK)
		|
		|
		|
		|LEFT JOIN FM_BILLDET  WITH (NOLOCK)
		|ON (FM_BILL.FM_BILL_ID = FM_BILLDET.FM_BILL_ID)AND(FM_BILLDET.DONE = 1)AND(FM_BILLDET.CANCEL = 0)
		|
		|LEFT JOIN FM_DEP  WITH (NOLOCK)
		|ON FM_BILL.FM_DEP_ID = FM_DEP.FM_DEP_ID
		|
		|LEFT JOIN FM_CLINK  WITH (NOLOCK)
		|ON FM_BILLDET.FM_CLINK_ID = FM_CLINK.FM_CLINK_ID
		|
		|LEFT JOIN FM_CONTR  WITH (NOLOCK)
		|ON	FM_CONTR.FM_CONTR_ID = FM_CLINK.FM_CONTR_ID
		|
		|LEFT JOIN FM_ORG  WITH (NOLOCK)
		|ON FM_ORG.FM_ORG_ID = FM_CONTR.FM_ORG1_ID
		|
		|LEFT JOIN FM_SERV  WITH (NOLOCK)
		|ON FM_BILLDET.FM_SERV_ID = FM_SERV.FM_SERV_ID
		|
		|LEFT JOIN FM_TAXE_DET  WITH (NOLOCK)
		|ON FM_SERV.FM_TAXE_ID = FM_TAXE_DET.FM_TAXE_ID
		|
		|LEFT JOIN FM_BILLDET_PAY  WITH (NOLOCK)
		|ON (FM_BILLDET.FM_BILLDET_ID = FM_BILLDET_PAY.FM_BILLDET_ID)AND(ISNULL(FM_BILLDET_PAY.FM_ORG_ID,0)<>0)
		|
		|LEFT JOIN  
		|	(SELECT
		|    	SUBTABLE.FM_BILLDET_ID,
		|		SUM(SUBTABLE.PRICE) AS PRICE
		|		FROM FM_BILLDET_PAY AS SUBTABLE  WITH (NOLOCK)
		|		GROUP BY SUBTABLE.FM_BILLDET_ID
		|	)AS SUBQUERY
        |ON FM_BILLDET.FM_BILLDET_ID = SUBQUERY.FM_BILLDET_ID 
		|
		|WHERE 
		|
		| ( 
		|    (ISNULL(FM_BILLDET_PAY.FM_ORG_ID,0)<>0)AND
		|    (RTRIM(ISNULL(FM_CLINK.CODE_AN,'')) <> 'ФизЛица')
		|	)
		|AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>5000)AND(ISNULL(FM_BILLDET.FM_SERV_ID,0)<>8970)
		|AND (ISNULL(FM_TAXE_DET.FM_TAXE_DET_ID,1) IN ("+ФильтрПоНДС+"))
		|AND (ISNULL(FM_ORG.FM_ORG_ID,0) = "+Формат(Объект.ИдСтраховойКомпании,"ЧГ=0")+")
		|AND("+ТекстОтбораПоОрганизации+")
		| " + ТекстОтбораПоДоговору + "
		|AND("+РисковоеПрикрепление+")
		|AND("+ЗаконченныйСлучай+")
		|
		|AND
		|	(FM_BILL.FM_BILL_ID IN (
		|
		|		SELECT
		|       	BILLS.FM_BILL_ID
		|       FROM
		|		(SELECT
		|       	BILLS_SUBQ.FM_BILL_ID,
		|			BILLS_SUBQ.PATIENTS_ID,
		|			BILLS_SUBQ.DATE_CREATE,
		|			BILLS_SUBQ.MOTCONSU_ID,
		|			ISNULL(SERVS_SUBQUERY.HAS_12651,0) AS HAS_12651
		|       FROM
		|       	FM_BILL AS BILLS_SUBQ  WITH (NOLOCK)
		|
		|       LEFT JOIN
		|
		|       	(SELECT DISTINCT
		|           	1 AS HAS_12651,
		|               SERVS.FM_BILL_ID
		|           FROM
		|           	FM_BILLDET AS SERVS  WITH (NOLOCK)
		|           WHERE
		|				SERVS.FM_SERV_ID = 12651
		|			) AS SERVS_SUBQUERY
		|		ON
		|       	BILLS_SUBQ.FM_BILL_ID = SERVS_SUBQUERY.FM_BILL_ID
		|       ) AS BILLS
		|
		|		INNER JOIN
		|
		|			(SELECT
		|				MTCONS_END.PATIENTS_ID,
		|				MTCONS_END.MOTCONSU_EV_ID,
		|				MOTCONSU2.MOTCONSU_ID,
		|   			MTCONS_END.DATE_CONSULTATION AS DATE_FINISH,
		|   			MTCONS_SUBQUERY.DATE_CONSULTATION AS DATE_START
		|			FROM
		|				MOTCONSU AS MTCONS_END  WITH (NOLOCK)
		|			LEFT JOIN
		|				(SELECT DISTINCT
		|					MC_BEG.MOTCONSU_EV_ID AS MOTCONSU_EV_ID,
		|       			MC_BEG.DATE_CONSULTATION
		|				FROM MOTCONSU AS MC_BEG  WITH (NOLOCK)
		|				WHERE 
		|					(ISNULL(MC_BEG.MOTCONSU_EVENT_TYPES_ID,0)=1)AND
		|					(ISNULL(MC_BEG.EV_GOSP,0)=1)AND
		| 					(ISNULL(MC_BEG.DATE_CONSULTATION,'"+ВернутьСтрокуДаты(Объект.ДатаНач)+"') <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')
		|   			)AS MTCONS_SUBQUERY
		|			ON	MTCONS_END.MOTCONSU_EV_ID = MTCONS_SUBQUERY.MOTCONSU_EV_ID
		|
		|           LEFT JOIN
		|           	MOTCONSU AS MOTCONSU2  WITH (NOLOCK)
		|           ON
		|           	MTCONS_END.MOTCONSU_EV_ID = MOTCONSU2.MOTCONSU_EV_ID
		|
		|
		|			WHERE
		|				(ISNULL(MTCONS_END.ZAPIS_ZAKR_VAYHAQ_SOB_TIE,0)=1)AND
		|   			(ISNULL(MTCONS_END.DATE_CONSULTATION,'"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон)+1)+"') <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')AND
		|   			(ISNULL(MTCONS_END.DATE_CONSULTATION,'"+ВернутьСтрокуДаты(НачалоДня(Объект.ДатаНач)-1)+"') >= '"+ВернутьСтрокуДаты(НачалоДня(Объект.ДатаНач))+"')
		|   		) AS IJ_SUBQUERY
		|			ON 
		|
		|		(BILLS.MOTCONSU_ID = IJ_SUBQUERY.MOTCONSU_ID)
		|		
		|		UNION ALL		
		|
		|		SELECT
		|       	BILLS.FM_BILL_ID
		|       FROM
		|		(SELECT
		|       	BILLS_SUBQ.FM_BILL_ID,
		|			BILLS_SUBQ.PATIENTS_ID,
		|			BILLS_SUBQ.DATE_CREATE,
		|			BILLS_SUBQ.MOTCONSU_ID,
		|			ISNULL(SERVS_SUBQUERY.HAS_12651,0) AS HAS_12651
		|       FROM
		|       	FM_BILL AS BILLS_SUBQ  WITH (NOLOCK)
		|
		|       LEFT JOIN
		|
		|       	(SELECT DISTINCT
		|           	1 AS HAS_12651,
		|               SERVS.FM_BILL_ID
		|           FROM
		|           	FM_BILLDET AS SERVS  WITH (NOLOCK)
		|           WHERE
		|				SERVS.FM_SERV_ID = 12651
		|			) AS SERVS_SUBQUERY
		|		ON
		|       	BILLS_SUBQ.FM_BILL_ID = SERVS_SUBQUERY.FM_BILL_ID
		|       ) AS BILLS
		|
		|		INNER JOIN
		|
		|			(SELECT
		|				MTCONS_END.PATIENTS_ID,
		|				MTCONS_END.MOTCONSU_EV_ID,
		|				MOTCONSU2.MOTCONSU_ID,
		|   			MTCONS_END.DATE_CONSULTATION AS DATE_FINISH,
		|   			MTCONS_SUBQUERY.DATE_CONSULTATION AS DATE_START
		|			FROM
		|				MOTCONSU AS MTCONS_END  WITH (NOLOCK)
		|			LEFT JOIN
		|				(SELECT DISTINCT
		|					MC_BEG.MOTCONSU_EV_ID AS MOTCONSU_EV_ID,
		|       			MC_BEG.DATE_CONSULTATION
		|				FROM MOTCONSU AS MC_BEG  WITH (NOLOCK)
		|				WHERE 
		|					(ISNULL(MC_BEG.MOTCONSU_EVENT_TYPES_ID,0)=1)AND
		|					(ISNULL(MC_BEG.EV_GOSP,0)=1)AND
		| 					(ISNULL(MC_BEG.DATE_CONSULTATION,'"+ВернутьСтрокуДаты(Объект.ДатаНач)+"') <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')
		|   			)AS MTCONS_SUBQUERY
		|			ON	MTCONS_END.MOTCONSU_EV_ID = MTCONS_SUBQUERY.MOTCONSU_EV_ID
		|
		|           LEFT JOIN
		|           	MOTCONSU AS MOTCONSU2  WITH (NOLOCK)
		|           ON
		|           	MTCONS_END.MOTCONSU_EV_ID = MOTCONSU2.MOTCONSU_EV_ID
		|
		|
		|			WHERE
		|				(ISNULL(MTCONS_END.ZAPIS_ZAKR_VAYHAQ_SOB_TIE,0)=1)AND
		|   			(ISNULL(MTCONS_END.DATE_CONSULTATION,'"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон)+1)+"') <= '"+ВернутьСтрокуДаты(КонецДня(Объект.ДатаКон))+"')AND
		|   			(ISNULL(MTCONS_END.DATE_CONSULTATION,'"+ВернутьСтрокуДаты(НачалоДня(Объект.ДатаНач)-1)+"') >= '"+ВернутьСтрокуДаты(НачалоДня(Объект.ДатаНач))+"')
		|   		) AS IJ_SUBQUERY
		|			ON 
		|		
		|		(ISNULL(BILLS.MOTCONSU_ID,0)=0)AND
		|		(BILLS.HAS_12651=1)AND
		|		(BILLS.PATIENTS_ID = IJ_SUBQUERY.PATIENTS_ID)AND
		|   	(BILLS.DATE_CREATE <= IJ_SUBQUERY.DATE_FINISH)AND
		|		(BILLS.DATE_CREATE >= IJ_SUBQUERY.DATE_START)
		|		
		|    ))
		|
		|ORDER BY
		|	FM_DEP.FM_DEP_ID, ISNULL(FM_TAXE_DET.TAXE_PERC, 0), FM_BILL.BILL_DATE
		|";
		
				
										
		Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);

		СтарыйИдОтдела = "";
		СтараяСтавкаНДС = "";
		
		НоваяСтрока = "";
		
		Пока НЕ Recordset.EOF Цикл
			
			Если (СтарыйИдОтдела <> Recordset.Fields("FM_DEP_ID").Value)ИЛИ
				(СтараяСтавкаНДС <> Recordset.Fields("TAXE_PERC").Value) Тогда
							
				НоваяСтрока = ТаблицаДокументовРеализации2Объект.Добавить();
				НоваяСтрока.ИдОтделения = Recordset.Fields("FM_DEP_ID").Value;
				НоваяСтрока.ОтделениеНаименованиеМедиалог = Recordset.Fields("DEP_LABEL").Value;
				НоваяСтрока.СтавкаНДС = Recordset.Fields("TAXE_PERC").Value;
				СтарыйИдОтдела = НоваяСтрока.ИдОтделения;
				СтараяСтавкаНДС = НоваяСтрока.СтавкаНДС;
				
				РезультатПоиска = ТЗ_КэшПодразделениеНоменклатураОбъект.Найти(НоваяСтрока.ИдОтделения, "Ид_Медиалог"); 
				Если РезультатПоиска <> Неопределено Тогда
					НоваяСтрока.Номенклатура = РезультатПоиска.Номенклатура;						
				Иначе	
				
					Запрос = Новый Запрос;
                    Запрос.УстановитьПараметр("Ид_Медиалог", НоваяСтрока.ИдОтделения);
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Рег.Номенклатура КАК Номенклатура
					|ИЗ
					|	РегистрСведений._СоответствиеПодразделенийНоменклатуре КАК Рег
					|ГДЕ
					|	Рег.Ид = &Ид_Медиалог
					|";
		
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаКэша = ТЗ_КэшПодразделениеНоменклатураОбъект.Добавить();
						СтрокаКэша.Ид_Медиалог = НоваяСтрока.ИдОтделения;
						СтрокаКэша.НаименованиеМедиалог = НоваяСтрока.ОтделениеНаименованиеМедиалог;
						СтрокаКэша.Номенклатура = Выборка.Номенклатура;	
						НоваяСтрока.Номенклатура = Выборка.Номенклатура;
					КонецЕсли;						
				КонецЕсли;
				
				НоваяСтрока.Услуги = ПолучитьСтруктуруТаблицыУслугДляТалонов();
				
			Конецесли;
			
			Если НоваяСтрока = "" Тогда
				Recordset.MoveNext();
				Продолжить;			
			КонецЕсли;
			
			НоваяСтрокаУслуг = НоваяСтрока.Услуги.Добавить();			
			НоваяСтрокаУслуг.НомерТалона = Recordset.Fields("BILL_NUM").Value;
			НоваяСтрокаУслуг.ДатаТалона = Recordset.Fields("BILL_DATE").Value;
			
			//НоваяСтрокаУслуг.Цена ;
			НоваяСтрокаУслуг.Сумма = Recordset.Fields("PRICE_TO_PAY").Value;
			НоваяСтрокаУслуг.СуммаНДС = Recordset.Fields("SUM_NDS").Value;
						
			Recordset.MoveNext();	   
		КонецЦикла;
		
		Recordset.Close();
		Recordset = Неопределено;
			
		мCOMОбъектConnection = Неопределено;	
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	ЗначениеВРеквизитФормы(ТЗ_КэшПодразделениеНоменклатураОбъект, "ТЗ_КэшПодразделениеНоменклатура"); 
 	
КонецПроцедуры // РазобратьГоспитальныеСобытия()

&НаСервере
Процедура СтраховыеКомпании_ЗагрузитьНаСервере()
	
	рдДеревоДляСтраховыхКомпанийОбъект = РеквизитФормыВЗначение("рдДеревоДляСтраховыхКомпаний");
	рдДеревоДляСтраховыхКомпанийОбъект.Строки.Очистить();
	ЗначениеВРеквизитФормы(рдДеревоДляСтраховыхКомпанийОбъект,"рдДеревоДляСтраховыхКомпаний");
	
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	
	COMОбъектConnection = ОбработкаОбъект.ПолучитьСоединение();
	Если COMОбъектConnection = Неопределено Тогда	
		Сообщить("Не удалось установить соединение");
		Возврат;
	КонецЕсли;

	
	Если ЭтаФорма.Направление = 0 Тогда
		// Стоматология
		РазобратьСтоматологию(COMОбъектConnection, ОбработкаОбъект);
	ИначеЕсли ЭтаФорма.Направление = 1 Тогда	
		// Скорая помощь
		РазобратьСкоруюПомощь(COMОбъектConnection, ОбработкаОбъект);
	ИначеЕсли ЭтаФорма.Направление = 2 Тогда	
		// Поликлиника
		РазобратьПоликлинику(COMОбъектConnection, ОбработкаОбъект);
	Иначе
		// Госпитальное событие
		РазобратьГоспитальныеСобытия(COMОбъектConnection, ОбработкаОбъект);	
	КонецЕсли; 
	
	ЗапомнитьПервуюСтраницуВСтеке("СтраницаСтраховыеКомпании");
	
	Если НЕ	ПроверитьПодразделения2() Тогда	
		ОбработкаОбъект.ЗакрытьСоединение();
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.мСтекСтраниц.Очистить();
	
	СписокДокументов1СОбъект = ЭтаФорма.СписокДокументов1С;
	
	СписокДокументов1СОбъект.Очистить();
	
	ТаблицаДокументовРеализации2Объект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	
	рдДеревоДляСтраховыхКомпанийОбъект = РеквизитФормыВЗначение("рдДеревоДляСтраховыхКомпаний");
	
	ТЗ_КэшПодразделениеНоменклатураОбъект = РеквизитФормыВЗначение("ТЗ_КэшПодразделениеНоменклатура");
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументовРеализации2Объект Цикл
	
		НоваяСтрока = рдДеревоДляСтраховыхКомпанийОбъект.Строки.Добавить();
	    НоваяСтрока.СтрокаТаблицы = ТаблицаДокументовРеализации2Объект.Индекс(СтрокаТаблицы);
		Услуга = СтрокаТаблицы.Номенклатура;
		Если НЕ ЗначениеЗаполнено(Услуга) Тогда
			
			РезультатПоиска = ТЗ_КэшПодразделениеНоменклатураОбъект.Найти(СтрокаТаблицы.ИдОтделения, "Ид_Медиалог"); 
			Если РезультатПоиска <> Неопределено Тогда
				СтрокаТаблицы.Номенклатура = РезультатПоиска.Номенклатура;
				Услуга = СтрокаТаблицы.Номенклатура;
			КонецЕсли;	
		КонецЕсли; 
		
		НоваяСтрока.Услуга = Услуга;
		
		Для каждого СтрокаУслуг Из СтрокаТаблицы.Услуги Цикл
		
			НоваяСтрокаТалона = НоваяСтрока.Строки.Добавить();
			НоваяСтрокаТалона.Документ = Формат(СтрокаУслуг.НомерТалона, "ЧГ=");
			НоваяСтрокаТалона.ДатаДок = СтрокаУслуг.ДатаТалона;
			НоваяСтрокаТалона.Сумма = СтрокаУслуг.Сумма;
		
		КонецЦикла; 
		
		НоваяСтрока.Сумма = НоваяСтрока.Строки.Итог("Сумма");
	
	КонецЦикла;
	
		
	ЗаполнитьСсылкиДокументов1СпоСтраховымКомпаниям(рдДеревоДляСтраховыхКомпанийОбъект);

	ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	
	ЗначениеВРеквизитФормы(рдДеревоДляСтраховыхКомпанийОбъект, "рдДеревоДляСтраховыхКомпаний");
	
	ЗначениеВРеквизитФормы(ТЗ_КэшПодразделениеНоменклатураОбъект, "ТЗ_КэшПодразделениеНоменклатура");
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиДокументов1СпоСтраховымКомпаниям(рдДеревоДляСтраховыхКомпанийОбъект)
	
	ВремКэшДокументов = Новый ТаблицаЗначений;
	
	СписокИд = Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из рдДеревоДляСтраховыхКомпанийОбъект.Строки Цикл
		Для каждого СтрокаУслуг Из СтрокаТаблицы.Строки Цикл
			Если ПустаяСтрока(СтрокаУслуг.Документ) Тогда
				Продолжить;
			КонецЕсли; 
			СписокИд.Добавить(Число(СтрокаУслуг.Документ));
		КонецЦикла;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",Объект.СтраховаяКомпания); 
	Запрос.УстановитьПараметр("СписокИд",СписокИд);
	Запрос.УстановитьПараметр("СтарыйИндекс",2);
	Запрос.УстановитьПараметр("НовыйИндекс",Направление+3);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	_Услуги.Ссылка КАК Документ1С,
	|   _Услуги.Ид_Документ КАК Ид
	|ИЗ
	|	Документ.РеализацияТоваровУслуг._УслугиМедиалога КАК _Услуги
	|ГДЕ
	|	(_Услуги.Ид_Документ В (&СписокИд)) И ((_Услуги.Ссылка._ТипГрупповогоДокумента=&СтарыйИндекс)ИЛИ(_Услуги.Ссылка._ТипГрупповогоДокумента=&НовыйИндекс))
	|	И (_Услуги.Ссылка.Контрагент=&Контрагент)
	|";
	
	ВремКэшДокументов = Запрос.Выполнить().Выгрузить();
	
		
	Для каждого СтрокаТаблицы Из рдДеревоДляСтраховыхКомпанийОбъект.Строки Цикл
		Для каждого СтрокаУслуг Из СтрокаТаблицы.Строки Цикл
			Если ПустаяСтрока(СтрокаУслуг.Документ) Тогда
				Продолжить;
			КонецЕсли; 
			
			РезультатПоиска = ВремКэшДокументов.Найти(Число(СтрокаУслуг.Документ), "Ид");
			Если РезультатПоиска <> Неопределено Тогда
			
				СтрокаУслуг.Документ1С = РезультатПоиска.Документ1С;
				
				Если СписокДокументов1С.НайтиПоЗначению(СтрокаУслуг.Документ1С)=Неопределено Тогда
					СписокДокументов1С.Добавить(СтрокаУслуг.Документ1С);
				КонецЕсли; 
			
			КонецЕсли; 
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьСсылкиДокументов1СпоСтраховымКомпаниям()

&НаКлиенте
Процедура СтраховыеКомпании_Загрузить(Команда)
	СтраховыеКомпании_ЗагрузитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтраховаяКомпанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтраховаяКомпанияОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура СтраховаяКомпанияОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");

    // + Байдин 2018.10.09
    Объект.ИдСтраховойКомпании = 0;
    // - Байдин 2018.10.09
    
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
        // + Байдин 2018.10.09
        //Объект.ИдСтраховойКомпании = 0;
        // - Байдин 2018.10.09
		Объект.НаименованиеМедиалогСтрКомпании = "";
		ЭтаФорма.НадписьНаименованиеМедиалог = Объект.НаименованиеМедиалогСтрКомпании;
		Возврат;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтрКомпания", ВыбранноеЗначение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Ид
	|ИЗ
	|	РегистрСведений._СоответствиеКонтрагентов КАК Рег
	|ГДЕ
	|	Рег.Контрагент = &СтрКомпания
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Ид = 0;
	Если Выборка.Следующий() Тогда
		Ид = Выборка.Ид;
	КонецЕсли; 
	
	Если Ид <> 0 Тогда
		// Слазить в Медиалог, взять название контрагента
		
		COMОбъектConnection = ОбработкаОбъект.ПолучитьСоединение();
		Если COMОбъектConnection = Неопределено Тогда	
			Сообщить("Не удалось подключиться к Медиалогу");
			СтандартнаяОбработка = Ложь;
			ВыбранноеЗначение = Неопределено;
			Объект.ИдСтраховойКомпании = 0;
			Объект.НаименованиеМедиалогСтрКомпании = "";
			ЭтаФорма.НадписьНаименованиеМедиалог = Объект.НаименованиеМедиалогСтрКомпании;
			Возврат;
		КонецЕсли;
		
		Попытка		
			Recordset = Новый COMОбъект("ADODB.Recordset");
			
			ТекстЗапроса = "SELECT 
			|	FM_ORG.FM_ORG_ID,
			|	FM_ORG.INN,
			|	FM_ORG.LABEL AS ORGLABEL
			|
			|FROM FM_ORG  WITH (NOLOCK)
			|
			|WHERE (FM_ORG.FM_ORG_ID = "+Формат(Ид, "ЧГ=0")+")
			|";

			Recordset.Open(ТекстЗапроса,COMОбъектConnection,0,1);
		
			Если НЕ Recordset.EOF Тогда
				// + Граховский К.Н. 08.05.2015
				//Объект.ИдСтраховойКомпании = Recordset.Fields("FM_ORG_ID").Value;
				Объект.ИдСтраховойКомпании = Число(Recordset.Fields("FM_ORG_ID").Value);
				// - Граховский К.Н. 08.05.2015
				Объект.НаименованиеМедиалогСтрКомпании = Recordset.Fields("INN").Value;
				Если НЕ ПустаяСтрока(Объект.НаименованиеМедиалогСтрКомпании) Тогда
					Объект.НаименованиеМедиалогСтрКомпании = СокрЛП(Объект.НаименованиеМедиалогСтрКомпании) + ", ";
				КонецЕсли; 
				Объект.НаименованиеМедиалогСтрКомпании = Объект.НаименованиеМедиалогСтрКомпании + СокрЛП(Recordset.Fields("ORGLABEL").Value);
				Объект.ИдСтраховойКомпании = Recordset.Fields("FM_ORG_ID").Value;
				ЭтаФорма.НадписьНаименованиеМедиалог = Объект.НаименованиеМедиалогСтрКомпании;
			Иначе
				Сообщить("Не найден контрагент '"+Объект.СтраховаяКомпания+"' в Медиалоге");
				СтандартнаяОбработка = Ложь;
				Объект.ИдСтраховойКомпании = 0;
				Объект.НаименованиеМедиалогСтрКомпании = "";
				ЭтаФорма.НадписьНаименованиеМедиалог = Объект.НаименованиеМедиалогСтрКомпании;
				ВыбранноеЗначение = Неопределено;
			КонецЕсли;	
			
			Recordset.Close();
			Recordset = NULL;

		Исключение
			Сообщить(ОписаниеОшибки());
		    СтандартнаяОбработка = Ложь;
			Объект.ИдСтраховойКомпании = 0;
			Объект.НаименованиеМедиалогСтрКомпании = "";
			ЭтаФорма.НадписьНаименованиеМедиалог = Объект.НаименованиеМедиалогСтрКомпании;
			ВыбранноеЗначение = Неопределено;
		КонецПопытки;	

	    //COMОбъектConnection = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

Функция ПроверитьПодразделения2()

	Результат = Истина;
	
	// 1. Заполнить ТЗ_КэшПодразделениеНоменклатура
	
	ТЗПодразделенийОбъект=РеквизитФормыВЗначение("ТЗПодразделений");
	ТЗ_КэшПодразделениеНоменклатураОбъект=РеквизитФормыВЗначение("ТЗ_КэшПодразделениеНоменклатура");
	
	ТЗ_КэшПодразделениеНоменклатураОбъект.Очистить();
	ТЗПодразделенийОбъект.Очистить();
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес) Тогда
		ТаблицаДокументовРеализации2Объект=ПолучитьИзВременногоХранилища(ЭтаФорма.ТаблицаДокументовРеализации2Адрес);
	Иначе
		ТаблицаДокументовРеализации2Объект=ПолучитьСтруктуруТаблицыДокументовРеализации2();
		ЭтаФорма.ТаблицаДокументовРеализации2Адрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	
	Для каждого СтрокаТаблицы из ТаблицаДокументовРеализации2Объект Цикл
		////Если НЕ СтрокаТаблицы.Флаг Тогда
		////	Продолжить;
		////КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИдОтделения) Тогда
			Продолжить;	
		КонецЕсли;
			
		Если ТЗ_КэшПодразделениеНоменклатураОбъект.Найти(СтрокаТаблицы.ИдОтделения, "Ид_Медиалог")<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		НоваяСтрокаКэша = ТЗ_КэшПодразделениеНоменклатураОбъект.Добавить();
		НоваяСтрокаКэша.Ид_Медиалог = СтрокаТаблицы.ИдОтделения;
		НоваяСтрокаКэша.НаименованиеМедиалог = СтрокаТаблицы.ОтделениеНаименованиеМедиалог;
		 
	КонецЦикла;

	// 2. В ТЗ_КэшПодразделениеНоменклатура заполнить колонку Номенклатура
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТЗ_КэшПодразделениеНоменклатураОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВнешнийИсточник.Ид_Медиалог
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;//////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Рег.Номенклатура КАК Номенклатура,
	|	Рег.Ид КАК Ид
	|ИЗ
	|	РегистрСведений._СоответствиеПодразделенийНоменклатуре КАК Рег
	|ГДЕ
	|	Рег.Ид В (ВЫБРАТЬ Ид_Медиалог ИЗ Идентификаторы)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ид = Выборка.Ид;
		РезультатПоиска = ТЗ_КэшПодразделениеНоменклатураОбъект.Найти(Ид, "Ид_Медиалог");
		Если РезультатПоиска = Неопределено Тогда
			// Это приехал НУЛЛ от куда-то
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска.Номенклатура = Выборка.Номенклатура;
		
	КонецЦикла;
	
	// 3. Оставшиеся незаполненными вывалить в ТЗПодразделений на форму
	
	МассивСтрок = ТЗ_КэшПодразделениеНоменклатураОбъект.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));	
	Если МассивСтрок.Количество()=0 Тогда
		// Проверка пройдена
	Иначе
		Для каждого ЭлементМассива из МассивСтрок Цикл	
			Если СокрЛП(ЭлементМассива.Ид_Медиалог)="" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТЗПодразделенийОбъект.Добавить();
			НоваяСтрока.НаименованиеМедиалог = ЭлементМассива.НаименованиеМедиалог;
			НоваяСтрока.КодМедиалог = ЭлементМассива.Ид_Медиалог; 	
		КонецЦикла;
		
		Если ТЗПодразделенийОбъект.Количество()=0 Тогда
			// Проверка пройдена
		Иначе
			Результат = Ложь;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСоответствиеПодразделений;
			
			Сообщить("Имеются Подразделения без соответствия в 1С");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(ТЗПодразделенийОбъект,"ТЗПодразделений");
	ЗначениеВРеквизитФормы(ТЗ_КэшПодразделениеНоменклатураОбъект,"ТЗ_КэшПодразделениеНоменклатура");
	ЭтаФорма.ТаблицаДокументовРеализации2Адрес=ПоместитьВоВременноеХранилище(ТаблицаДокументовРеализации2Объект, ЭтаФорма.УникальныйИдентификатор);
	
	Возврат Результат;

КонецФункции // ПроверитьПодразделения2()

&НаКлиенте
Процедура СтраховаяКомпанияПриИзменении(Элемент)
    
    ОпределитьДоговорыСтраховойКомпании();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОсновнойДоговорКонтрагента(Знач Контрагент)

	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОсновныеДоговорыКонтрагента.Договор
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Договор = ВыборкаДетальныеЗаписи.Договор;
	КонецЕсли;
	
	Возврат Договор;

КонецФункции // ПолучитьОсновнойДоговорКонтрагента()





 





